"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservabilityBuilder = void 0;
const stacks_1 = require("../stacks");
const addons = require("../addons");
const utils = require("../utils");
const aws_cdk_lib_1 = require("aws-cdk-lib");
class ObservabilityBuilder extends stacks_1.BlueprintBuilder {
    /**
     * This method helps you prepare a blueprint for setting up observability
     * returning an array of blueprint addons for AWS native services
     */
    enableNativePatternAddOns() {
        return this.addOns(new addons.AwsLoadBalancerControllerAddOn(), new addons.CertManagerAddOn(), new addons.ContainerInsightsAddOn(), new addons.CoreDnsAddOn(), new addons.KubeProxyAddOn(), new addons.KubeStateMetricsAddOn(), new addons.MetricsServerAddOn(), new addons.PrometheusNodeExporterAddOn());
    }
    /**
     * This method helps you prepare a blueprint for setting up observability
     * returning an array of blueprint addons for combination of AWS native and
     * AWS managed open source services
     */
    enableMixedPatternAddOns() {
        return this.addOns(new addons.AwsLoadBalancerControllerAddOn(), new addons.CertManagerAddOn(), new addons.AdotCollectorAddOn(), new addons.CoreDnsAddOn(), new addons.KubeProxyAddOn(), new addons.KubeStateMetricsAddOn(), new addons.MetricsServerAddOn(), new addons.PrometheusNodeExporterAddOn());
    }
    /**
     * This method helps you prepare a blueprint for setting up observability
     * returning an array of blueprint addons for AWS managed open source services
     * @param ampAddOnProps AmpAddonProps. This is mandatory.
     * @param kubeProxyVersion KubeProxy Version. This is optional.
     */
    enableOpenSourcePatternAddOns(ampAddOnProps, kubeProxyVersion) {
        return this.addOns(new addons.AwsLoadBalancerControllerAddOn(), new addons.CertManagerAddOn(), new addons.AdotCollectorAddOn(), new addons.AmpAddOn(ampAddOnProps), new addons.CoreDnsAddOn(), new addons.ExternalsSecretsAddOn(), new addons.GrafanaOperatorAddon(), new addons.KubeProxyAddOn(kubeProxyVersion), new addons.KubeStateMetricsAddOn(), new addons.MetricsServerAddOn(), new addons.PrometheusNodeExporterAddOn());
    }
    /**
     * This method helps you prepare a blueprint for setting up observability with
     * usage tracking addon
     */
    static builder() {
        const builder = new ObservabilityBuilder();
        builder.addOns(new addons.NestedStackAddOn({
            id: "usage-tracking-addon",
            builder: UsageTrackingAddOn.builder(),
        }));
        return builder;
    }
}
exports.ObservabilityBuilder = ObservabilityBuilder;
/**
 * Nested stack that is used as tracker for Observability Accelerator
 */
class UsageTrackingAddOn extends aws_cdk_lib_1.NestedStack {
    static builder() {
        return {
            build(scope, id, props) {
                return new UsageTrackingAddOn(scope, id, props);
            }
        };
    }
    constructor(scope, id, props) {
        super(scope, id, utils.withUsageTracking(UsageTrackingAddOn.USAGE_ID, props));
    }
}
UsageTrackingAddOn.USAGE_ID = "qs-1u9l12gj7";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2YWJpbGl0eS1idWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2J1aWxkZXJzL29ic2VydmFiaWxpdHktYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQ0FBNkM7QUFDN0Msb0NBQW9DO0FBQ3BDLGtDQUFrQztBQUVsQyw2Q0FBNEQ7QUFHNUQsTUFBYSxvQkFBcUIsU0FBUSx5QkFBZ0I7SUFFdEQ7OztPQUdHO0lBQ0kseUJBQXlCO1FBQzVCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FDZCxJQUFJLE1BQU0sQ0FBQyw4QkFBOEIsRUFBRSxFQUMzQyxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxFQUM3QixJQUFJLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRSxFQUNuQyxJQUFJLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFDekIsSUFBSSxNQUFNLENBQUMsY0FBYyxFQUFFLEVBQzNCLElBQUksTUFBTSxDQUFDLHFCQUFxQixFQUFFLEVBQ2xDLElBQUksTUFBTSxDQUFDLGtCQUFrQixFQUFFLEVBQy9CLElBQUksTUFBTSxDQUFDLDJCQUEyQixFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLHdCQUF3QjtRQUMzQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQ2QsSUFBSSxNQUFNLENBQUMsOEJBQThCLEVBQUUsRUFDM0MsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsRUFDN0IsSUFBSSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsRUFDL0IsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQ3pCLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUMzQixJQUFJLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxFQUNsQyxJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxFQUMvQixJQUFJLE1BQU0sQ0FBQywyQkFBMkIsRUFBRSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksNkJBQTZCLENBQUMsYUFBbUMsRUFBRSxnQkFBeUI7UUFDL0YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUNkLElBQUksTUFBTSxDQUFDLDhCQUE4QixFQUFFLEVBQzNDLElBQUksTUFBTSxDQUFDLGdCQUFnQixFQUFFLEVBQzdCLElBQUksTUFBTSxDQUFDLGtCQUFrQixFQUFFLEVBQy9CLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFDbEMsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQ3pCLElBQUksTUFBTSxDQUFDLHFCQUFxQixFQUFFLEVBQ2xDLElBQUksTUFBTSxDQUFDLG9CQUFvQixFQUFFLEVBQ2pDLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUMzQyxJQUFJLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxFQUNsQyxJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxFQUMvQixJQUFJLE1BQU0sQ0FBQywyQkFBMkIsRUFBRSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxPQUFPO1FBQ2pCLE1BQU0sT0FBTyxHQUFHLElBQUksb0JBQW9CLEVBQUUsQ0FBQztRQUMzQyxPQUFPLENBQUMsTUFBTSxDQUNWLElBQUksTUFBTSxDQUFDLGdCQUFnQixDQUFDO1lBQ3hCLEVBQUUsRUFBRSxzQkFBc0I7WUFDMUIsT0FBTyxFQUFFLGtCQUFrQixDQUFDLE9BQU8sRUFBRTtTQUN4QyxDQUFDLENBQUMsQ0FBQztRQUNSLE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7Q0FDSjtBQXJFRCxvREFxRUM7QUFFRDs7R0FFRztBQUNILE1BQU0sa0JBQW1CLFNBQVEseUJBQVc7SUFJakMsTUFBTSxDQUFDLE9BQU87UUFDakIsT0FBTztZQUNILEtBQUssQ0FBQyxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUF1QjtnQkFDdkQsT0FBTyxJQUFJLGtCQUFrQixDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDcEQsQ0FBQztTQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUF1QjtRQUM3RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQzs7QUFaZSwyQkFBUSxHQUFHLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJsdWVwcmludEJ1aWxkZXIgfSBmcm9tICcuLi9zdGFja3MnO1xuaW1wb3J0ICogYXMgYWRkb25zIGZyb20gJy4uL2FkZG9ucyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCAqIGFzIHNwaSBmcm9tICcuLi9zcGknO1xuaW1wb3J0IHsgTmVzdGVkU3RhY2ssIE5lc3RlZFN0YWNrUHJvcHMgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuZXhwb3J0IGNsYXNzIE9ic2VydmFiaWxpdHlCdWlsZGVyIGV4dGVuZHMgQmx1ZXByaW50QnVpbGRlciB7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBoZWxwcyB5b3UgcHJlcGFyZSBhIGJsdWVwcmludCBmb3Igc2V0dGluZyB1cCBvYnNlcnZhYmlsaXR5IFxuICAgICAqIHJldHVybmluZyBhbiBhcnJheSBvZiBibHVlcHJpbnQgYWRkb25zIGZvciBBV1MgbmF0aXZlIHNlcnZpY2VzXG4gICAgICovXG4gICAgcHVibGljIGVuYWJsZU5hdGl2ZVBhdHRlcm5BZGRPbnMoKTogT2JzZXJ2YWJpbGl0eUJ1aWxkZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRPbnMoXG4gICAgICAgICAgICBuZXcgYWRkb25zLkF3c0xvYWRCYWxhbmNlckNvbnRyb2xsZXJBZGRPbigpLFxuICAgICAgICAgICAgbmV3IGFkZG9ucy5DZXJ0TWFuYWdlckFkZE9uKCksXG4gICAgICAgICAgICBuZXcgYWRkb25zLkNvbnRhaW5lckluc2lnaHRzQWRkT24oKSxcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuQ29yZURuc0FkZE9uKCksXG4gICAgICAgICAgICBuZXcgYWRkb25zLkt1YmVQcm94eUFkZE9uKCksXG4gICAgICAgICAgICBuZXcgYWRkb25zLkt1YmVTdGF0ZU1ldHJpY3NBZGRPbigpLFxuICAgICAgICAgICAgbmV3IGFkZG9ucy5NZXRyaWNzU2VydmVyQWRkT24oKSxcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuUHJvbWV0aGV1c05vZGVFeHBvcnRlckFkZE9uKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGhlbHBzIHlvdSBwcmVwYXJlIGEgYmx1ZXByaW50IGZvciBzZXR0aW5nIHVwIG9ic2VydmFiaWxpdHkgXG4gICAgICogcmV0dXJuaW5nIGFuIGFycmF5IG9mIGJsdWVwcmludCBhZGRvbnMgZm9yIGNvbWJpbmF0aW9uIG9mIEFXUyBuYXRpdmUgYW5kIFxuICAgICAqIEFXUyBtYW5hZ2VkIG9wZW4gc291cmNlIHNlcnZpY2VzXG4gICAgICovXG4gICAgcHVibGljIGVuYWJsZU1peGVkUGF0dGVybkFkZE9ucygpOiBPYnNlcnZhYmlsaXR5QnVpbGRlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZE9ucyhcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuQXdzTG9hZEJhbGFuY2VyQ29udHJvbGxlckFkZE9uKCksXG4gICAgICAgICAgICBuZXcgYWRkb25zLkNlcnRNYW5hZ2VyQWRkT24oKSxcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuQWRvdENvbGxlY3RvckFkZE9uKCksXG4gICAgICAgICAgICBuZXcgYWRkb25zLkNvcmVEbnNBZGRPbigpLFxuICAgICAgICAgICAgbmV3IGFkZG9ucy5LdWJlUHJveHlBZGRPbigpLFxuICAgICAgICAgICAgbmV3IGFkZG9ucy5LdWJlU3RhdGVNZXRyaWNzQWRkT24oKSxcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuTWV0cmljc1NlcnZlckFkZE9uKCksXG4gICAgICAgICAgICBuZXcgYWRkb25zLlByb21ldGhldXNOb2RlRXhwb3J0ZXJBZGRPbigpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBoZWxwcyB5b3UgcHJlcGFyZSBhIGJsdWVwcmludCBmb3Igc2V0dGluZyB1cCBvYnNlcnZhYmlsaXR5IFxuICAgICAqIHJldHVybmluZyBhbiBhcnJheSBvZiBibHVlcHJpbnQgYWRkb25zIGZvciBBV1MgbWFuYWdlZCBvcGVuIHNvdXJjZSBzZXJ2aWNlc1xuICAgICAqIEBwYXJhbSBhbXBBZGRPblByb3BzIEFtcEFkZG9uUHJvcHMuIFRoaXMgaXMgbWFuZGF0b3J5LlxuICAgICAqIEBwYXJhbSBrdWJlUHJveHlWZXJzaW9uIEt1YmVQcm94eSBWZXJzaW9uLiBUaGlzIGlzIG9wdGlvbmFsLlxuICAgICAqL1xuICAgIHB1YmxpYyBlbmFibGVPcGVuU291cmNlUGF0dGVybkFkZE9ucyhhbXBBZGRPblByb3BzOiBhZGRvbnMuQW1wQWRkT25Qcm9wcywga3ViZVByb3h5VmVyc2lvbj86IHN0cmluZyk6IE9ic2VydmFiaWxpdHlCdWlsZGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkT25zKFxuICAgICAgICAgICAgbmV3IGFkZG9ucy5Bd3NMb2FkQmFsYW5jZXJDb250cm9sbGVyQWRkT24oKSxcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuQ2VydE1hbmFnZXJBZGRPbigpLFxuICAgICAgICAgICAgbmV3IGFkZG9ucy5BZG90Q29sbGVjdG9yQWRkT24oKSxcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuQW1wQWRkT24oYW1wQWRkT25Qcm9wcyksXG4gICAgICAgICAgICBuZXcgYWRkb25zLkNvcmVEbnNBZGRPbigpLFxuICAgICAgICAgICAgbmV3IGFkZG9ucy5FeHRlcm5hbHNTZWNyZXRzQWRkT24oKSxcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuR3JhZmFuYU9wZXJhdG9yQWRkb24oKSxcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuS3ViZVByb3h5QWRkT24oa3ViZVByb3h5VmVyc2lvbiksXG4gICAgICAgICAgICBuZXcgYWRkb25zLkt1YmVTdGF0ZU1ldHJpY3NBZGRPbigpLFxuICAgICAgICAgICAgbmV3IGFkZG9ucy5NZXRyaWNzU2VydmVyQWRkT24oKSxcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuUHJvbWV0aGV1c05vZGVFeHBvcnRlckFkZE9uKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGhlbHBzIHlvdSBwcmVwYXJlIGEgYmx1ZXByaW50IGZvciBzZXR0aW5nIHVwIG9ic2VydmFiaWxpdHkgd2l0aCBcbiAgICAgKiB1c2FnZSB0cmFja2luZyBhZGRvblxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYnVpbGRlcigpOiBPYnNlcnZhYmlsaXR5QnVpbGRlciB7XG4gICAgICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgT2JzZXJ2YWJpbGl0eUJ1aWxkZXIoKTtcbiAgICAgICAgYnVpbGRlci5hZGRPbnMoXG4gICAgICAgICAgICBuZXcgYWRkb25zLk5lc3RlZFN0YWNrQWRkT24oe1xuICAgICAgICAgICAgICAgIGlkOiBcInVzYWdlLXRyYWNraW5nLWFkZG9uXCIsXG4gICAgICAgICAgICAgICAgYnVpbGRlcjogVXNhZ2VUcmFja2luZ0FkZE9uLmJ1aWxkZXIoKSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfVxufVxuXG4vKipcbiAqIE5lc3RlZCBzdGFjayB0aGF0IGlzIHVzZWQgYXMgdHJhY2tlciBmb3IgT2JzZXJ2YWJpbGl0eSBBY2NlbGVyYXRvclxuICovXG5jbGFzcyBVc2FnZVRyYWNraW5nQWRkT24gZXh0ZW5kcyBOZXN0ZWRTdGFjayB7XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgVVNBR0VfSUQgPSBcInFzLTF1OWwxMmdqN1wiO1xuXG4gICAgcHVibGljIHN0YXRpYyBidWlsZGVyKCk6IHNwaS5OZXN0ZWRTdGFja0J1aWxkZXIge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYnVpbGQoc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IE5lc3RlZFN0YWNrUHJvcHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVzYWdlVHJhY2tpbmdBZGRPbihzY29wZSwgaWQsIHByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTmVzdGVkU3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHV0aWxzLndpdGhVc2FnZVRyYWNraW5nKFVzYWdlVHJhY2tpbmdBZGRPbi5VU0FHRV9JRCwgcHJvcHMpKTtcbiAgICB9XG59XG4iXX0=