"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowsBuilder = void 0;
const stacks_1 = require("../stacks");
const addons = require("../addons");
const utils = require("../utils");
const clusterproviders = require("../cluster-providers");
const resourceproviders = require("../resource-providers");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const eks = require("aws-cdk-lib/aws-eks");
const ec2 = require("aws-cdk-lib/aws-ec2");
const iam = require("aws-cdk-lib/aws-iam");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const ts_deepmerge_1 = require("ts-deepmerge");
/**
 * Default props to be used when creating the non-windows and windows nodes
 * for Windows EKS cluster
 */
const defaultOptions = {
    kubernetesVersion: eks.KubernetesVersion.of("1.27"),
    instanceClass: ec2.InstanceClass.M5,
    instanceSize: ec2.InstanceSize.XLARGE4,
    nodeRole: resourceproviders.getNamedResource("node-role"),
    windowsAmiType: aws_eks_1.NodegroupAmiType.WINDOWS_FULL_2022_X86_64,
    desiredNodeSize: 2,
    minNodeSize: 2,
    maxNodeSize: 3,
    blockDeviceSize: 50,
    noScheduleForWindowsNodes: true,
    clusterProviderTags: {
        "Name": "blueprints-windows-eks-cluster",
        "Type": "generic-windows-cluster"
    },
    genericNodeGroupTags: {
        "Name": "Mng-linux",
        "Type": "Managed-linux-Node-Group",
        "LaunchTemplate": "Linux-Launch-Template",
    },
    windowsNodeGroupTags: {
        "Name": "Managed-Node-Group",
        "Type": "Windows-Node-Group",
        "LaunchTemplate": "WindowsLT",
        "kubernetes.io/cluster/windows-eks-blueprint": "owned"
    }
};
/**
 * This builder class helps you prepare a blueprint for setting up
 * windows nodes with EKS cluster. The `WindowsBuilder` creates the following:
 * 1. An EKS Cluster` with passed k8s version and cluster tags.
 * 2. A non-windows nodegroup for standard software.
 * 3. A windows nodegroup to schedule windows workloads
 */
class WindowsBuilder extends stacks_1.BlueprintBuilder {
    /**
     * This method helps you prepare a blueprint for setting up windows nodes with
     * usage tracking addon
     */
    static builder(options) {
        const builder = new WindowsBuilder();
        const mergedOptions = (0, ts_deepmerge_1.default)(defaultOptions, options);
        builder
            .clusterProvider(new clusterproviders.GenericClusterProvider({
            version: mergedOptions.kubernetesVersion,
            tags: mergedOptions.clusterProviderTags,
            role: resourceproviders.getResource(context => {
                return new iam.Role(context.scope, 'ClusterRole', {
                    assumedBy: new iam.ServicePrincipal("eks.amazonaws.com"),
                    managedPolicies: [
                        iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEKSClusterPolicy"),
                        iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEKSVPCResourceController")
                    ]
                });
            }),
            managedNodeGroups: [
                addGenericNodeGroup(mergedOptions),
                addWindowsNodeGroup(mergedOptions)
            ]
        }))
            .addOns(new addons.NestedStackAddOn({
            id: "usage-tracking-addon",
            builder: UsageTrackingAddOn.builder(),
        }));
        return builder;
    }
}
exports.WindowsBuilder = WindowsBuilder;
/**
 * Nested stack that is used as tracker for Windows Accelerator
 */
class UsageTrackingAddOn extends aws_cdk_lib_1.NestedStack {
    static builder() {
        return {
            build(scope, id, props) {
                return new UsageTrackingAddOn(scope, id, props);
            }
        };
    }
    constructor(scope, id, props) {
        super(scope, id, utils.withUsageTracking(UsageTrackingAddOn.USAGE_ID, props));
    }
}
UsageTrackingAddOn.USAGE_ID = "qs-1ubotj5kl";
/**
 * This function adds a generic node group to the windows cluster.
 * @param: options: WindowsOptions
 * @returns: blueprints.ManagedNodeGroup
 */
function addGenericNodeGroup(options) {
    return {
        id: "mng-linux",
        amiType: aws_eks_1.NodegroupAmiType.AL2_X86_64,
        instanceTypes: [new ec2.InstanceType('m5.4xlarge')],
        desiredSize: options.desiredNodeSize,
        minSize: options.minNodeSize,
        maxSize: options.maxNodeSize,
        nodeRole: options.nodeRole,
        nodeGroupSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
        launchTemplate: {
            tags: options.genericNodeGroupTags,
            requireImdsv2: false
        }
    };
}
/**
 * This function adds a windows node group to the windows cluster.
 * @param options: WindowsOptions
 * @returns: blueprints.ManagedNodeGroup
 */
function addWindowsNodeGroup(options) {
    const result = {
        id: "mng-windows",
        amiType: options.windowsAmiType,
        instanceTypes: [new ec2.InstanceType(`${options.instanceClass}.${options.instanceSize}`)],
        desiredSize: options.desiredNodeSize,
        minSize: options.minNodeSize,
        maxSize: options.maxNodeSize,
        nodeRole: options.nodeRole,
        nodeGroupSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
        diskSize: options.blockDeviceSize,
        tags: options.windowsNodeGroupTags
    };
    if (options.noScheduleForWindowsNodes) {
        utils.setPath(result, "taints", [
            {
                key: "os",
                value: "windows",
                effect: eks.TaintEffect.NO_SCHEDULE
            }
        ]);
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,