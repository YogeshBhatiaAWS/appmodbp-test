"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResource = exports.getNamedResource = void 0;
const proxy_utils_1 = require("../utils/proxy-utils");
const uuid_1 = require("uuid");
/**
 * Creates a proxy to the named resource provider. This proxy will resolve to the type of the
 * resource provider under the provided name.
 * It enables getting references to resources outside of the Stack construct and using them with the blueprint:
 * @example
 * const app = new cdk.App();
 * const adminRole: iam.IRole = blueprints.getNamedResource("my-admin-role""); // note, there is no stack class here
 *
 * const clusterProvider = new blueprints.GenericClusterProvider({
     mastersRole: adminRole,
     ... other props
 * });
 * @param resourceName
 * @returns
 */
function getNamedResource(resourceName) {
    return new Proxy({}, new proxy_utils_1.DummyProxy((resourceContext) => {
        return resourceContext.get(resourceName);
    }));
}
exports.getNamedResource = getNamedResource;
/**
 * Creates a proxy to an anonymous resource. This function allows passing the provider function as input.
 * It enables creating ad-hoc references outside of the Stack construct and using them with the blueprint.
 * Designed for cases when resource is defined once and needed in a single place.
 * @example
 * const app = new cdk.App();
 * const clusterProvider = new blueprints.GenericClusterProvider({
 *   mastersRole: blueprints.getResource(context => { // will generate a unique name for resource.
        return new iam.Role(context.scope, 'AdminRole', { assumedBy: new AccountRootPrincipal()});
    }),
    ... other props
});
 * @param resourceName
 * @returns
 */
function getResource(fn) {
    const uid = (0, uuid_1.v4)();
    return new Proxy({}, new proxy_utils_1.DummyProxy((resourceContext) => {
        let result = resourceContext.get(uid);
        if (result == null) {
            resourceContext.add(uid, {
                provide(context) {
                    return fn(context);
                }
            });
            result = resourceContext.get(uid);
        }
        return result;
    }));
}
exports.getResource = getResource;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcmVzb3VyY2UtcHJvdmlkZXJzL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHNEQUFrRDtBQUVsRCwrQkFBa0M7QUFHbEM7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFDSCxTQUFnQixnQkFBZ0IsQ0FBb0MsWUFBcUI7SUFDckYsT0FBTyxJQUFJLEtBQUssQ0FBQyxFQUFPLEVBQUUsSUFBSSx3QkFBVSxDQUFDLENBQUMsZUFBZ0MsRUFBRSxFQUFFO1FBQzFFLE9BQU8sZUFBZSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQU0sQ0FBQztJQUNsRCxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1IsQ0FBQztBQUpELDRDQUlDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFDSCxTQUFnQixXQUFXLENBQWtDLEVBQW1DO0lBQzVGLE1BQU0sR0FBRyxHQUFHLElBQUEsU0FBSSxHQUFFLENBQUM7SUFDbkIsT0FBTyxJQUFJLEtBQUssQ0FBQyxFQUFPLEVBQUUsSUFBSSx3QkFBVSxDQUFDLENBQUMsZUFBZ0MsRUFBRSxFQUFFO1FBQzFFLElBQUksTUFBTSxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsSUFBRyxNQUFNLElBQUksSUFBSSxFQUFFO1lBQ2YsZUFBZSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3JCLE9BQU8sQ0FBQyxPQUF3QjtvQkFDNUIsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3ZCLENBQUM7YUFDSixDQUFDLENBQUM7WUFDSCxNQUFNLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQU0sQ0FBQztTQUMxQztRQUNELE9BQU8sTUFBVyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDUixDQUFDO0FBZEQsa0NBY0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUmVzb3VyY2UgfSBmcm9tICdhd3MtY2RrLWxpYi9jb3JlJztcbmltcG9ydCB7IER1bW15UHJveHkgfSBmcm9tICcuLi91dGlscy9wcm94eS11dGlscyc7XG5pbXBvcnQgeyBSZXNvdXJjZUNvbnRleHQgfSBmcm9tICcuLi9zcGknO1xuaW1wb3J0IHsgdjQgYXMgdXVpZCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHsgSUNvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBwcm94eSB0byB0aGUgbmFtZWQgcmVzb3VyY2UgcHJvdmlkZXIuIFRoaXMgcHJveHkgd2lsbCByZXNvbHZlIHRvIHRoZSB0eXBlIG9mIHRoZSBcbiAqIHJlc291cmNlIHByb3ZpZGVyIHVuZGVyIHRoZSBwcm92aWRlZCBuYW1lLiBcbiAqIEl0IGVuYWJsZXMgZ2V0dGluZyByZWZlcmVuY2VzIHRvIHJlc291cmNlcyBvdXRzaWRlIG9mIHRoZSBTdGFjayBjb25zdHJ1Y3QgYW5kIHVzaW5nIHRoZW0gd2l0aCB0aGUgYmx1ZXByaW50OlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG4gKiBjb25zdCBhZG1pblJvbGU6IGlhbS5JUm9sZSA9IGJsdWVwcmludHMuZ2V0TmFtZWRSZXNvdXJjZShcIm15LWFkbWluLXJvbGVcIlwiKTsgLy8gbm90ZSwgdGhlcmUgaXMgbm8gc3RhY2sgY2xhc3MgaGVyZVxuICogXG4gKiBjb25zdCBjbHVzdGVyUHJvdmlkZXIgPSBuZXcgYmx1ZXByaW50cy5HZW5lcmljQ2x1c3RlclByb3ZpZGVyKHtcbiAgICAgbWFzdGVyc1JvbGU6IGFkbWluUm9sZSxcbiAgICAgLi4uIG90aGVyIHByb3BzXG4gKiB9KTtcbiAqIEBwYXJhbSByZXNvdXJjZU5hbWUgXG4gKiBAcmV0dXJucyBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWVkUmVzb3VyY2U8VCBleHRlbmRzIElDb25zdHJ1Y3QgPSBJQ29uc3RydWN0PihyZXNvdXJjZU5hbWUgOiBzdHJpbmcpIDogVCB7XG4gICAgcmV0dXJuIG5ldyBQcm94eSh7fSBhcyBULCBuZXcgRHVtbXlQcm94eSgocmVzb3VyY2VDb250ZXh0OiBSZXNvdXJjZUNvbnRleHQpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc291cmNlQ29udGV4dC5nZXQocmVzb3VyY2VOYW1lKSBhcyBUO1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgcHJveHkgdG8gYW4gYW5vbnltb3VzIHJlc291cmNlLiBUaGlzIGZ1bmN0aW9uIGFsbG93cyBwYXNzaW5nIHRoZSBwcm92aWRlciBmdW5jdGlvbiBhcyBpbnB1dC4gIFxuICogSXQgZW5hYmxlcyBjcmVhdGluZyBhZC1ob2MgcmVmZXJlbmNlcyBvdXRzaWRlIG9mIHRoZSBTdGFjayBjb25zdHJ1Y3QgYW5kIHVzaW5nIHRoZW0gd2l0aCB0aGUgYmx1ZXByaW50LlxuICogRGVzaWduZWQgZm9yIGNhc2VzIHdoZW4gcmVzb3VyY2UgaXMgZGVmaW5lZCBvbmNlIGFuZCBuZWVkZWQgaW4gYSBzaW5nbGUgcGxhY2UuXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbiAqIGNvbnN0IGNsdXN0ZXJQcm92aWRlciA9IG5ldyBibHVlcHJpbnRzLkdlbmVyaWNDbHVzdGVyUHJvdmlkZXIoe1xuICogICBtYXN0ZXJzUm9sZTogYmx1ZXByaW50cy5nZXRSZXNvdXJjZShjb250ZXh0ID0+IHsgLy8gd2lsbCBnZW5lcmF0ZSBhIHVuaXF1ZSBuYW1lIGZvciByZXNvdXJjZS4gXG4gICAgICAgIHJldHVybiBuZXcgaWFtLlJvbGUoY29udGV4dC5zY29wZSwgJ0FkbWluUm9sZScsIHsgYXNzdW1lZEJ5OiBuZXcgQWNjb3VudFJvb3RQcmluY2lwYWwoKX0pO1xuICAgIH0pLFxuICAgIC4uLiBvdGhlciBwcm9wc1xufSk7XG4gKiBAcGFyYW0gcmVzb3VyY2VOYW1lIFxuICogQHJldHVybnMgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZXNvdXJjZTxUIGV4dGVuZHMgSVJlc291cmNlID0gSVJlc291cmNlPihmbjogKGNvbnRleHQ6IFJlc291cmNlQ29udGV4dCkgPT4gVCkgOiBUIHtcbiAgICBjb25zdCB1aWQgPSB1dWlkKCk7XG4gICAgcmV0dXJuIG5ldyBQcm94eSh7fSBhcyBULCBuZXcgRHVtbXlQcm94eSgocmVzb3VyY2VDb250ZXh0OiBSZXNvdXJjZUNvbnRleHQpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHJlc291cmNlQ29udGV4dC5nZXQodWlkKTtcbiAgICAgICAgaWYocmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJlc291cmNlQ29udGV4dC5hZGQodWlkLCB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZShjb250ZXh0OiBSZXNvdXJjZUNvbnRleHQpIDogVCB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmbihjb250ZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc291cmNlQ29udGV4dC5nZXQodWlkKSBhcyBUO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQgYXMgVDtcbiAgICB9KSk7XG59XG4iXX0=