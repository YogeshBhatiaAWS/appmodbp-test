"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LookupEfsFileSystemProvider = exports.CreateEfsFileSystemProvider = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const efs = require("aws-cdk-lib/aws-efs");
const spi_1 = require("../spi");
/**
 * EFS resource provider.
 *
 * @param name The name of the EFS file system to create.
 * @param efsProps The props used for the file system.
 */
class CreateEfsFileSystemProvider {
    constructor(options) {
        this.options = options;
    }
    provide(context) {
        var _a;
        const id = context.scope.node.id;
        const securityGroupId = `${id}-${(_a = this.options.name) !== null && _a !== void 0 ? _a : "default"}-EfsSecurityGroup`;
        let efsFileSystem;
        const vpc = context.get(spi_1.GlobalResources.Vpc);
        if (vpc === undefined) {
            throw new Error("VPC not found in context");
        }
        const clusterVpcCidr = vpc.vpcCidrBlock;
        let kmsKey;
        if (this.options.kmsKeyResourceName) {
            kmsKey = context.get(this.options.kmsKeyResourceName);
        }
        const efsSG = new ec2.SecurityGroup(context.scope, securityGroupId, {
            vpc,
            securityGroupName: securityGroupId,
        });
        efsSG.addIngressRule(ec2.Peer.ipv4(clusterVpcCidr), new ec2.Port({
            protocol: ec2.Protocol.TCP,
            stringRepresentation: "EFSconnection",
            toPort: 2049,
            fromPort: 2049,
        }));
        efsFileSystem = new efs.FileSystem(context.scope, this.options.name || `${id}-EfsFileSystem`, {
            vpc,
            securityGroup: efsSG,
            kmsKey,
            ...this.options.efsProps,
        });
        new aws_cdk_lib_1.CfnOutput(context.scope, "EfsFileSystemId", {
            value: efsFileSystem.fileSystemId,
        });
        return efsFileSystem;
    }
}
exports.CreateEfsFileSystemProvider = CreateEfsFileSystemProvider;
/**
 * Pass an EFS file system name and id to lookup an existing EFS file system.
 * @param name The name of the EFS file system to lookup an existing EFS file system.
 * @param fileSystemId The id of the EFS file system to lookup an existing EFS file system.
 */
class LookupEfsFileSystemProvider {
    constructor(options) {
        this.options = options;
    }
    provide(context) {
        var _a;
        const id = context.scope.node.id;
        const securityGroupId = `${id}-${(_a = this.options.name) !== null && _a !== void 0 ? _a : "default"}-EfsSecurityGroup`;
        let efsFileSystem;
        const securityGroup = ec2.SecurityGroup.fromSecurityGroupId(context.scope, securityGroupId, securityGroupId);
        efsFileSystem = efs.FileSystem.fromFileSystemAttributes(context.scope, this.options.name, {
            securityGroup: securityGroup,
            fileSystemId: this.options.fileSystemId,
        });
        new aws_cdk_lib_1.CfnOutput(context.scope, "EfsFileSystemId", {
            value: efsFileSystem.fileSystemId,
        });
        return efsFileSystem;
    }
}
exports.LookupEfsFileSystemProvider = LookupEfsFileSystemProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3Jlc291cmNlLXByb3ZpZGVycy9lZnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQXdDO0FBQ3hDLDJDQUEyQztBQUMzQywyQ0FBMkM7QUFFM0MsZ0NBQTRFO0FBYTVFOzs7OztHQUtHO0FBQ0gsTUFBYSwyQkFBMkI7SUFLdEMsWUFBWSxPQUFpQztRQUMzQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRUQsT0FBTyxDQUFDLE9BQXdCOztRQUM5QixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDakMsTUFBTSxlQUFlLEdBQUcsR0FBRyxFQUFFLElBQzNCLE1BQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLG1DQUFJLFNBQ3ZCLG1CQUFtQixDQUFDO1FBQ3BCLElBQUksYUFBMEMsQ0FBQztRQUMvQyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFlLENBQUMsR0FBRyxDQUFhLENBQUM7UUFDekQsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztTQUM3QztRQUNELE1BQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUM7UUFDeEMsSUFBSSxNQUE0QixDQUFDO1FBQ2pDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRTtZQUNuQyxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFhLENBQUM7U0FDbkU7UUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUU7WUFDbEUsR0FBRztZQUNILGlCQUFpQixFQUFFLGVBQWU7U0FDbkMsQ0FBQyxDQUFDO1FBQ0gsS0FBSyxDQUFDLGNBQWMsQ0FDbEIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQzdCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztZQUNYLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUc7WUFDMUIsb0JBQW9CLEVBQUUsZUFBZTtZQUNyQyxNQUFNLEVBQUUsSUFBSTtZQUNaLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQyxDQUNILENBQUM7UUFFRixhQUFhLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUNoQyxPQUFPLENBQUMsS0FBSyxFQUNiLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLEdBQUcsRUFBRSxnQkFBZ0IsRUFDMUM7WUFDRSxHQUFHO1lBQ0gsYUFBYSxFQUFFLEtBQUs7WUFDcEIsTUFBTTtZQUNOLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRO1NBQ3pCLENBQ0YsQ0FBQztRQUNGLElBQUksdUJBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFO1lBQzlDLEtBQUssRUFBRSxhQUFhLENBQUMsWUFBWTtTQUNsQyxDQUFDLENBQUM7UUFDSCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUF0REQsa0VBc0RDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQWEsMkJBQTJCO0lBS3RDLFlBQVksT0FBaUM7UUFDM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUF3Qjs7UUFDOUIsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2pDLE1BQU0sZUFBZSxHQUFHLEdBQUcsRUFBRSxJQUMzQixNQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxtQ0FBSSxTQUN2QixtQkFBbUIsQ0FBQztRQUNwQixJQUFJLGFBQTBDLENBQUM7UUFFL0MsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FDekQsT0FBTyxDQUFDLEtBQUssRUFDYixlQUFlLEVBQ2YsZUFBZSxDQUNoQixDQUFDO1FBQ0YsYUFBYSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsd0JBQXdCLENBQ3JELE9BQU8sQ0FBQyxLQUFLLEVBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQ2pCO1lBQ0UsYUFBYSxFQUFFLGFBQWE7WUFDNUIsWUFBWSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWTtTQUN4QyxDQUNGLENBQUM7UUFFRixJQUFJLHVCQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtZQUM5QyxLQUFLLEVBQUUsYUFBYSxDQUFDLFlBQVk7U0FDbEMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztDQUNGO0FBbkNELGtFQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENmbk91dHB1dCB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWMyXCI7XG5pbXBvcnQgKiBhcyBlZnMgZnJvbSBcImF3cy1jZGstbGliL2F3cy1lZnNcIjtcbmltcG9ydCAqIGFzIGttcyBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWttc1wiO1xuaW1wb3J0IHsgR2xvYmFsUmVzb3VyY2VzLCBSZXNvdXJjZUNvbnRleHQsIFJlc291cmNlUHJvdmlkZXIgfSBmcm9tIFwiLi4vc3BpXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlRWZzRmlsZVN5c3RlbVByb3BzIHtcbiAgcmVhZG9ubHkgbmFtZT86IHN0cmluZztcbiAgcmVhZG9ubHkgZWZzUHJvcHM/OiBPbWl0PGVmcy5GaWxlU3lzdGVtUHJvcHMsIFwidnBjXCIgfCBcImttc0tleVwiPjtcbiAgcmVhZG9ubHkga21zS2V5UmVzb3VyY2VOYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvb2t1cEVmc0ZpbGVTeXN0ZW1Qcm9wcyB7XG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgZmlsZVN5c3RlbUlkOiBzdHJpbmc7XG59XG5cbi8qKlxuICogRUZTIHJlc291cmNlIHByb3ZpZGVyLlxuICpcbiAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBFRlMgZmlsZSBzeXN0ZW0gdG8gY3JlYXRlLlxuICogQHBhcmFtIGVmc1Byb3BzIFRoZSBwcm9wcyB1c2VkIGZvciB0aGUgZmlsZSBzeXN0ZW0uXG4gKi9cbmV4cG9ydCBjbGFzcyBDcmVhdGVFZnNGaWxlU3lzdGVtUHJvdmlkZXJcbiAgaW1wbGVtZW50cyBSZXNvdXJjZVByb3ZpZGVyPGVmcy5JRmlsZVN5c3RlbT5cbntcbiAgcmVhZG9ubHkgb3B0aW9uczogQ3JlYXRlRWZzRmlsZVN5c3RlbVByb3BzO1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IENyZWF0ZUVmc0ZpbGVTeXN0ZW1Qcm9wcykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICBwcm92aWRlKGNvbnRleHQ6IFJlc291cmNlQ29udGV4dCk6IGVmcy5JRmlsZVN5c3RlbSB7XG4gICAgY29uc3QgaWQgPSBjb250ZXh0LnNjb3BlLm5vZGUuaWQ7XG4gICAgY29uc3Qgc2VjdXJpdHlHcm91cElkID0gYCR7aWR9LSR7XG4gICAgICB0aGlzLm9wdGlvbnMubmFtZSA/PyBcImRlZmF1bHRcIlxuICAgIH0tRWZzU2VjdXJpdHlHcm91cGA7XG4gICAgbGV0IGVmc0ZpbGVTeXN0ZW06IGVmcy5JRmlsZVN5c3RlbSB8IHVuZGVmaW5lZDtcbiAgICBjb25zdCB2cGMgPSBjb250ZXh0LmdldChHbG9iYWxSZXNvdXJjZXMuVnBjKSBhcyBlYzIuSVZwYztcbiAgICBpZiAodnBjID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlZQQyBub3QgZm91bmQgaW4gY29udGV4dFwiKTtcbiAgICB9XG4gICAgY29uc3QgY2x1c3RlclZwY0NpZHIgPSB2cGMudnBjQ2lkckJsb2NrO1xuICAgIGxldCBrbXNLZXk6IGttcy5JS2V5IHwgdW5kZWZpbmVkO1xuICAgIGlmICh0aGlzLm9wdGlvbnMua21zS2V5UmVzb3VyY2VOYW1lKSB7XG4gICAgICBrbXNLZXkgPSBjb250ZXh0LmdldCh0aGlzLm9wdGlvbnMua21zS2V5UmVzb3VyY2VOYW1lKSBhcyBrbXMuSUtleTtcbiAgICB9XG5cbiAgICBjb25zdCBlZnNTRyA9IG5ldyBlYzIuU2VjdXJpdHlHcm91cChjb250ZXh0LnNjb3BlLCBzZWN1cml0eUdyb3VwSWQsIHtcbiAgICAgIHZwYyxcbiAgICAgIHNlY3VyaXR5R3JvdXBOYW1lOiBzZWN1cml0eUdyb3VwSWQsXG4gICAgfSk7XG4gICAgZWZzU0cuYWRkSW5ncmVzc1J1bGUoXG4gICAgICBlYzIuUGVlci5pcHY0KGNsdXN0ZXJWcGNDaWRyKSxcbiAgICAgIG5ldyBlYzIuUG9ydCh7XG4gICAgICAgIHByb3RvY29sOiBlYzIuUHJvdG9jb2wuVENQLFxuICAgICAgICBzdHJpbmdSZXByZXNlbnRhdGlvbjogXCJFRlNjb25uZWN0aW9uXCIsXG4gICAgICAgIHRvUG9ydDogMjA0OSxcbiAgICAgICAgZnJvbVBvcnQ6IDIwNDksXG4gICAgICB9KVxuICAgICk7XG5cbiAgICBlZnNGaWxlU3lzdGVtID0gbmV3IGVmcy5GaWxlU3lzdGVtKFxuICAgICAgY29udGV4dC5zY29wZSxcbiAgICAgIHRoaXMub3B0aW9ucy5uYW1lIHx8IGAke2lkfS1FZnNGaWxlU3lzdGVtYCxcbiAgICAgIHtcbiAgICAgICAgdnBjLFxuICAgICAgICBzZWN1cml0eUdyb3VwOiBlZnNTRyxcbiAgICAgICAga21zS2V5LFxuICAgICAgICAuLi50aGlzLm9wdGlvbnMuZWZzUHJvcHMsXG4gICAgICB9XG4gICAgKTtcbiAgICBuZXcgQ2ZuT3V0cHV0KGNvbnRleHQuc2NvcGUsIFwiRWZzRmlsZVN5c3RlbUlkXCIsIHtcbiAgICAgIHZhbHVlOiBlZnNGaWxlU3lzdGVtLmZpbGVTeXN0ZW1JZCxcbiAgICB9KTtcbiAgICByZXR1cm4gZWZzRmlsZVN5c3RlbTtcbiAgfVxufVxuXG4vKipcbiAqIFBhc3MgYW4gRUZTIGZpbGUgc3lzdGVtIG5hbWUgYW5kIGlkIHRvIGxvb2t1cCBhbiBleGlzdGluZyBFRlMgZmlsZSBzeXN0ZW0uXG4gKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgRUZTIGZpbGUgc3lzdGVtIHRvIGxvb2t1cCBhbiBleGlzdGluZyBFRlMgZmlsZSBzeXN0ZW0uXG4gKiBAcGFyYW0gZmlsZVN5c3RlbUlkIFRoZSBpZCBvZiB0aGUgRUZTIGZpbGUgc3lzdGVtIHRvIGxvb2t1cCBhbiBleGlzdGluZyBFRlMgZmlsZSBzeXN0ZW0uXG4gKi9cbmV4cG9ydCBjbGFzcyBMb29rdXBFZnNGaWxlU3lzdGVtUHJvdmlkZXJcbiAgaW1wbGVtZW50cyBSZXNvdXJjZVByb3ZpZGVyPGVmcy5JRmlsZVN5c3RlbT5cbntcbiAgcmVhZG9ubHkgb3B0aW9uczogTG9va3VwRWZzRmlsZVN5c3RlbVByb3BzO1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IExvb2t1cEVmc0ZpbGVTeXN0ZW1Qcm9wcykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICBwcm92aWRlKGNvbnRleHQ6IFJlc291cmNlQ29udGV4dCk6IGVmcy5JRmlsZVN5c3RlbSB7XG4gICAgY29uc3QgaWQgPSBjb250ZXh0LnNjb3BlLm5vZGUuaWQ7XG4gICAgY29uc3Qgc2VjdXJpdHlHcm91cElkID0gYCR7aWR9LSR7XG4gICAgICB0aGlzLm9wdGlvbnMubmFtZSA/PyBcImRlZmF1bHRcIlxuICAgIH0tRWZzU2VjdXJpdHlHcm91cGA7XG4gICAgbGV0IGVmc0ZpbGVTeXN0ZW06IGVmcy5JRmlsZVN5c3RlbSB8IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IHNlY3VyaXR5R3JvdXAgPSBlYzIuU2VjdXJpdHlHcm91cC5mcm9tU2VjdXJpdHlHcm91cElkKFxuICAgICAgY29udGV4dC5zY29wZSxcbiAgICAgIHNlY3VyaXR5R3JvdXBJZCxcbiAgICAgIHNlY3VyaXR5R3JvdXBJZFxuICAgICk7XG4gICAgZWZzRmlsZVN5c3RlbSA9IGVmcy5GaWxlU3lzdGVtLmZyb21GaWxlU3lzdGVtQXR0cmlidXRlcyhcbiAgICAgIGNvbnRleHQuc2NvcGUsXG4gICAgICB0aGlzLm9wdGlvbnMubmFtZSxcbiAgICAgIHtcbiAgICAgICAgc2VjdXJpdHlHcm91cDogc2VjdXJpdHlHcm91cCxcbiAgICAgICAgZmlsZVN5c3RlbUlkOiB0aGlzLm9wdGlvbnMuZmlsZVN5c3RlbUlkLFxuICAgICAgfVxuICAgICk7XG5cbiAgICBuZXcgQ2ZuT3V0cHV0KGNvbnRleHQuc2NvcGUsIFwiRWZzRmlsZVN5c3RlbUlkXCIsIHtcbiAgICAgIHZhbHVlOiBlZnNGaWxlU3lzdGVtLmZpbGVTeXN0ZW1JZCxcbiAgICB9KTtcbiAgICByZXR1cm4gZWZzRmlsZVN5c3RlbTtcbiAgfVxufVxuIl19