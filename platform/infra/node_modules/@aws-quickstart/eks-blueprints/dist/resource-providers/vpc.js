"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LookupSubnetProvider = exports.DirectVpcProvider = exports.VpcProvider = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
/**
 * VPC resource provider
 */
class VpcProvider {
    constructor(vpcId, vpcProps) {
        this.vpcProps = vpcProps;
        this.vpcId = vpcId;
        this.primaryCidr = vpcProps === null || vpcProps === void 0 ? void 0 : vpcProps.primaryCidr;
        this.secondaryCidr = vpcProps === null || vpcProps === void 0 ? void 0 : vpcProps.secondaryCidr;
        this.secondarySubnetCidrs = vpcProps === null || vpcProps === void 0 ? void 0 : vpcProps.secondarySubnetCidrs;
    }
    provide(context) {
        const id = context.scope.node.id;
        let vpc = undefined;
        if (this.vpcId) {
            if (this.vpcId === "default") {
                console.log(`looking up completely default VPC`);
                vpc = ec2.Vpc.fromLookup(context.scope, id + "-vpc", { isDefault: true });
            }
            else {
                console.log(`looking up non-default ${this.vpcId} VPC`);
                vpc = ec2.Vpc.fromLookup(context.scope, id + "-vpc", { vpcId: this.vpcId });
            }
        }
        if (vpc == null) {
            // It will automatically divide the provided VPC CIDR range, and create public and private subnets per Availability Zone.
            // If VPC CIDR range is not provided, uses `10.0.0.0/16` as the range and creates public and private subnets per Availability Zone.
            // Network routing for the public subnets will be configured to allow outbound access directly via an Internet Gateway.
            // Network routing for the private subnets will be configured to allow outbound access via a set of resilient NAT Gateways (one per AZ).
            // Creates Secondary CIDR and Secondary subnets if passed.
            if (this.primaryCidr) {
                vpc = new ec2.Vpc(context.scope, id + "-vpc", {
                    ipAddresses: ec2.IpAddresses.cidr(this.primaryCidr)
                });
            }
            else {
                vpc = new ec2.Vpc(context.scope, id + "-vpc");
            }
        }
        if (this.secondaryCidr) {
            this.createSecondarySubnets(context, id, vpc);
        }
        return vpc;
    }
    createSecondarySubnets(context, id, vpc) {
        const secondarySubnets = [];
        const secondaryCidr = new ec2.CfnVPCCidrBlock(context.scope, id + "-secondaryCidr", {
            vpcId: vpc.vpcId,
            cidrBlock: this.secondaryCidr
        });
        secondaryCidr.node.addDependency(vpc);
        if (this.secondarySubnetCidrs) {
            for (let i = 0; i < vpc.availabilityZones.length; i++) {
                if (this.secondarySubnetCidrs[i]) {
                    secondarySubnets[i] = new ec2.PrivateSubnet(context.scope, id + "private-subnet-" + i, {
                        availabilityZone: vpc.availabilityZones[i],
                        cidrBlock: this.secondarySubnetCidrs[i],
                        vpcId: vpc.vpcId
                    });
                    secondarySubnets[i].node.addDependency(secondaryCidr);
                    context.add("secondary-cidr-subnet-" + i, {
                        provide(_context) { return secondarySubnets[i]; }
                    });
                }
            }
            for (let secondarySubnet of secondarySubnets) {
                aws_cdk_lib_1.Tags.of(secondarySubnet).add("kubernetes.io/role/internal-elb", "1", { applyToLaunchedInstances: true });
                aws_cdk_lib_1.Tags.of(secondarySubnet).add("Name", `blueprint-construct-dev-PrivateSubnet-${secondarySubnet}`, { applyToLaunchedInstances: true });
            }
        }
    }
}
exports.VpcProvider = VpcProvider;
class DirectVpcProvider {
    constructor(vpc) {
        this.vpc = vpc;
    }
    provide(_context) {
        return this.vpc;
    }
}
exports.DirectVpcProvider = DirectVpcProvider;
/**
 * Direct import secondary subnet provider, based on a known subnet ID.
 * Recommended method if secondary subnet id is known, as it avoids extra look-ups.
 */
class LookupSubnetProvider {
    constructor(subnetId) {
        this.subnetId = subnetId;
    }
    provide(context) {
        return ec2.Subnet.fromSubnetAttributes(context.scope, `${this.subnetId}-secondarysubnet`, { subnetId: this.subnetId });
    }
}
exports.LookupSubnetProvider = LookupSubnetProvider;
//# sourceMappingURL=data:application/json;base64,