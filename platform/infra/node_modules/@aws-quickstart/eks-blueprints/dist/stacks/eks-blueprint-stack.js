"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EksBlueprint = exports.BlueprintBuilder = exports.BlueprintPropsConstraints = exports.EksBlueprintProps = void 0;
const cdk = require("aws-cdk-lib");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const mng_cluster_provider_1 = require("../cluster-providers/mng-cluster-provider");
const vpc_1 = require("../resource-providers/vpc");
const spi = require("../spi");
const constraints = require("../utils/constraints-utils");
const utils = require("../utils");
const utils_1 = require("../utils");
const kms_key_1 = require("../resource-providers/kms-key");
const argo_gitops_factory_1 = require("../addons/argocd/argo-gitops-factory");
class EksBlueprintProps {
    constructor() {
        /**
         * Add-ons if any.
         */
        this.addOns = [];
        /**
         * Teams if any
         */
        this.teams = [];
        /**
         * EC2 or Fargate are supported in the blueprint but any implementation conforming the interface
         * will work
         */
        this.clusterProvider = new mng_cluster_provider_1.MngClusterProvider();
        /**
         * Named resource providers to leverage for cluster resources.
         * The resource can represent Vpc, Hosting Zones or other resources, see {@link spi.ResourceType}.
         * VPC for the cluster can be registered under the name of 'vpc' or as a single provider of type
         */
        this.resourceProviders = new Map();
        /**
         * If set to true and no resouce provider for KMS key is defined (under GlobalResources.KmsKey),
         * a default KMS encryption key will be used for envelope encryption of Kubernetes secrets (AWS managed new KMS key).
         * If set to false, and no resouce provider for KMS key is defined (under GlobalResources.KmsKey), then no secrets
         * encyrption is applied.
         *
         * Default is true.
         */
        this.useDefaultSecretEncryption = true;
    }
}
exports.EksBlueprintProps = EksBlueprintProps;
class BlueprintPropsConstraints {
    constructor() {
        /**
        * id can be no less than 1 character long, and no greater than 63 characters long.
        * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
        */
        this.id = new constraints.StringConstraint(1, 63);
        /**
        * name can be no less than 1 character long, and no greater than 63 characters long.
        * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
        */
        this.name = new constraints.StringConstraint(1, 63);
    }
}
exports.BlueprintPropsConstraints = BlueprintPropsConstraints;
/**
 * Blueprint builder implements a builder pattern that improves readability (no bloated constructors)
 * and allows creating a blueprint in an abstract state that can be applied to various instantiations
 * in accounts and regions.
 */
class BlueprintBuilder {
    constructor() {
        this.props = { addOns: new Array(), teams: new Array(), resourceProviders: new Map() };
        this.env = {
            account: process.env.CDK_DEFAULT_ACCOUNT,
            region: process.env.CDK_DEFAULT_REGION
        };
    }
    name(name) {
        this.props = { ...this.props, ...{ name } };
        return this;
    }
    account(account) {
        this.env.account = account;
        return this;
    }
    region(region) {
        this.env.region = region;
        return this;
    }
    version(version) {
        this.props = { ...this.props, ...{ version: version } };
        return this;
    }
    enableControlPlaneLogTypes(...types) {
        this.props = { ...this.props, ...{ enableControlPlaneLogTypes: types } };
        return this;
    }
    enableGitOps(mode) {
        this.props = { ...this.props, ...{ enableGitOpsMode: mode !== null && mode !== void 0 ? mode : spi.GitOpsMode.APP_OF_APPS } };
        return this;
    }
    withBlueprintProps(props) {
        const resourceProviders = this.props.resourceProviders;
        this.props = { ...this.props, ...(0, utils_1.cloneDeep)(props) };
        if (props.resourceProviders) {
            this.props.resourceProviders = new Map([...resourceProviders.entries(), ...props.resourceProviders.entries()]);
        }
        return this;
    }
    addOns(...addOns) {
        var _a;
        this.props = { ...this.props, ...{ addOns: (_a = this.props.addOns) === null || _a === void 0 ? void 0 : _a.concat(addOns) } };
        return this;
    }
    clusterProvider(clusterProvider) {
        this.props = { ...this.props, ...{ clusterProvider: clusterProvider } };
        return this;
    }
    id(id) {
        this.props = { ...this.props, ...{ id } };
        return this;
    }
    teams(...teams) {
        var _a;
        this.props = { ...this.props, ...{ teams: (_a = this.props.teams) === null || _a === void 0 ? void 0 : _a.concat(teams) } };
        return this;
    }
    resourceProvider(name, provider) {
        var _a;
        (_a = this.props.resourceProviders) === null || _a === void 0 ? void 0 : _a.set(name, provider);
        return this;
    }
    useDefaultSecretEncryption(useDefault) {
        this.props = { ...this.props, ...{ useDefaultSecretEncryption: useDefault } };
        return this;
    }
    clone(region, account) {
        return new BlueprintBuilder().withBlueprintProps(this.props)
            .account(account !== null && account !== void 0 ? account : this.env.account).region(region !== null && region !== void 0 ? region : this.env.region);
    }
    withEnv(env) {
        this.env.account = env.account;
        this.env.region = env.region;
        return this;
    }
    build(scope, id, stackProps) {
        return new EksBlueprint(scope, { ...this.props, ...{ id } }, { ...{ env: this.env }, ...stackProps });
    }
    async buildAsync(scope, id, stackProps) {
        return this.build(scope, id, stackProps).waitForAsyncTasks();
    }
}
exports.BlueprintBuilder = BlueprintBuilder;
/**
 * Entry point to the platform provisioning. Creates a CFN stack based on the provided configuration
 * and orchestrates provisioning of add-ons, teams and post deployment hooks.
 */
class EksBlueprint extends cdk.Stack {
    static builder() {
        return new BlueprintBuilder();
    }
    constructor(scope, blueprintProps, props) {
        var _a, _b, _c;
        super(scope, blueprintProps.id, utils.withUsageTracking(EksBlueprint.USAGE_ID, props));
        this.validateInput(blueprintProps);
        const resourceContext = this.provideNamedResources(blueprintProps);
        let vpcResource = resourceContext.get(spi.GlobalResources.Vpc);
        if (!vpcResource) {
            vpcResource = resourceContext.add(spi.GlobalResources.Vpc, new vpc_1.VpcProvider());
        }
        let version = blueprintProps.version;
        if (version == "auto") {
            version = aws_eks_1.KubernetesVersion.V1_27;
        }
        let kmsKeyResource = resourceContext.get(spi.GlobalResources.KmsKey);
        if (!kmsKeyResource && blueprintProps.useDefaultSecretEncryption != false) {
            kmsKeyResource = resourceContext.add(spi.GlobalResources.KmsKey, new kms_key_1.CreateKmsKeyProvider());
        }
        blueprintProps = this.resolveDynamicProxies(blueprintProps, resourceContext);
        const clusterProvider = (_a = blueprintProps.clusterProvider) !== null && _a !== void 0 ? _a : new mng_cluster_provider_1.MngClusterProvider({
            id: `${(_b = blueprintProps.name) !== null && _b !== void 0 ? _b : blueprintProps.id}-ng`,
            version
        });
        this.clusterInfo = clusterProvider.createCluster(this, vpcResource, kmsKeyResource, version);
        this.clusterInfo.setResourceContext(resourceContext);
        let enableLogTypes = blueprintProps.enableControlPlaneLogTypes;
        if (enableLogTypes) {
            utils.setupClusterLogging(this.clusterInfo.cluster.stack, this.clusterInfo.cluster, enableLogTypes);
        }
        if (blueprintProps.enableGitOpsMode == spi.GitOpsMode.APPLICATION) {
            argo_gitops_factory_1.ArgoGitOpsFactory.enableGitOps();
        }
        else if (blueprintProps.enableGitOpsMode == spi.GitOpsMode.APP_OF_APPS) {
            argo_gitops_factory_1.ArgoGitOpsFactory.enableGitOpsAppOfApps();
        }
        const postDeploymentSteps = Array();
        for (let addOn of ((_c = blueprintProps.addOns) !== null && _c !== void 0 ? _c : [])) { // must iterate in the strict order
            const result = addOn.deploy(this.clusterInfo);
            if (result) {
                const addOnKey = utils.getAddOnNameOrId(addOn);
                this.clusterInfo.addScheduledAddOn(addOnKey, result, utils.isOrderedAddOn(addOn));
            }
            const postDeploy = addOn;
            if (postDeploy.postDeploy !== undefined) {
                postDeploymentSteps.push(postDeploy);
            }
        }
        const scheduledAddOns = this.clusterInfo.getAllScheduledAddons();
        const addOnKeys = [...scheduledAddOns.keys()];
        const promises = scheduledAddOns.values();
        this.asyncTasks = Promise.all(promises).then((constructs) => {
            var _a;
            constructs.forEach((construct, index) => {
                this.clusterInfo.addProvisionedAddOn(addOnKeys[index], construct);
            });
            if (blueprintProps.teams != null) {
                for (let team of blueprintProps.teams) {
                    team.setup(this.clusterInfo);
                }
            }
            for (let step of postDeploymentSteps) {
                step.postDeploy(this.clusterInfo, (_a = blueprintProps.teams) !== null && _a !== void 0 ? _a : []);
            }
        });
        this.asyncTasks.catch(err => {
            console.error(err);
            throw new Error(err);
        });
    }
    /**
     * Since constructor cannot be marked as async, adding a separate method to wait
     * for async code to finish.
     * @returns Promise that resolves to the blueprint
     */
    async waitForAsyncTasks() {
        if (this.asyncTasks) {
            return this.asyncTasks.then(() => {
                return this;
            });
        }
        return Promise.resolve(this);
    }
    /**
     * This method returns all the constructs produced by during the cluster creation (e.g. add-ons).
     * May be used in testing for verification.
     * @returns cluster info object
     */
    getClusterInfo() {
        return this.clusterInfo;
    }
    provideNamedResources(blueprintProps) {
        var _a;
        const result = new spi.ResourceContext(this, blueprintProps);
        for (let [key, value] of (_a = blueprintProps.resourceProviders) !== null && _a !== void 0 ? _a : []) {
            result.add(key, value);
        }
        return result;
    }
    /**
     * Resolves all dynamic proxies, that substitutes resource provider proxies with the resolved values.
     * @param blueprintProps
     * @param resourceContext
     * @returns a copy of blueprint props with resolved values
     */
    resolveDynamicProxies(blueprintProps, resourceContext) {
        return utils.cloneDeep(blueprintProps, (value) => {
            return utils.resolveTarget(value, resourceContext);
        });
    }
    /**
     * Validates input against basic defined constraints.
     * @param blueprintProps
     */
    validateInput(blueprintProps) {
        const teamNames = new Set();
        constraints.validateConstraints(new BlueprintPropsConstraints, EksBlueprintProps.name, blueprintProps);
        if (blueprintProps.teams) {
            blueprintProps.teams.forEach(e => {
                if (teamNames.has(e.name)) {
                    throw new Error(`Team ${e.name} is registered more than once`);
                }
                teamNames.add(e.name);
            });
        }
    }
}
exports.EksBlueprint = EksBlueprint;
EksBlueprint.USAGE_ID = "qs-1s1r465hk";
//# sourceMappingURL=data:application/json;base64,