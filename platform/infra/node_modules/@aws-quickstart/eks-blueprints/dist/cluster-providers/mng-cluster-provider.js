"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertEC2NodeGroup = exports.MngClusterProvider = void 0;
const generic_cluster_provider_1 = require("./generic-cluster-provider");
/**
 * MngClusterProvider provisions an EKS cluster with a managed node group for managed capacity.
 */
class MngClusterProvider extends generic_cluster_provider_1.GenericClusterProvider {
    constructor(props) {
        var _a, _b;
        super({ ...generic_cluster_provider_1.defaultOptions, ...props, ...{
                managedNodeGroups: [{
                        ...props,
                        id: (_b = (_a = props === null || props === void 0 ? void 0 : props.id) !== null && _a !== void 0 ? _a : props === null || props === void 0 ? void 0 : props.clusterName) !== null && _b !== void 0 ? _b : "eks-blueprints-mng",
                        tags: props === null || props === void 0 ? void 0 : props.nodeGroupTags,
                    }]
            } });
    }
}
exports.MngClusterProvider = MngClusterProvider;
/**
 * Validates that cluster is backed by EC2 either through a managed node group or through a self-managed autoscaling group.
 * @param clusterInfo
 * @param source Used for error message to identify the source of the check
 * @returns
 */
//TODO: move to clusterInfo
function assertEC2NodeGroup(clusterInfo, source) {
    if (clusterInfo.nodeGroups != undefined && clusterInfo.nodeGroups.length > 0) {
        return clusterInfo.nodeGroups;
    }
    if (clusterInfo.autoscalingGroups != undefined && clusterInfo.autoscalingGroups.length > 0) {
        return clusterInfo.autoscalingGroups;
    }
    throw new Error(`${source} is supported with EKS EC2 only and is not supported for imported clusters`);
}
exports.assertEC2NodeGroup = assertEC2NodeGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW5nLWNsdXN0ZXItcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvY2x1c3Rlci1wcm92aWRlcnMvbW5nLWNsdXN0ZXItcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EseUVBQW9GO0FBMkNwRjs7R0FFRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsaURBQXNCO0lBRTFELFlBQVksS0FBK0I7O1FBQ3ZDLEtBQUssQ0FBQyxFQUFDLEdBQUcseUNBQWMsRUFBRSxHQUFHLEtBQUssRUFBRSxHQUFHO2dCQUNuQyxpQkFBaUIsRUFBRSxDQUFDO3dCQUNoQixHQUFHLEtBQThDO3dCQUNqRCxFQUFFLEVBQUUsTUFBQSxNQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxFQUFFLG1DQUFJLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxXQUFXLG1DQUFJLG9CQUFvQjt3QkFDM0QsSUFBSSxFQUFFLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxhQUFhO3FCQUM3QixDQUFDO2FBQ0wsRUFBQyxDQUFDLENBQUM7SUFDUixDQUFDO0NBQ0o7QUFYRCxnREFXQztBQUVEOzs7OztHQUtHO0FBQ0gsMkJBQTJCO0FBQzNCLFNBQWdCLGtCQUFrQixDQUFDLFdBQXdCLEVBQUUsTUFBYztJQUN2RSxJQUFHLFdBQVcsQ0FBQyxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN6RSxPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUM7S0FDakM7SUFDRCxJQUFHLFdBQVcsQ0FBQyxpQkFBaUIsSUFBSSxTQUFTLElBQUksV0FBVyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDdkYsT0FBTyxXQUFXLENBQUMsaUJBQWlCLENBQUM7S0FDeEM7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsTUFBTSw0RUFBNEUsQ0FBQyxDQUFDO0FBQzNHLENBQUM7QUFSRCxnREFRQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF3c19hdXRvc2NhbGluZyBhcyBhc2csIGF3c19la3MgYXMgZWtzIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG4vLyBDbHVzdGVyXG5pbXBvcnQgeyBDbHVzdGVySW5mbyB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgZGVmYXVsdE9wdGlvbnMsIEdlbmVyaWNDbHVzdGVyUHJvdmlkZXIgfSBmcm9tIFwiLi9nZW5lcmljLWNsdXN0ZXItcHJvdmlkZXJcIjtcbi8vIENvbnN0YW50cyBcbmltcG9ydCB7IE1hbmFnZWROb2RlR3JvdXAgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgY2x1c3RlciBwcm92aWRlci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNbmdDbHVzdGVyUHJvdmlkZXJQcm9wcyBleHRlbmRzIFBhcnRpYWw8ZWtzLkNvbW1vbkNsdXN0ZXJPcHRpb25zPiwgT21pdDxNYW5hZ2VkTm9kZUdyb3VwLCBcImlkXCI+IHtcbiAgICAvKipcbiAgICAqIFRoZSBuYW1lIGZvciB0aGUgY2x1c3Rlci5cbiAgICAqIEBkZXByZWNhdGVkIHVzZSAjY2x1c3Rlck5hbWVcbiAgICAqL1xuICAgIG5hbWU/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBJbiB0aGlzIGNhc2UgaWQgaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRwIHRoZSBjbHVzdGVyIG5hbWVcbiAgICAgKi9cbiAgICBpZD86IHN0cmluZyxcblxuICAgIC8qKlxuICAgICAqIElzIGl0IGEgcHJpdmF0ZSBvbmx5IEVLUyBDbHVzdGVyP1xuICAgICAqIERlZmF1bHRzIHRvIHByaXZhdGVfYW5kX3B1YmxpYyBjbHVzdGVyLCBzZXQgdG8gdHJ1ZSBmb3IgcHJpdmF0ZSBjbHVzdGVyXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBwcml2YXRlQ2x1c3Rlcj86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBUYWdzIGZvciB0aGUgQ2x1c3Rlci5cbiAgICAgKi9cbiAgICB0YWdzPzoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGFncyBmb3IgdGhlIG5vZGUgZ3JvdXAuXG4gICAgICovXG4gICAgbm9kZUdyb3VwVGFncz86IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH1cblxufVxuXG4vKipcbiAqIE1uZ0NsdXN0ZXJQcm92aWRlciBwcm92aXNpb25zIGFuIEVLUyBjbHVzdGVyIHdpdGggYSBtYW5hZ2VkIG5vZGUgZ3JvdXAgZm9yIG1hbmFnZWQgY2FwYWNpdHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBNbmdDbHVzdGVyUHJvdmlkZXIgZXh0ZW5kcyBHZW5lcmljQ2x1c3RlclByb3ZpZGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzPzogTW5nQ2x1c3RlclByb3ZpZGVyUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoey4uLmRlZmF1bHRPcHRpb25zLCAuLi5wcm9wcywgLi4ue1xuICAgICAgICAgICAgbWFuYWdlZE5vZGVHcm91cHM6IFt7XG4gICAgICAgICAgICAgICAgLi4ucHJvcHMgYXMgT21pdDxNYW5hZ2VkTm9kZUdyb3VwLCBcImlkXCIgfCBcInRhZ3NcIj4sXG4gICAgICAgICAgICAgICAgaWQ6IHByb3BzPy5pZCA/PyBwcm9wcz8uY2x1c3Rlck5hbWUgPz8gXCJla3MtYmx1ZXByaW50cy1tbmdcIixcbiAgICAgICAgICAgICAgICB0YWdzOiBwcm9wcz8ubm9kZUdyb3VwVGFncyxcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH19KTtcbiAgICB9XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoYXQgY2x1c3RlciBpcyBiYWNrZWQgYnkgRUMyIGVpdGhlciB0aHJvdWdoIGEgbWFuYWdlZCBub2RlIGdyb3VwIG9yIHRocm91Z2ggYSBzZWxmLW1hbmFnZWQgYXV0b3NjYWxpbmcgZ3JvdXAuXG4gKiBAcGFyYW0gY2x1c3RlckluZm8gXG4gKiBAcGFyYW0gc291cmNlIFVzZWQgZm9yIGVycm9yIG1lc3NhZ2UgdG8gaWRlbnRpZnkgdGhlIHNvdXJjZSBvZiB0aGUgY2hlY2tcbiAqIEByZXR1cm5zIFxuICovXG4vL1RPRE86IG1vdmUgdG8gY2x1c3RlckluZm9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRFQzJOb2RlR3JvdXAoY2x1c3RlckluZm86IENsdXN0ZXJJbmZvLCBzb3VyY2U6IHN0cmluZyk6IGVrcy5Ob2RlZ3JvdXBbXSB8IGFzZy5BdXRvU2NhbGluZ0dyb3VwW10ge1xuICAgIGlmKGNsdXN0ZXJJbmZvLm5vZGVHcm91cHMgIT0gdW5kZWZpbmVkICYmIGNsdXN0ZXJJbmZvLm5vZGVHcm91cHMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gY2x1c3RlckluZm8ubm9kZUdyb3VwcztcbiAgICB9XG4gICAgaWYoY2x1c3RlckluZm8uYXV0b3NjYWxpbmdHcm91cHMgIT0gdW5kZWZpbmVkICYmIGNsdXN0ZXJJbmZvLmF1dG9zY2FsaW5nR3JvdXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGNsdXN0ZXJJbmZvLmF1dG9zY2FsaW5nR3JvdXBzO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7c291cmNlfSBpcyBzdXBwb3J0ZWQgd2l0aCBFS1MgRUMyIG9ubHkgYW5kIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIGltcG9ydGVkIGNsdXN0ZXJzYCk7XG59XG4iXX0=