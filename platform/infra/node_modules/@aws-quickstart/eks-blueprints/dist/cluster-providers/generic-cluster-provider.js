"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericClusterProvider = exports.ClusterBuilder = exports.defaultOptions = exports.GenericClusterPropsConstraints = exports.FargateProfileConstraints = exports.AutoscalingNodeGroupConstraints = exports.ManagedNodeGroupConstraints = exports.selectKubectlLayer = exports.clusterBuilder = void 0;
const lambda_layer_kubectl_v23_1 = require("@aws-cdk/lambda-layer-kubectl-v23");
const lambda_layer_kubectl_v24_1 = require("@aws-cdk/lambda-layer-kubectl-v24");
const lambda_layer_kubectl_v25_1 = require("@aws-cdk/lambda-layer-kubectl-v25");
const lambda_layer_kubectl_v26_1 = require("@aws-cdk/lambda-layer-kubectl-v26");
const lambda_layer_kubectl_v27_1 = require("@aws-cdk/lambda-layer-kubectl-v27");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const autoscaling = require("aws-cdk-lib/aws-autoscaling");
const ec2 = require("aws-cdk-lib/aws-ec2");
const eks = require("aws-cdk-lib/aws-eks");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const spi_1 = require("../spi");
const utils = require("../utils");
const constants = require("./constants");
const assert = require("assert");
function clusterBuilder() {
    return new ClusterBuilder();
}
exports.clusterBuilder = clusterBuilder;
/**
 * Function that contains logic to map the correct kunbectl layer based on the passed in version.
 * @param scope in whch the kubectl layer must be created
 * @param version EKS version
 * @returns ILayerVersion or undefined
 */
function selectKubectlLayer(scope, version) {
    switch (version.version) {
        case "1.23":
            return new lambda_layer_kubectl_v23_1.KubectlV23Layer(scope, "kubectllayer23");
        case "1.24":
            return new lambda_layer_kubectl_v24_1.KubectlV24Layer(scope, "kubectllayer24");
        case "1.25":
            return new lambda_layer_kubectl_v25_1.KubectlV25Layer(scope, "kubectllayer25");
        case "1.26":
            return new lambda_layer_kubectl_v26_1.KubectlV26Layer(scope, "kubectllayer26");
        case "1.27":
            return new lambda_layer_kubectl_v27_1.KubectlV27Layer(scope, "kubectllayer27");
    }
    const minor = version.version.split('.')[1];
    if (minor && parseInt(minor, 10) > 27) {
        return new lambda_layer_kubectl_v27_1.KubectlV27Layer(scope, "kubectllayer27"); // for all versions above 1.27 use 1.27 kubectl (unless explicitly supported in CDK)
    }
    return undefined;
}
exports.selectKubectlLayer = selectKubectlLayer;
class ManagedNodeGroupConstraints {
    constructor() {
        /**
         * id can be no less than 1 character long, and no greater than 63 characters long due to DNS system limitations.
         * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
         */
        this.id = new utils.StringConstraint(1, 63);
        /**
        * nodes per node group has a soft limit of 450 nodes, and as little as 0. But we multiply that by a factor of 5 to 2250 in case
        * of situations of a hard limit request being accepted, and as a result the limit would be raised
        * https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html
        */
        this.minSize = new utils.NumberConstraint(0, 2250);
        /**
         * nodes per node group has a soft limit of 450 nodes, and as little as 0. But we multiply that by a factor of 5 to 2250 in case
         * of situations of a hard limit request being accepted, and as a result the limit would be raised
         * https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html
         */
        this.maxSize = new utils.NumberConstraint(0, 2250);
        /**
         * Nodes per node group has a soft limit of 450 nodes, and as little as 0. But we multiply that by a factor of 5 to 2250 in case
         * of situations of a hard limit request being accepted, and as a result the limit would be raised
         * https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html
         */
        this.desiredSize = new utils.NumberConstraint(0, 2250);
        /**
         * amiReleaseVersion can be no less than 1 character long, and no greater than 1024 characters long.
         * https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_Ami.html
         */
        this.amiReleaseVersion = new utils.StringConstraint(1, 1024);
    }
}
exports.ManagedNodeGroupConstraints = ManagedNodeGroupConstraints;
class AutoscalingNodeGroupConstraints {
    constructor() {
        /**
        * id can be no less than 1 character long, and no greater than 63 characters long due to DNS system limitations.
        * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
        */
        this.id = new utils.StringConstraint(1, 63);
        /**
        * Allowed range is 0 to 5000 inclusive.
        * https://kubernetes.io/docs/setup/best-practices/cluster-large/
        */
        this.minSize = new utils.NumberConstraint(0, 5000);
        /**
        * Allowed range is 0 to 5000 inclusive.
        * https://kubernetes.io/docs/setup/best-practices/cluster-large/
        */
        this.maxSize = new utils.NumberConstraint(0, 5000);
        /**
        * Allowed range is 0 to 5000 inclusive.
        * https://kubernetes.io/docs/setup/best-practices/cluster-large/
        */
        this.desiredSize = new utils.NumberConstraint(0, 5000);
    }
}
exports.AutoscalingNodeGroupConstraints = AutoscalingNodeGroupConstraints;
class FargateProfileConstraints {
    constructor() {
        /**
        * fargateProfileNames can be no less than 1 character long, and no greater than 63 characters long due to DNS system limitations.
        * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
        */
        this.fargateProfileName = new utils.StringConstraint(1, 63);
    }
}
exports.FargateProfileConstraints = FargateProfileConstraints;
class GenericClusterPropsConstraints {
    constructor() {
        /**
        * managedNodeGroups per cluster have a soft limit of 30 managed node groups per EKS cluster, and as little as 0. But we multiply that
        * by a factor of 5 to 150 in case of situations of a hard limit request being accepted, and as a result the limit would be raised.
        * https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html
        */
        this.managedNodeGroups = new utils.ArrayConstraint(0, 150);
        /**
        * autoscalingNodeGroups per cluster have a soft limit of 500 autoscaling node groups per EKS cluster, and as little as 0. But we multiply that
        * by a factor of 5 to 2500 in case of situations of a hard limit request being accepted, and as a result the limit would be raised.
        * https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html
        */
        this.autoscalingNodeGroups = new utils.ArrayConstraint(0, 5000);
    }
}
exports.GenericClusterPropsConstraints = GenericClusterPropsConstraints;
exports.defaultOptions = {
    version: eks.KubernetesVersion.V1_25
};
class ClusterBuilder {
    constructor() {
        this.props = {};
        this.privateCluster = false;
        this.managedNodeGroups = [];
        this.autoscalingNodeGroups = [];
        this.fargateProfiles = {};
        this.props = { ...this.props, ...{ version: eks.KubernetesVersion.V1_25 } };
    }
    withCommonOptions(options) {
        this.props = { ...this.props, ...options };
        return this;
    }
    managedNodeGroup(...nodeGroups) {
        this.managedNodeGroups = this.managedNodeGroups.concat(nodeGroups);
        return this;
    }
    autoscalingGroup(...nodeGroups) {
        this.autoscalingNodeGroups = this.autoscalingNodeGroups.concat(nodeGroups);
        return this;
    }
    fargateProfile(name, options) {
        this.fargateProfiles[name] = options;
        return this;
    }
    build() {
        return new GenericClusterProvider({
            ...this.props,
            version: this.props.version,
            privateCluster: this.privateCluster,
            managedNodeGroups: this.managedNodeGroups,
            autoscalingNodeGroups: this.autoscalingNodeGroups,
            fargateProfiles: this.fargateProfiles
        });
    }
}
exports.ClusterBuilder = ClusterBuilder;
/**
 * Cluster provider implementation that supports multiple node groups.
 */
class GenericClusterProvider {
    constructor(props) {
        this.props = props;
        this.validateInput(props);
        assert(!(props.managedNodeGroups && props.managedNodeGroups.length > 0
            && props.autoscalingNodeGroups && props.autoscalingNodeGroups.length > 0), "Mixing managed and autoscaling node groups is not supported. Please file a request on GitHub to add this support if needed.");
    }
    /**
     * @override
     */
    createCluster(scope, vpc, secretsEncryptionKey, kubernetesVersion) {
        var _a, _b, _c, _d, _e, _f, _g;
        const id = scope.node.id;
        // Props for the cluster.
        const clusterName = (_a = this.props.clusterName) !== null && _a !== void 0 ? _a : id;
        const outputClusterName = true;
        if (!kubernetesVersion && !this.props.version) {
            throw new Error("Version was not specified by cluster builder or in cluster provider props, must be specified in one of these");
        }
        const version = kubernetesVersion || this.props.version || eks.KubernetesVersion.V1_27;
        const privateCluster = (_b = this.props.privateCluster) !== null && _b !== void 0 ? _b : utils.valueFromContext(scope, constants.PRIVATE_CLUSTER, false);
        const endpointAccess = (privateCluster === true) ? eks.EndpointAccess.PRIVATE : eks.EndpointAccess.PUBLIC_AND_PRIVATE;
        const vpcSubnets = (_c = this.props.vpcSubnets) !== null && _c !== void 0 ? _c : (privateCluster === true ? [{ subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS }] : undefined);
        const mastersRole = (_d = this.props.mastersRole) !== null && _d !== void 0 ? _d : new aws_iam_1.Role(scope, `${clusterName}-AccessRole`, {
            assumedBy: new aws_iam_1.AccountRootPrincipal()
        });
        const kubectlLayer = this.getKubectlLayer(scope, version);
        const tags = this.props.tags;
        const defaultOptions = {
            vpc,
            secretsEncryptionKey,
            clusterName,
            outputClusterName,
            version,
            vpcSubnets,
            endpointAccess,
            kubectlLayer,
            tags,
            mastersRole,
            defaultCapacity: 0 // we want to manage capacity ourselves
        };
        const clusterOptions = { ...defaultOptions, ...this.props };
        // Create an EKS Cluster
        const cluster = this.internalCreateCluster(scope, id, clusterOptions);
        cluster.node.addDependency(vpc);
        const nodeGroups = [];
        (_e = this.props.managedNodeGroups) === null || _e === void 0 ? void 0 : _e.forEach(n => {
            const nodeGroup = this.addManagedNodeGroup(cluster, n);
            nodeGroups.push(nodeGroup);
        });
        const autoscalingGroups = [];
        (_f = this.props.autoscalingNodeGroups) === null || _f === void 0 ? void 0 : _f.forEach(n => {
            const autoscalingGroup = this.addAutoScalingGroup(cluster, n);
            autoscalingGroups.push(autoscalingGroup);
        });
        const fargateProfiles = Object.entries((_g = this.props.fargateProfiles) !== null && _g !== void 0 ? _g : {});
        const fargateConstructs = [];
        fargateProfiles === null || fargateProfiles === void 0 ? void 0 : fargateProfiles.forEach(([key, options]) => fargateConstructs.push(this.addFargateProfile(cluster, key, options)));
        return new spi_1.ClusterInfo(cluster, version, nodeGroups, autoscalingGroups, fargateConstructs);
    }
    /**
     * Template method that may be overridden by subclasses to create a specific cluster flavor (e.g. FargateCluster vs eks.Cluster)
     * @param scope
     * @param id
     * @param clusterOptions
     * @returns
     */
    internalCreateCluster(scope, id, clusterOptions) {
        return new eks.Cluster(scope, id, clusterOptions);
    }
    /**
     * Can be overridden to provide a custom kubectl layer.
     * @param scope
     * @param version
     * @returns
     */
    getKubectlLayer(scope, version) {
        return selectKubectlLayer(scope, version);
    }
    /**
     * Adds an autoscaling group to the cluster.
     * @param cluster
     * @param nodeGroup
     * @returns
     */
    addAutoScalingGroup(cluster, nodeGroup) {
        var _a, _b, _c, _d, _e, _f, _g;
        const machineImageType = (_a = nodeGroup.machineImageType) !== null && _a !== void 0 ? _a : eks.MachineImageType.AMAZON_LINUX_2;
        const instanceTypeContext = utils.valueFromContext(cluster, constants.INSTANCE_TYPE_KEY, constants.DEFAULT_INSTANCE_TYPE);
        const instanceType = (_b = nodeGroup.instanceType) !== null && _b !== void 0 ? _b : (typeof instanceTypeContext === 'string' ? new ec2.InstanceType(instanceTypeContext) : instanceTypeContext);
        const minSize = (_c = nodeGroup.minSize) !== null && _c !== void 0 ? _c : utils.valueFromContext(cluster, constants.MIN_SIZE_KEY, constants.DEFAULT_NG_MINSIZE);
        const maxSize = (_d = nodeGroup.maxSize) !== null && _d !== void 0 ? _d : utils.valueFromContext(cluster, constants.MAX_SIZE_KEY, constants.DEFAULT_NG_MAXSIZE);
        const desiredSize = (_e = nodeGroup.desiredSize) !== null && _e !== void 0 ? _e : utils.valueFromContext(cluster, constants.DESIRED_SIZE_KEY, minSize);
        const updatePolicy = (_f = nodeGroup.updatePolicy) !== null && _f !== void 0 ? _f : autoscaling.UpdatePolicy.rollingUpdate();
        // Create an autoscaling group
        return cluster.addAutoScalingGroupCapacity(nodeGroup.id, {
            ...nodeGroup,
            ...{
                autoScalingGroupName: (_g = nodeGroup.autoScalingGroupName) !== null && _g !== void 0 ? _g : nodeGroup.id,
                machineImageType,
                instanceType,
                minCapacity: minSize,
                maxCapacity: maxSize,
                desiredCapacity: desiredSize,
                updatePolicy,
                vpcSubnets: nodeGroup.nodeGroupSubnets,
            }
        });
    }
    /**
     * Adds a fargate profile to the cluster
     */
    addFargateProfile(cluster, name, profileOptions) {
        return cluster.addFargateProfile(name, profileOptions);
    }
    /**
     * Adds a managed node group to the cluster.
     * @param cluster
     * @param nodeGroup
     * @returns
     */
    addManagedNodeGroup(cluster, nodeGroup) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const capacityType = nodeGroup.nodeGroupCapacityType;
        const releaseVersion = nodeGroup.amiReleaseVersion;
        const instanceTypeContext = utils.valueFromContext(cluster, constants.INSTANCE_TYPE_KEY, constants.DEFAULT_INSTANCE_TYPE);
        const instanceTypes = (_a = nodeGroup.instanceTypes) !== null && _a !== void 0 ? _a : ([typeof instanceTypeContext === 'string' ? new ec2.InstanceType(instanceTypeContext) : instanceTypeContext]);
        const minSize = (_b = nodeGroup.minSize) !== null && _b !== void 0 ? _b : utils.valueFromContext(cluster, constants.MIN_SIZE_KEY, constants.DEFAULT_NG_MINSIZE);
        const maxSize = (_c = nodeGroup.maxSize) !== null && _c !== void 0 ? _c : utils.valueFromContext(cluster, constants.MAX_SIZE_KEY, constants.DEFAULT_NG_MAXSIZE);
        const desiredSize = (_d = nodeGroup.desiredSize) !== null && _d !== void 0 ? _d : utils.valueFromContext(cluster, constants.DESIRED_SIZE_KEY, minSize);
        // Create a managed node group.
        const nodegroupOptions = {
            ...nodeGroup,
            ...{
                nodegroupName: (_e = nodeGroup.nodegroupName) !== null && _e !== void 0 ? _e : nodeGroup.id,
                capacityType,
                instanceTypes,
                minSize,
                maxSize,
                desiredSize,
                releaseVersion,
                subnets: nodeGroup.nodeGroupSubnets
            }
        };
        if (nodeGroup.launchTemplate) {
            // Create launch template with provided launch template properties
            const lt = new ec2.LaunchTemplate(cluster, `${nodeGroup.id}-lt`, {
                blockDevices: nodeGroup.launchTemplate.blockDevices,
                machineImage: (_f = nodeGroup.launchTemplate) === null || _f === void 0 ? void 0 : _f.machineImage,
                securityGroup: nodeGroup.launchTemplate.securityGroup,
                userData: (_g = nodeGroup.launchTemplate) === null || _g === void 0 ? void 0 : _g.userData,
                requireImdsv2: (_h = nodeGroup.launchTemplate) === null || _h === void 0 ? void 0 : _h.requireImdsv2,
            });
            utils.setPath(nodegroupOptions, "launchTemplateSpec", {
                id: lt.launchTemplateId,
                version: lt.latestVersionNumber,
            });
            const tags = Object.entries((_j = nodeGroup.launchTemplate.tags) !== null && _j !== void 0 ? _j : {});
            tags.forEach(([key, options]) => aws_cdk_lib_1.Tags.of(lt).add(key, options));
            if ((_k = nodeGroup.launchTemplate) === null || _k === void 0 ? void 0 : _k.machineImage) {
                delete nodegroupOptions.amiType;
                delete nodegroupOptions.releaseVersion;
                delete nodeGroup.amiReleaseVersion;
            }
        }
        const result = cluster.addNodegroupCapacity(nodeGroup.id + "-ng", nodegroupOptions);
        if (nodeGroup.enableSsmPermissions) {
            result.role.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('AmazonSSMManagedInstanceCore'));
        }
        return result;
    }
    validateInput(props) {
        utils.validateConstraints(new GenericClusterPropsConstraints, GenericClusterProvider.name, props);
        if (props.managedNodeGroups != undefined)
            utils.validateConstraints(new ManagedNodeGroupConstraints, "ManagedNodeGroup", ...props.managedNodeGroups);
        if (props.autoscalingNodeGroups != undefined)
            utils.validateConstraints(new AutoscalingNodeGroupConstraints, "AutoscalingNodeGroups", ...props.autoscalingNodeGroups);
        if (props.fargateProfiles != undefined)
            utils.validateConstraints(new FargateProfileConstraints, "FargateProfiles", ...Object.values(props.fargateProfiles));
    }
}
exports.GenericClusterProvider = GenericClusterProvider;
//# sourceMappingURL=data:application/json;base64,