"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalsSecretsAddOn = void 0;
const utils_1 = require("../../utils");
const iam = require("aws-cdk-lib/aws-iam");
const ts_deepmerge_1 = require("ts-deepmerge");
const helm_addon_1 = require("../helm-addon");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * Default props for the add-on.
 */
const defaultProps = {
    name: "external-secrets",
    chart: "external-secrets",
    release: "blueprints-addon-external-secrets",
    version: "0.9.3",
    repository: "https://charts.external-secrets.io",
    namespace: "external-secrets",
    values: {},
};
/**
 * Default iam policy
 */
const defaultIamPolicy = new iam.PolicyStatement({
    effect: iam.Effect.ALLOW,
    actions: [
        "secretsmanager:GetResourcePolicy",
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret",
        "secretsmanager:ListSecretVersionIds",
        "secretsmanager:ListSecrets",
        "ssm:DescribeParameters",
        "ssm:GetParameter",
        "ssm:GetParameters",
        "ssm:GetParametersByPath",
        "ssm:GetParameterHistory",
        "kms:Decrypt"
    ],
    resources: ["*"],
});
/**
 * ExternalsSecretsAddOn deploys ExternalsSecrets into an EKS cluster using the `external-secrets` Helm chart.
 * https://github.com/external-secrets/external-secrets/
 *
 * For information on how to configure the `external-secrets` Helm chart, please view the values.yaml spec provided by the chart.
 * https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/values.yaml
 */
class ExternalsSecretsAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        // Create the ExternalsSecrets namespace.
        const namespace = this.options.namespace;
        const ns = (0, utils_1.createNamespace)(this.options.namespace, cluster, true);
        // Create the ExternalsSecrets service account.
        const serviceAccountName = "external-secrets-sa";
        const sa = cluster.addServiceAccount(serviceAccountName, {
            name: serviceAccountName,
            namespace: namespace,
        });
        sa.node.addDependency(ns);
        // Apply additional IAM policies to the service account.
        const policies = this.options.iamPolicies || [defaultIamPolicy];
        policies.forEach((policy) => sa.addToPrincipalPolicy(policy));
        // Configure values.
        let values = {
            serviceAccount: {
                name: serviceAccountName,
                create: false,
            },
            ...this.options.values,
        };
        values = (0, ts_deepmerge_1.default)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        const helmChart = this.addHelmChart(clusterInfo, values, false, true, aws_cdk_lib_1.Duration.minutes(15));
        helmChart.node.addDependency(sa);
        return Promise.resolve(helmChart);
    }
}
exports.ExternalsSecretsAddOn = ExternalsSecretsAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2V4dGVybmFsLXNlY3JldHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQThDO0FBQzlDLDJDQUEyQztBQUMzQywrQ0FBaUM7QUFHakMsOENBQThEO0FBQzlELDZDQUF1QztBQVl2Qzs7R0FFRztBQUNILE1BQU0sWUFBWSxHQUErQjtJQUMvQyxJQUFJLEVBQUUsa0JBQWtCO0lBQ3hCLEtBQUssRUFBRSxrQkFBa0I7SUFDekIsT0FBTyxFQUFFLG1DQUFtQztJQUM1QyxPQUFPLEVBQUUsT0FBTztJQUNoQixVQUFVLEVBQUUsb0NBQW9DO0lBQ2hELFNBQVMsRUFBRSxrQkFBa0I7SUFDN0IsTUFBTSxFQUFFLEVBQUU7Q0FDWCxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLGdCQUFnQixHQUF3QixJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7SUFDcEUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSztJQUN4QixPQUFPLEVBQUU7UUFDUCxrQ0FBa0M7UUFDbEMsK0JBQStCO1FBQy9CLCtCQUErQjtRQUMvQixxQ0FBcUM7UUFDckMsNEJBQTRCO1FBQzVCLHdCQUF3QjtRQUN4QixrQkFBa0I7UUFDbEIsbUJBQW1CO1FBQ25CLHlCQUF5QjtRQUN6Qix5QkFBeUI7UUFDekIsYUFBYTtLQUNkO0lBQ0QsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDO0NBQ2pCLENBQUMsQ0FBQztBQUVIOzs7Ozs7R0FNRztBQUNILE1BQWEscUJBQXNCLFNBQVEsc0JBQVM7SUFHbEQsWUFBWSxLQUFrQztRQUM1QyxLQUFLLENBQUMsRUFBRSxHQUFJLFlBQW9CLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQXdCOztRQUM3QixNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO1FBRXBDLHlDQUF5QztRQUN6QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUN6QyxNQUFNLEVBQUUsR0FBRyxJQUFBLHVCQUFlLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRW5FLCtDQUErQztRQUMvQyxNQUFNLGtCQUFrQixHQUFHLHFCQUFxQixDQUFDO1FBQ2pELE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsRUFBRTtZQUN2RCxJQUFJLEVBQUUsa0JBQWtCO1lBQ3hCLFNBQVMsRUFBRSxTQUFTO1NBQ3JCLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTFCLHdEQUF3RDtRQUN4RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDaEUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQTJCLEVBQUUsRUFBRSxDQUMvQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQ2hDLENBQUM7UUFFRixvQkFBb0I7UUFDcEIsSUFBSSxNQUFNLEdBQVk7WUFDcEIsY0FBYyxFQUFFO2dCQUNkLElBQUksRUFBRSxrQkFBa0I7Z0JBQ3hCLE1BQU0sRUFBRSxLQUFLO2FBQ2Q7WUFDRCxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTTtTQUN2QixDQUFDO1FBRUYsTUFBTSxHQUFHLElBQUEsc0JBQUssRUFBQyxNQUFNLEVBQUUsTUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sbUNBQUksRUFBRSxDQUFDLENBQUM7UUFFaEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsc0JBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1RixTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVqQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsQ0FBQztDQUNGO0FBN0NELHNEQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZU5hbWVzcGFjZSB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtaWFtXCI7XG5pbXBvcnQgbWVyZ2UgZnJvbSBcInRzLWRlZXBtZXJnZVwiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IENsdXN0ZXJJbmZvLCBWYWx1ZXMgfSBmcm9tIFwiLi4vLi4vc3BpXCI7XG5pbXBvcnQgeyBIZWxtQWRkT24sIEhlbG1BZGRPblVzZXJQcm9wcyB9IGZyb20gXCIuLi9oZWxtLWFkZG9uXCI7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIEV4dGVybmFsc1NlY3JldHMgYWRkLW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV4dGVybmFsc1NlY3JldHNBZGRPblByb3BzIGV4dGVuZHMgSGVsbUFkZE9uVXNlclByb3BzIHtcbiAgLyoqXG4gICAqIElhbSBwb2xpY2llcyBmb3IgdGhlIGFkZC1vbi5cbiAgICovXG4gIGlhbVBvbGljaWVzPzogaWFtLlBvbGljeVN0YXRlbWVudFtdO1xufVxuXG4vKipcbiAqIERlZmF1bHQgcHJvcHMgZm9yIHRoZSBhZGQtb24uXG4gKi9cbmNvbnN0IGRlZmF1bHRQcm9wczogRXh0ZXJuYWxzU2VjcmV0c0FkZE9uUHJvcHMgPSB7XG4gIG5hbWU6IFwiZXh0ZXJuYWwtc2VjcmV0c1wiLFxuICBjaGFydDogXCJleHRlcm5hbC1zZWNyZXRzXCIsXG4gIHJlbGVhc2U6IFwiYmx1ZXByaW50cy1hZGRvbi1leHRlcm5hbC1zZWNyZXRzXCIsXG4gIHZlcnNpb246IFwiMC45LjNcIixcbiAgcmVwb3NpdG9yeTogXCJodHRwczovL2NoYXJ0cy5leHRlcm5hbC1zZWNyZXRzLmlvXCIsXG4gIG5hbWVzcGFjZTogXCJleHRlcm5hbC1zZWNyZXRzXCIsXG4gIHZhbHVlczoge30sXG59O1xuXG4vKipcbiAqIERlZmF1bHQgaWFtIHBvbGljeVxuICovXG5jb25zdCBkZWZhdWx0SWFtUG9saWN5OiBpYW0uUG9saWN5U3RhdGVtZW50ID0gbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICBlZmZlY3Q6IGlhbS5FZmZlY3QuQUxMT1csXG4gIGFjdGlvbnM6IFtcbiAgICBcInNlY3JldHNtYW5hZ2VyOkdldFJlc291cmNlUG9saWN5XCIsXG4gICAgXCJzZWNyZXRzbWFuYWdlcjpHZXRTZWNyZXRWYWx1ZVwiLFxuICAgIFwic2VjcmV0c21hbmFnZXI6RGVzY3JpYmVTZWNyZXRcIixcbiAgICBcInNlY3JldHNtYW5hZ2VyOkxpc3RTZWNyZXRWZXJzaW9uSWRzXCIsXG4gICAgXCJzZWNyZXRzbWFuYWdlcjpMaXN0U2VjcmV0c1wiLFxuICAgIFwic3NtOkRlc2NyaWJlUGFyYW1ldGVyc1wiLFxuICAgIFwic3NtOkdldFBhcmFtZXRlclwiLFxuICAgIFwic3NtOkdldFBhcmFtZXRlcnNcIixcbiAgICBcInNzbTpHZXRQYXJhbWV0ZXJzQnlQYXRoXCIsXG4gICAgXCJzc206R2V0UGFyYW1ldGVySGlzdG9yeVwiLFxuICAgIFwia21zOkRlY3J5cHRcIlxuICBdLFxuICByZXNvdXJjZXM6IFtcIipcIl0sXG59KTtcblxuLyoqXG4gKiBFeHRlcm5hbHNTZWNyZXRzQWRkT24gZGVwbG95cyBFeHRlcm5hbHNTZWNyZXRzIGludG8gYW4gRUtTIGNsdXN0ZXIgdXNpbmcgdGhlIGBleHRlcm5hbC1zZWNyZXRzYCBIZWxtIGNoYXJ0LlxuICogaHR0cHM6Ly9naXRodWIuY29tL2V4dGVybmFsLXNlY3JldHMvZXh0ZXJuYWwtc2VjcmV0cy9cbiAqXG4gKiBGb3IgaW5mb3JtYXRpb24gb24gaG93IHRvIGNvbmZpZ3VyZSB0aGUgYGV4dGVybmFsLXNlY3JldHNgIEhlbG0gY2hhcnQsIHBsZWFzZSB2aWV3IHRoZSB2YWx1ZXMueWFtbCBzcGVjIHByb3ZpZGVkIGJ5IHRoZSBjaGFydC5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9leHRlcm5hbC1zZWNyZXRzL2V4dGVybmFsLXNlY3JldHMvYmxvYi9tYWluL2RlcGxveS9jaGFydHMvZXh0ZXJuYWwtc2VjcmV0cy92YWx1ZXMueWFtbFxuICovXG5leHBvcnQgY2xhc3MgRXh0ZXJuYWxzU2VjcmV0c0FkZE9uIGV4dGVuZHMgSGVsbUFkZE9uIHtcbiAgcmVhZG9ubHkgb3B0aW9uczogRXh0ZXJuYWxzU2VjcmV0c0FkZE9uUHJvcHM7XG5cbiAgY29uc3RydWN0b3IocHJvcHM/OiBFeHRlcm5hbHNTZWNyZXRzQWRkT25Qcm9wcykge1xuICAgIHN1cGVyKHsgLi4uKGRlZmF1bHRQcm9wcyBhcyBhbnkpLCAuLi5wcm9wcyB9KTtcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnByb3BzO1xuICB9XG5cbiAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IFByb21pc2U8Q29uc3RydWN0PiB7XG4gICAgY29uc3QgY2x1c3RlciA9IGNsdXN0ZXJJbmZvLmNsdXN0ZXI7XG5cbiAgICAvLyBDcmVhdGUgdGhlIEV4dGVybmFsc1NlY3JldHMgbmFtZXNwYWNlLlxuICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMub3B0aW9ucy5uYW1lc3BhY2U7XG4gICAgY29uc3QgbnMgPSBjcmVhdGVOYW1lc3BhY2UodGhpcy5vcHRpb25zLm5hbWVzcGFjZSEsIGNsdXN0ZXIsIHRydWUpO1xuXG4gICAgLy8gQ3JlYXRlIHRoZSBFeHRlcm5hbHNTZWNyZXRzIHNlcnZpY2UgYWNjb3VudC5cbiAgICBjb25zdCBzZXJ2aWNlQWNjb3VudE5hbWUgPSBcImV4dGVybmFsLXNlY3JldHMtc2FcIjtcbiAgICBjb25zdCBzYSA9IGNsdXN0ZXIuYWRkU2VydmljZUFjY291bnQoc2VydmljZUFjY291bnROYW1lLCB7XG4gICAgICBuYW1lOiBzZXJ2aWNlQWNjb3VudE5hbWUsXG4gICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZSxcbiAgICB9KTtcbiAgICBzYS5ub2RlLmFkZERlcGVuZGVuY3kobnMpO1xuXG4gICAgLy8gQXBwbHkgYWRkaXRpb25hbCBJQU0gcG9saWNpZXMgdG8gdGhlIHNlcnZpY2UgYWNjb3VudC5cbiAgICBjb25zdCBwb2xpY2llcyA9IHRoaXMub3B0aW9ucy5pYW1Qb2xpY2llcyB8fCBbZGVmYXVsdElhbVBvbGljeV07XG4gICAgcG9saWNpZXMuZm9yRWFjaCgocG9saWN5OiBpYW0uUG9saWN5U3RhdGVtZW50KSA9PlxuICAgICAgc2EuYWRkVG9QcmluY2lwYWxQb2xpY3kocG9saWN5KVxuICAgICk7XG5cbiAgICAvLyBDb25maWd1cmUgdmFsdWVzLlxuICAgIGxldCB2YWx1ZXMgOiBWYWx1ZXMgPSB7XG4gICAgICBzZXJ2aWNlQWNjb3VudDoge1xuICAgICAgICBuYW1lOiBzZXJ2aWNlQWNjb3VudE5hbWUsXG4gICAgICAgIGNyZWF0ZTogZmFsc2UsXG4gICAgICB9LFxuICAgICAgLi4udGhpcy5vcHRpb25zLnZhbHVlcyxcbiAgICB9O1xuXG4gICAgdmFsdWVzID0gbWVyZ2UodmFsdWVzLCB0aGlzLnByb3BzLnZhbHVlcyA/PyB7fSk7XG5cbiAgICBjb25zdCBoZWxtQ2hhcnQgPSB0aGlzLmFkZEhlbG1DaGFydChjbHVzdGVySW5mbywgdmFsdWVzLCBmYWxzZSwgdHJ1ZSwgRHVyYXRpb24ubWludXRlcygxNSkpO1xuICAgIGhlbG1DaGFydC5ub2RlLmFkZERlcGVuZGVuY3koc2EpO1xuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoZWxtQ2hhcnQpO1xuICB9XG59XG4iXX0=