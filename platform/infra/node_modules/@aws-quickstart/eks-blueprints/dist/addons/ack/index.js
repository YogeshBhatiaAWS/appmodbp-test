"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AckAddOn = void 0;
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const ts_deepmerge_1 = require("ts-deepmerge");
require("reflect-metadata");
const utils_1 = require("../../utils");
const helm_addon_1 = require("../helm-addon");
const serviceMappings_1 = require("./serviceMappings");
__exportStar(require("./serviceMappings"), exports);
/**
 * Default props to be used when creating the Helm chart
 */
const defaultProps = {
    namespace: "ack-system",
    values: {},
    createNamespace: true,
    serviceName: serviceMappings_1.AckServiceName.IAM,
    id: "iam-ack"
};
/**
 * Main class to instantiate the Helm chart
 */
let AckAddOn = exports.AckAddOn = class AckAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super(populateDefaults(defaultProps, props));
        this.options = this.props;
        this.id = this.options.id;
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        const sa = cluster.addServiceAccount(`${this.options.chart}-sa`, {
            namespace: this.options.namespace,
            name: this.options.saName,
        });
        let values = populateValues(this.options, cluster.stack.region);
        values = (0, ts_deepmerge_1.default)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        if (this.options.createNamespace == true) {
            // Let CDK Create the Namespace
            const namespace = (0, utils_1.createNamespace)(this.options.namespace, cluster);
            sa.node.addDependency(namespace);
        }
        sa.role.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName(this.options.managedPolicyName));
        const chart = this.addHelmChart(clusterInfo, values);
        chart.node.addDependency(sa);
        return Promise.resolve(chart);
    }
};
exports.AckAddOn = AckAddOn = __decorate([
    Reflect.metadata("ordered", true)
], AckAddOn);
/**
 * populateValues populates the appropriate values used to customize the Helm chart
 * @param helmOptions User provided values to customize the chart
 */
function populateValues(helmOptions, awsRegion) {
    var _a;
    const values = (_a = helmOptions.values) !== null && _a !== void 0 ? _a : {};
    (0, utils_1.setPath)(values, "aws.region", awsRegion);
    (0, utils_1.setPath)(values, "serviceAccount.create", false);
    (0, utils_1.setPath)(values, "serviceAccount.name", helmOptions.saName);
    return values;
}
/**
 * populate parameters passed or the default values from service Mappings.
 */
function populateDefaults(defaultProps, props) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    let tempProps = { ...props !== null && props !== void 0 ? props : {} }; // since props may be empty
    tempProps.id = (_a = tempProps.id) !== null && _a !== void 0 ? _a : defaultProps.id;
    tempProps.serviceName = (_b = tempProps.serviceName) !== null && _b !== void 0 ? _b : defaultProps.serviceName;
    tempProps.name = (_c = tempProps.name) !== null && _c !== void 0 ? _c : serviceMappings_1.serviceMappings[tempProps.serviceName].chart;
    tempProps.namespace = (_d = tempProps.namespace) !== null && _d !== void 0 ? _d : defaultProps.namespace;
    tempProps.chart = (_e = tempProps.chart) !== null && _e !== void 0 ? _e : (_f = serviceMappings_1.serviceMappings[tempProps.serviceName]) === null || _f === void 0 ? void 0 : _f.chart;
    tempProps.version = (_g = tempProps.version) !== null && _g !== void 0 ? _g : (_h = serviceMappings_1.serviceMappings[tempProps.serviceName]) === null || _h === void 0 ? void 0 : _h.version;
    const repositoryUrl = "oci://public.ecr.aws/aws-controllers-k8s";
    tempProps.release = (_j = tempProps.release) !== null && _j !== void 0 ? _j : tempProps.chart;
    tempProps.repository = (_k = tempProps.repository) !== null && _k !== void 0 ? _k : `${repositoryUrl}/${tempProps.name}`;
    tempProps.managedPolicyName = (_l = tempProps.managedPolicyName) !== null && _l !== void 0 ? _l : (_m = serviceMappings_1.serviceMappings[tempProps.serviceName]) === null || _m === void 0 ? void 0 : _m.managedPolicyName;
    tempProps.createNamespace = (_o = tempProps.createNamespace) !== null && _o !== void 0 ? _o : defaultProps.createNamespace;
    tempProps.saName = (_p = tempProps.saName) !== null && _p !== void 0 ? _p : `${tempProps.chart}-sa`;
    return tempProps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2Fjay9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGlEQUFvRDtBQUVwRCwrQ0FBaUM7QUFFakMsNEJBQTBCO0FBQzFCLHVDQUF1RDtBQUN2RCw4Q0FBOEU7QUFDOUUsdURBQW9FO0FBRXBFLG9EQUFrQztBQThCbEM7O0dBRUc7QUFDSCxNQUFNLFlBQVksR0FBa0I7SUFDbEMsU0FBUyxFQUFFLFlBQVk7SUFDdkIsTUFBTSxFQUFFLEVBQUU7SUFDVixlQUFlLEVBQUUsSUFBSTtJQUNyQixXQUFXLEVBQUUsZ0NBQWMsQ0FBQyxHQUFHO0lBQy9CLEVBQUUsRUFBRSxTQUFTO0NBQ2QsQ0FBQztBQUVGOztHQUVHO0FBRUksSUFBTSxRQUFRLHNCQUFkLE1BQU0sUUFBUyxTQUFRLHNCQUFTO0lBS3JDLFlBQVksS0FBcUI7UUFDL0IsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxLQUFLLENBQW1CLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFzQixDQUFDO1FBQzNDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUF3Qjs7UUFDN0IsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQztRQUVwQyxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxFQUFFO1lBQy9ELFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVM7WUFDakMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTTtTQUMxQixDQUFDLENBQUM7UUFFSCxJQUFJLE1BQU0sR0FBVyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sR0FBRyxJQUFBLHNCQUFLLEVBQUMsTUFBTSxFQUFFLE1BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRWhELElBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLElBQUksSUFBSSxFQUFDO1lBQ3RDLCtCQUErQjtZQUMvQixNQUFNLFNBQVMsR0FBRyxJQUFBLHVCQUFlLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFVLEVBQUcsT0FBTyxDQUFDLENBQUM7WUFDckUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDbEM7UUFFRCxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHVCQUFhLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBa0IsQ0FBQyxDQUFDLENBQUM7UUFDbEcsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDckQsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0IsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Q0FDRixDQUFBO21CQWpDWSxRQUFRO0lBRHBCLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQztHQUNyQixRQUFRLENBaUNwQjtBQUVEOzs7R0FHRztBQUNILFNBQVMsY0FBYyxDQUFDLFdBQTBCLEVBQUUsU0FBaUI7O0lBQ25FLE1BQU0sTUFBTSxHQUFHLE1BQUEsV0FBVyxDQUFDLE1BQU0sbUNBQUksRUFBRSxDQUFDO0lBQ3hDLElBQUEsZUFBTyxFQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDekMsSUFBQSxlQUFPLEVBQUMsTUFBTSxFQUFDLHVCQUF1QixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9DLElBQUEsZUFBTyxFQUFDLE1BQU0sRUFBQyxxQkFBcUIsRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyxnQkFBZ0IsQ0FBQyxZQUEyQixFQUFFLEtBQXFCOztJQUMxRSxJQUFJLFNBQVMsR0FBNEIsRUFBQyxHQUFHLEtBQUssYUFBTCxLQUFLLGNBQUwsS0FBSyxHQUFJLEVBQUUsRUFBQyxDQUFDLENBQUMsMkJBQTJCO0lBQ3RGLFNBQVMsQ0FBQyxFQUFFLEdBQUcsTUFBQSxTQUFTLENBQUMsRUFBRSxtQ0FBSSxZQUFZLENBQUMsRUFBRSxDQUFDO0lBQy9DLFNBQVMsQ0FBQyxXQUFXLEdBQUcsTUFBQSxTQUFTLENBQUMsV0FBVyxtQ0FBSSxZQUFZLENBQUMsV0FBVyxDQUFDO0lBQzFFLFNBQVMsQ0FBQyxJQUFJLEdBQUcsTUFBQSxTQUFTLENBQUMsSUFBSSxtQ0FBSSxpQ0FBZSxDQUFDLFNBQVMsQ0FBQyxXQUFZLENBQUUsQ0FBQyxLQUFLLENBQUM7SUFDbEYsU0FBUyxDQUFDLFNBQVMsR0FBRyxNQUFBLFNBQVMsQ0FBQyxTQUFTLG1DQUFJLFlBQVksQ0FBQyxTQUFTLENBQUM7SUFDcEUsU0FBUyxDQUFDLEtBQUssR0FBRyxNQUFBLFNBQVMsQ0FBQyxLQUFLLG1DQUFJLE1BQUEsaUNBQWUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFDLDBDQUFFLEtBQUssQ0FBQztJQUNwRixTQUFTLENBQUMsT0FBTyxHQUFHLE1BQUEsU0FBUyxDQUFDLE9BQU8sbUNBQUksTUFBQSxpQ0FBZSxDQUFDLFNBQVMsQ0FBQyxXQUFZLENBQUMsMENBQUUsT0FBTyxDQUFDO0lBQzFGLE1BQU0sYUFBYSxHQUFHLDBDQUEwQyxDQUFDO0lBQ2pFLFNBQVMsQ0FBQyxPQUFPLEdBQUcsTUFBQSxTQUFTLENBQUMsT0FBTyxtQ0FBSSxTQUFTLENBQUMsS0FBSyxDQUFDO0lBQ3pELFNBQVMsQ0FBQyxVQUFVLEdBQUcsTUFBQSxTQUFTLENBQUMsVUFBVSxtQ0FBSSxHQUFHLGFBQWEsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEYsU0FBUyxDQUFDLGlCQUFpQixHQUFHLE1BQUEsU0FBUyxDQUFDLGlCQUFpQixtQ0FBSSxNQUFBLGlDQUFlLENBQUMsU0FBUyxDQUFDLFdBQVksQ0FBQywwQ0FBRSxpQkFBaUIsQ0FBQztJQUN4SCxTQUFTLENBQUMsZUFBZSxHQUFHLE1BQUEsU0FBUyxDQUFDLGVBQWUsbUNBQUksWUFBWSxDQUFDLGVBQWUsQ0FBQztJQUN0RixTQUFTLENBQUMsTUFBTSxHQUFHLE1BQUEsU0FBUyxDQUFDLE1BQU0sbUNBQUksR0FBRyxTQUFTLENBQUMsS0FBSyxLQUFLLENBQUM7SUFDL0QsT0FBTyxTQUEwQixDQUFDO0FBQ3BDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYW5hZ2VkUG9saWN5IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XHJcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSBcInRzLWRlZXBtZXJnZVwiO1xyXG5pbXBvcnQgeyBDbHVzdGVySW5mbywgVmFsdWVzIH0gZnJvbSBcIi4uLy4uL3NwaVwiO1xyXG5pbXBvcnQgXCJyZWZsZWN0LW1ldGFkYXRhXCI7XHJcbmltcG9ydCB7IGNyZWF0ZU5hbWVzcGFjZSwgc2V0UGF0aCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xyXG5pbXBvcnQgeyBIZWxtQWRkT24sIEhlbG1BZGRPblByb3BzLCBIZWxtQWRkT25Vc2VyUHJvcHMgfSBmcm9tIFwiLi4vaGVsbS1hZGRvblwiO1xyXG5pbXBvcnQgeyBBY2tTZXJ2aWNlTmFtZSwgc2VydmljZU1hcHBpbmdzIH0gZnJvbSAnLi9zZXJ2aWNlTWFwcGluZ3MnO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vc2VydmljZU1hcHBpbmdzXCI7XHJcblxyXG4vKipcclxuICogVXNlciBwcm92aWRlZCBvcHRpb24gZm9yIHRoZSBIZWxtIENoYXJ0XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFja0FkZE9uUHJvcHMgZXh0ZW5kcyBIZWxtQWRkT25Vc2VyUHJvcHMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXF1aXJlZCBpZGVudGlmaWVkLCBtdXN0IGJlIHVuaXF1ZSB3aXRoaW4gdGhlIHBhcmVudCBzdGFjayBzY29wZS5cclxuICAgICAqL1xyXG4gICAgaWQ/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQgU2VydmljZSBOYW1lXHJcbiAgICAgKiBAZGVmYXVsdCBpYW1cclxuICAgICAqL1xyXG4gICAgc2VydmljZU5hbWU6IEFja1NlcnZpY2VOYW1lO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNYW5hZ2VkIElBTSBQb2xpY3kgb2YgdGhlIGFjayBjb250cm9sbGVyXHJcbiAgICAgKiBAZGVmYXVsdCBJQU1GdWxsQWNjZXNzXHJcbiAgICAgKi9cclxuICAgIG1hbmFnZWRQb2xpY3lOYW1lPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUbyBDcmVhdGUgTmFtZXNwYWNlIHVzaW5nIENESy4gVGhpcyBzaG91bGQgYmUgZG9uZSBvbmx5IGZvciB0aGUgZmlyc3QgdGltZS5cclxuICAgICAqLyAgICBcclxuICAgIGNyZWF0ZU5hbWVzcGFjZT86IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIFRvIGNyZWF0ZSBTZXJ2aWNlIEFjY291bnRcclxuICAgICAqLyAgICBcclxuICAgIHNhTmFtZT86IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIERlZmF1bHQgcHJvcHMgdG8gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIHRoZSBIZWxtIGNoYXJ0XHJcbiAqL1xyXG5jb25zdCBkZWZhdWx0UHJvcHM6IEFja0FkZE9uUHJvcHMgPSB7XHJcbiAgbmFtZXNwYWNlOiBcImFjay1zeXN0ZW1cIixcclxuICB2YWx1ZXM6IHt9LFxyXG4gIGNyZWF0ZU5hbWVzcGFjZTogdHJ1ZSxcclxuICBzZXJ2aWNlTmFtZTogQWNrU2VydmljZU5hbWUuSUFNLCBcclxuICBpZDogXCJpYW0tYWNrXCJcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNYWluIGNsYXNzIHRvIGluc3RhbnRpYXRlIHRoZSBIZWxtIGNoYXJ0XHJcbiAqL1xyXG5AUmVmbGVjdC5tZXRhZGF0YShcIm9yZGVyZWRcIiwgdHJ1ZSlcclxuZXhwb3J0IGNsYXNzIEFja0FkZE9uIGV4dGVuZHMgSGVsbUFkZE9uIHtcclxuXHJcbiAgcmVhZG9ubHkgb3B0aW9uczogQWNrQWRkT25Qcm9wcztcclxuICByZWFkb25seSBpZD8gOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzPzogQWNrQWRkT25Qcm9wcykge1xyXG4gICAgc3VwZXIocG9wdWxhdGVEZWZhdWx0cyhkZWZhdWx0UHJvcHMsIHByb3BzKSBhcyBIZWxtQWRkT25Qcm9wcyk7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnByb3BzIGFzIEFja0FkZE9uUHJvcHM7XHJcbiAgICB0aGlzLmlkID0gdGhpcy5vcHRpb25zLmlkO1xyXG4gIH1cclxuXHJcbiAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IFByb21pc2U8Q29uc3RydWN0PiB7XHJcbiAgICBjb25zdCBjbHVzdGVyID0gY2x1c3RlckluZm8uY2x1c3RlcjtcclxuXHJcbiAgICBjb25zdCBzYSA9IGNsdXN0ZXIuYWRkU2VydmljZUFjY291bnQoYCR7dGhpcy5vcHRpb25zLmNoYXJ0fS1zYWAsIHtcclxuICAgICAgbmFtZXNwYWNlOiB0aGlzLm9wdGlvbnMubmFtZXNwYWNlLFxyXG4gICAgICBuYW1lOiB0aGlzLm9wdGlvbnMuc2FOYW1lLFxyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IHZhbHVlczogVmFsdWVzID0gcG9wdWxhdGVWYWx1ZXModGhpcy5vcHRpb25zLGNsdXN0ZXIuc3RhY2sucmVnaW9uKTtcclxuICAgIHZhbHVlcyA9IG1lcmdlKHZhbHVlcywgdGhpcy5wcm9wcy52YWx1ZXMgPz8ge30pO1xyXG5cclxuICAgIGlmKHRoaXMub3B0aW9ucy5jcmVhdGVOYW1lc3BhY2UgPT0gdHJ1ZSl7XHJcbiAgICAgIC8vIExldCBDREsgQ3JlYXRlIHRoZSBOYW1lc3BhY2VcclxuICAgICAgY29uc3QgbmFtZXNwYWNlID0gY3JlYXRlTmFtZXNwYWNlKHRoaXMub3B0aW9ucy5uYW1lc3BhY2UhICwgY2x1c3Rlcik7XHJcbiAgICAgIHNhLm5vZGUuYWRkRGVwZW5kZW5jeShuYW1lc3BhY2UpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzYS5yb2xlLmFkZE1hbmFnZWRQb2xpY3koTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUodGhpcy5vcHRpb25zLm1hbmFnZWRQb2xpY3lOYW1lISkpO1xyXG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmFkZEhlbG1DaGFydChjbHVzdGVySW5mbywgdmFsdWVzKTtcclxuICAgIGNoYXJ0Lm5vZGUuYWRkRGVwZW5kZW5jeShzYSk7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYXJ0KTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBwb3B1bGF0ZVZhbHVlcyBwb3B1bGF0ZXMgdGhlIGFwcHJvcHJpYXRlIHZhbHVlcyB1c2VkIHRvIGN1c3RvbWl6ZSB0aGUgSGVsbSBjaGFydFxyXG4gKiBAcGFyYW0gaGVsbU9wdGlvbnMgVXNlciBwcm92aWRlZCB2YWx1ZXMgdG8gY3VzdG9taXplIHRoZSBjaGFydFxyXG4gKi9cclxuZnVuY3Rpb24gcG9wdWxhdGVWYWx1ZXMoaGVsbU9wdGlvbnM6IEFja0FkZE9uUHJvcHMsIGF3c1JlZ2lvbjogc3RyaW5nKTogVmFsdWVzIHtcclxuICBjb25zdCB2YWx1ZXMgPSBoZWxtT3B0aW9ucy52YWx1ZXMgPz8ge307XHJcbiAgc2V0UGF0aCh2YWx1ZXMsIFwiYXdzLnJlZ2lvblwiLCBhd3NSZWdpb24pO1xyXG4gIHNldFBhdGgodmFsdWVzLFwic2VydmljZUFjY291bnQuY3JlYXRlXCIsIGZhbHNlKTtcclxuICBzZXRQYXRoKHZhbHVlcyxcInNlcnZpY2VBY2NvdW50Lm5hbWVcIiwgaGVsbU9wdGlvbnMuc2FOYW1lKTtcclxuICByZXR1cm4gdmFsdWVzO1xyXG59XHJcblxyXG4vKipcclxuICogcG9wdWxhdGUgcGFyYW1ldGVycyBwYXNzZWQgb3IgdGhlIGRlZmF1bHQgdmFsdWVzIGZyb20gc2VydmljZSBNYXBwaW5ncy5cclxuICovXHJcbmZ1bmN0aW9uIHBvcHVsYXRlRGVmYXVsdHMoZGVmYXVsdFByb3BzOiBBY2tBZGRPblByb3BzLCBwcm9wcz86IEFja0FkZE9uUHJvcHMpOiBBY2tBZGRPblByb3BzIHtcclxuICBsZXQgdGVtcFByb3BzIDogUGFydGlhbDxBY2tBZGRPblByb3BzPiA9IHsuLi5wcm9wcyA/PyB7fX07IC8vIHNpbmNlIHByb3BzIG1heSBiZSBlbXB0eVxyXG4gIHRlbXBQcm9wcy5pZCA9IHRlbXBQcm9wcy5pZCA/PyBkZWZhdWx0UHJvcHMuaWQ7XHJcbiAgdGVtcFByb3BzLnNlcnZpY2VOYW1lID0gdGVtcFByb3BzLnNlcnZpY2VOYW1lID8/IGRlZmF1bHRQcm9wcy5zZXJ2aWNlTmFtZTtcclxuICB0ZW1wUHJvcHMubmFtZSA9IHRlbXBQcm9wcy5uYW1lID8/IHNlcnZpY2VNYXBwaW5nc1t0ZW1wUHJvcHMuc2VydmljZU5hbWUhXSEuY2hhcnQ7XHJcbiAgdGVtcFByb3BzLm5hbWVzcGFjZSA9IHRlbXBQcm9wcy5uYW1lc3BhY2UgPz8gZGVmYXVsdFByb3BzLm5hbWVzcGFjZTtcclxuICB0ZW1wUHJvcHMuY2hhcnQgPSB0ZW1wUHJvcHMuY2hhcnQgPz8gc2VydmljZU1hcHBpbmdzW3RlbXBQcm9wcy5zZXJ2aWNlTmFtZSFdPy5jaGFydDtcclxuICB0ZW1wUHJvcHMudmVyc2lvbiA9IHRlbXBQcm9wcy52ZXJzaW9uID8/IHNlcnZpY2VNYXBwaW5nc1t0ZW1wUHJvcHMuc2VydmljZU5hbWUhXT8udmVyc2lvbjtcclxuICBjb25zdCByZXBvc2l0b3J5VXJsID0gXCJvY2k6Ly9wdWJsaWMuZWNyLmF3cy9hd3MtY29udHJvbGxlcnMtazhzXCI7XHJcbiAgdGVtcFByb3BzLnJlbGVhc2UgPSB0ZW1wUHJvcHMucmVsZWFzZSA/PyB0ZW1wUHJvcHMuY2hhcnQ7XHJcbiAgdGVtcFByb3BzLnJlcG9zaXRvcnkgPSB0ZW1wUHJvcHMucmVwb3NpdG9yeSA/PyBgJHtyZXBvc2l0b3J5VXJsfS8ke3RlbXBQcm9wcy5uYW1lfWA7XHJcbiAgdGVtcFByb3BzLm1hbmFnZWRQb2xpY3lOYW1lID0gdGVtcFByb3BzLm1hbmFnZWRQb2xpY3lOYW1lID8/IHNlcnZpY2VNYXBwaW5nc1t0ZW1wUHJvcHMuc2VydmljZU5hbWUhXT8ubWFuYWdlZFBvbGljeU5hbWU7XHJcbiAgdGVtcFByb3BzLmNyZWF0ZU5hbWVzcGFjZSA9IHRlbXBQcm9wcy5jcmVhdGVOYW1lc3BhY2UgPz8gZGVmYXVsdFByb3BzLmNyZWF0ZU5hbWVzcGFjZTtcclxuICB0ZW1wUHJvcHMuc2FOYW1lID0gdGVtcFByb3BzLnNhTmFtZSA/PyBgJHt0ZW1wUHJvcHMuY2hhcnR9LXNhYDtcclxuICByZXR1cm4gdGVtcFByb3BzIGFzIEFja0FkZE9uUHJvcHM7XHJcbn0iXX0=