"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertManagerAddOn = void 0;
const ts_deepmerge_1 = require("ts-deepmerge");
const utils_1 = require("../../utils");
const object_utils_1 = require("../../utils/object-utils");
const helm_addon_1 = require("../helm-addon");
const aws_loadbalancer_controller_1 = require("../aws-loadbalancer-controller");
/**
 * Default props to be used when creating the Helm chart
 */
const defaultProps = {
    name: "blueprints-cert-manager-addon",
    namespace: "cert-manager",
    chart: "cert-manager",
    version: "1.12.3",
    release: "cert-manager",
    repository: "https://charts.jetstack.io",
    values: {},
    installCRDs: true,
    createNamespace: true
};
/**
 * Main class to instantiate the Helm chart
 */
class CertManagerAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        let values = populateValues(this.options);
        values = (0, ts_deepmerge_1.default)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        if (this.options.createNamespace == true) {
            // Let CDK Create the Namespace
            const namespace = (0, utils_1.createNamespace)(this.options.namespace, cluster);
            const chart = this.addHelmChart(clusterInfo, values);
            chart.node.addDependency(namespace);
            return Promise.resolve(chart);
        }
        else {
            //Namespace is already created
            const chart = this.addHelmChart(clusterInfo, values);
            return Promise.resolve(chart);
        }
    }
}
exports.CertManagerAddOn = CertManagerAddOn;
__decorate([
    (0, utils_1.dependable)(aws_loadbalancer_controller_1.AwsLoadBalancerControllerAddOn.name)
], CertManagerAddOn.prototype, "deploy", null);
/**
 * populateValues populates the appropriate values used to customize the Helm chart
 * @param helmOptions User provided values to customize the chart
 */
function populateValues(helmOptions) {
    var _a;
    const values = (_a = helmOptions.values) !== null && _a !== void 0 ? _a : {};
    (0, object_utils_1.setPath)(values, "installCRDs", helmOptions.installCRDs);
    return values;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2NlcnQtbWFuYWdlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQSwrQ0FBaUM7QUFFakMsdUNBQTBEO0FBQzFELDJEQUFtRDtBQUNuRCw4Q0FBOEU7QUFDOUUsZ0ZBQWdGO0FBZWhGOztHQUVHO0FBQ0gsTUFBTSxZQUFZLEdBQTJDO0lBQzNELElBQUksRUFBRSwrQkFBK0I7SUFDckMsU0FBUyxFQUFFLGNBQWM7SUFDekIsS0FBSyxFQUFFLGNBQWM7SUFDckIsT0FBTyxFQUFFLFFBQVE7SUFDakIsT0FBTyxFQUFFLGNBQWM7SUFDdkIsVUFBVSxFQUFHLDRCQUE0QjtJQUN6QyxNQUFNLEVBQUUsRUFBRTtJQUNWLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLGVBQWUsRUFBRSxJQUFJO0NBRXRCLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQWEsZ0JBQWlCLFNBQVEsc0JBQVM7SUFJN0MsWUFBWSxLQUE2QjtRQUN2QyxLQUFLLENBQUMsRUFBQyxHQUFHLFlBQVksRUFBRSxHQUFHLEtBQUssRUFBQyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBOEIsQ0FBQztJQUNyRCxDQUFDO0lBR0QsTUFBTSxDQUFDLFdBQXdCOztRQUM3QixNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO1FBQ3BDLElBQUksTUFBTSxHQUFXLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEQsTUFBTSxHQUFHLElBQUEsc0JBQUssRUFBQyxNQUFNLEVBQUUsTUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sbUNBQUksRUFBRSxDQUFDLENBQUM7UUFFaEQsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsSUFBSSxJQUFJLEVBQUM7WUFDdkMsK0JBQStCO1lBQy9CLE1BQU0sU0FBUyxHQUFHLElBQUEsdUJBQWUsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVUsRUFBRyxPQUFPLENBQUMsQ0FBQztZQUNyRSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNyRCxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNwQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FFL0I7YUFBTTtZQUNMLDhCQUE4QjtZQUM5QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNyRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0I7SUFFSCxDQUFDO0NBQ0Y7QUE3QkQsNENBNkJDO0FBbkJDO0lBREMsSUFBQSxrQkFBVSxFQUFDLDREQUE4QixDQUFDLElBQUksQ0FBQzs4Q0FtQi9DO0FBR0g7OztHQUdHO0FBQ0gsU0FBUyxjQUFjLENBQUMsV0FBa0M7O0lBQ3hELE1BQU0sTUFBTSxHQUFHLE1BQUEsV0FBVyxDQUFDLE1BQU0sbUNBQUksRUFBRSxDQUFDO0lBQ3hDLElBQUEsc0JBQU8sRUFBQyxNQUFNLEVBQUUsYUFBYSxFQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN6RCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbGliL2NlcnRtYW5hZ2VyX2FkZG9uLnRzXHJcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSBcInRzLWRlZXBtZXJnZVwiO1xyXG5pbXBvcnQgeyBDbHVzdGVySW5mbywgVmFsdWVzIH0gZnJvbSBcIi4uLy4uL3NwaVwiO1xyXG5pbXBvcnQgeyBjcmVhdGVOYW1lc3BhY2UsIGRlcGVuZGFibGUgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgc2V0UGF0aCB9IGZyb20gJy4uLy4uL3V0aWxzL29iamVjdC11dGlscyc7XHJcbmltcG9ydCB7IEhlbG1BZGRPbiwgSGVsbUFkZE9uUHJvcHMsIEhlbG1BZGRPblVzZXJQcm9wcyB9IGZyb20gXCIuLi9oZWxtLWFkZG9uXCI7XHJcbmltcG9ydCB7IEF3c0xvYWRCYWxhbmNlckNvbnRyb2xsZXJBZGRPbiB9IGZyb20gJy4uL2F3cy1sb2FkYmFsYW5jZXItY29udHJvbGxlcic7XHJcbi8qKlxyXG4gKiBVc2VyIHByb3ZpZGVkIG9wdGlvbnMgZm9yIHRoZSBIZWxtIENoYXJ0XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENlcnRNYW5hZ2VyQWRkT25Qcm9wcyBleHRlbmRzIEhlbG1BZGRPblVzZXJQcm9wcyB7XHJcbiAgICAvKipcclxuICAgICAqIFRvIGF1dG9tYXRpY2FsbHkgaW5zdGFsbCBhbmQgbWFuYWdlIHRoZSBDUkRzIGFzIHBhcnQgb2YgeW91ciBIZWxtIHJlbGVhc2UsXHJcbiAgICAgKi8gICAgXHJcbiAgICBpbnN0YWxsQ1JEcz86IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIFRvIENyZWF0ZSBOYW1lc3BhY2UgdXNpbmcgQ0RLXHJcbiAgICAgKi8gICAgXHJcbiAgICBjcmVhdGVOYW1lc3BhY2U/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogRGVmYXVsdCBwcm9wcyB0byBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgdGhlIEhlbG0gY2hhcnRcclxuICovXHJcbmNvbnN0IGRlZmF1bHRQcm9wczogSGVsbUFkZE9uUHJvcHMgJiBDZXJ0TWFuYWdlckFkZE9uUHJvcHMgPSB7XHJcbiAgbmFtZTogXCJibHVlcHJpbnRzLWNlcnQtbWFuYWdlci1hZGRvblwiLFxyXG4gIG5hbWVzcGFjZTogXCJjZXJ0LW1hbmFnZXJcIixcclxuICBjaGFydDogXCJjZXJ0LW1hbmFnZXJcIixcclxuICB2ZXJzaW9uOiBcIjEuMTIuM1wiLFxyXG4gIHJlbGVhc2U6IFwiY2VydC1tYW5hZ2VyXCIsXHJcbiAgcmVwb3NpdG9yeTogIFwiaHR0cHM6Ly9jaGFydHMuamV0c3RhY2suaW9cIixcclxuICB2YWx1ZXM6IHt9LFxyXG4gIGluc3RhbGxDUkRzOiB0cnVlLCAvL1RvIGF1dG9tYXRpY2FsbHkgaW5zdGFsbCBhbmQgbWFuYWdlIHRoZSBDUkRzIGFzIHBhcnQgb2YgeW91ciBIZWxtIHJlbGVhc2UsXHJcbiAgY3JlYXRlTmFtZXNwYWNlOiB0cnVlXHJcblxyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1haW4gY2xhc3MgdG8gaW5zdGFudGlhdGUgdGhlIEhlbG0gY2hhcnRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDZXJ0TWFuYWdlckFkZE9uIGV4dGVuZHMgSGVsbUFkZE9uIHtcclxuXHJcbiAgcmVhZG9ubHkgb3B0aW9uczogQ2VydE1hbmFnZXJBZGRPblByb3BzO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wcz86IENlcnRNYW5hZ2VyQWRkT25Qcm9wcykge1xyXG4gICAgc3VwZXIoey4uLmRlZmF1bHRQcm9wcywgLi4ucHJvcHN9KTtcclxuICAgIHRoaXMub3B0aW9ucyA9IHRoaXMucHJvcHMgYXMgQ2VydE1hbmFnZXJBZGRPblByb3BzO1xyXG4gIH1cclxuXHJcbiAgQGRlcGVuZGFibGUoQXdzTG9hZEJhbGFuY2VyQ29udHJvbGxlckFkZE9uLm5hbWUpXHJcbiAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IFByb21pc2U8Q29uc3RydWN0PiB7XHJcbiAgICBjb25zdCBjbHVzdGVyID0gY2x1c3RlckluZm8uY2x1c3RlcjtcclxuICAgIGxldCB2YWx1ZXM6IFZhbHVlcyA9IHBvcHVsYXRlVmFsdWVzKHRoaXMub3B0aW9ucyk7XHJcbiAgICB2YWx1ZXMgPSBtZXJnZSh2YWx1ZXMsIHRoaXMucHJvcHMudmFsdWVzID8/IHt9KTtcclxuXHJcbiAgICBpZiggdGhpcy5vcHRpb25zLmNyZWF0ZU5hbWVzcGFjZSA9PSB0cnVlKXtcclxuICAgICAgLy8gTGV0IENESyBDcmVhdGUgdGhlIE5hbWVzcGFjZVxyXG4gICAgICBjb25zdCBuYW1lc3BhY2UgPSBjcmVhdGVOYW1lc3BhY2UodGhpcy5vcHRpb25zLm5hbWVzcGFjZSEgLCBjbHVzdGVyKTtcclxuICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmFkZEhlbG1DaGFydChjbHVzdGVySW5mbywgdmFsdWVzKTtcclxuICAgICAgY2hhcnQubm9kZS5hZGREZXBlbmRlbmN5KG5hbWVzcGFjZSk7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2hhcnQpO1xyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vTmFtZXNwYWNlIGlzIGFscmVhZHkgY3JlYXRlZFxyXG4gICAgICBjb25zdCBjaGFydCA9IHRoaXMuYWRkSGVsbUNoYXJ0KGNsdXN0ZXJJbmZvLCB2YWx1ZXMpO1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYXJ0KTtcclxuICAgIH1cclxuICAgIFxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIHBvcHVsYXRlVmFsdWVzIHBvcHVsYXRlcyB0aGUgYXBwcm9wcmlhdGUgdmFsdWVzIHVzZWQgdG8gY3VzdG9taXplIHRoZSBIZWxtIGNoYXJ0XHJcbiAqIEBwYXJhbSBoZWxtT3B0aW9ucyBVc2VyIHByb3ZpZGVkIHZhbHVlcyB0byBjdXN0b21pemUgdGhlIGNoYXJ0XHJcbiAqL1xyXG5mdW5jdGlvbiBwb3B1bGF0ZVZhbHVlcyhoZWxtT3B0aW9uczogQ2VydE1hbmFnZXJBZGRPblByb3BzKTogVmFsdWVzIHtcclxuICBjb25zdCB2YWx1ZXMgPSBoZWxtT3B0aW9ucy52YWx1ZXMgPz8ge307XHJcbiAgc2V0UGF0aCh2YWx1ZXMsIFwiaW5zdGFsbENSRHNcIiwgIGhlbG1PcHRpb25zLmluc3RhbGxDUkRzKTtcclxuICByZXR1cm4gdmFsdWVzO1xyXG59XHJcbiJdfQ==