"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreAddOn = exports.CoreAddOnProps = void 0;
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const utils_1 = require("../../utils");
class CoreAddOnProps {
}
exports.CoreAddOnProps = CoreAddOnProps;
const DEFAULT_NAMESPACE = "kube-system";
/**
 * Implementation of EKS Managed add-ons.
 */
class CoreAddOn {
    constructor(coreAddOnProps) {
        this.coreAddOnProps = coreAddOnProps;
        utils_1.userLog.debug(`Core add-on ${coreAddOnProps.addOnName} is at version ${coreAddOnProps.version}`);
    }
    deploy(clusterInfo) {
        var _a;
        let serviceAccountRoleArn = undefined;
        let serviceAccount = undefined;
        let saNamespace = undefined;
        saNamespace = DEFAULT_NAMESPACE;
        if ((_a = this.coreAddOnProps) === null || _a === void 0 ? void 0 : _a.namespace) {
            saNamespace = this.coreAddOnProps.namespace;
        }
        // Create a service account if user provides namespace, PolicyDocument
        const policies = this.provideManagedPolicies(clusterInfo);
        if (policies) {
            serviceAccount = this.createServiceAccount(clusterInfo, saNamespace, policies);
            serviceAccountRoleArn = serviceAccount.role.roleArn;
        }
        let version = this.coreAddOnProps.version;
        if (this.coreAddOnProps.versionMap) {
            version = this.coreAddOnProps.version != "auto" ? this.coreAddOnProps.version : this.provideVersion(clusterInfo, this.coreAddOnProps.versionMap);
        }
        let addOnProps = {
            addonName: this.coreAddOnProps.addOnName,
            addonVersion: version,
            configurationValues: JSON.stringify(this.coreAddOnProps.configurationValues),
            clusterName: clusterInfo.cluster.clusterName,
            serviceAccountRoleArn: serviceAccountRoleArn,
            resolveConflicts: "OVERWRITE"
        };
        const cfnAddon = new aws_eks_1.CfnAddon(clusterInfo.cluster.stack, this.coreAddOnProps.addOnName + "-addOn", addOnProps);
        if (serviceAccount) {
            cfnAddon.node.addDependency(serviceAccount);
        }
        if (this.coreAddOnProps.controlPlaneAddOn) {
            (0, utils_1.deployBeforeCapacity)(cfnAddon, clusterInfo);
        }
        // Instantiate the Add-on
        return Promise.resolve(cfnAddon);
    }
    createServiceAccount(clusterInfo, saNamespace, policies) {
        return (0, utils_1.createServiceAccountWithPolicy)(clusterInfo.cluster, this.coreAddOnProps.saName, saNamespace, ...policies);
    }
    /**
     * Template method with default implementation to execute the supplied function of policyDocumentProvider.
     * Allows overriding this method in subclasses for more complex cases of policies.
     * @param clusterInfo
     * @returns
     */
    providePolicyDocument(clusterInfo) {
        var _a;
        if ((_a = this.coreAddOnProps) === null || _a === void 0 ? void 0 : _a.policyDocumentProvider) {
            return this.coreAddOnProps.policyDocumentProvider(clusterInfo.cluster.stack.partition);
        }
        return undefined;
    }
    /**
     * Template method to return managed policies for the service account.
     * Allows overriding in subclasses to handle more complex cases of policies.
     */
    provideManagedPolicies(clusterInfo) {
        let result;
        const policyDocument = this.providePolicyDocument(clusterInfo);
        if (policyDocument) {
            const policy = new aws_iam_1.ManagedPolicy(clusterInfo.cluster, `${this.coreAddOnProps.addOnName}-managed-policy`, {
                document: policyDocument
            });
            result = [policy];
        }
        return result;
    }
    provideVersion(clusterInfo, versionMap) {
        var _a;
        let version = (_a = versionMap.get(clusterInfo.version)) !== null && _a !== void 0 ? _a : versionMap.values().next().value;
        utils_1.userLog.debug(`Core add-on ${this.coreAddOnProps.addOnName} has autoselected version ${version}`);
        return version;
    }
}
exports.CoreAddOn = CoreAddOn;
//# sourceMappingURL=data:application/json;base64,