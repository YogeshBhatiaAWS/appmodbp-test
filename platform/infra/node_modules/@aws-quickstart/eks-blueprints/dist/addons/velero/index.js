"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VeleroAddOn = void 0;
const iam = require("aws-cdk-lib/aws-iam");
const s3 = require("aws-cdk-lib/aws-s3");
const ts_deepmerge_1 = require("ts-deepmerge");
const utils_1 = require("../../utils");
const helm_addon_1 = require("../helm-addon");
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    name: 'velero',
    version: "3.2.0",
    namespace: "velero",
    createNamespace: true,
    chart: "velero",
    repository: "https://vmware-tanzu.github.io/helm-charts/",
    release: "blueprints-addon-velero",
    values: {
        initContainers: [
            {
                name: "velero-plugin-for-aws",
                image: "velero/velero-plugin-for-aws:v1.2.0",
                imagePullPolicy: "IfNotPresent",
                volumeMounts: [
                    {
                        mountPath: "/target",
                        name: "plugins"
                    }
                ]
            }
        ],
        configuration: {
            provider: "aws",
            backupStorageLocation: {
                name: "default",
                config: {}
            },
            volumeSnapshotLocation: {
                name: "default",
                config: {}
            },
        },
        serviceAccount: {
            server: {}
        }
    },
};
class VeleroAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super((0, ts_deepmerge_1.default)(defaultProps, props !== null && props !== void 0 ? props : {}));
        this.options = this.props;
    }
    /**
     * Implementation of the add-on contract deploy method.
    */
    deploy(clusterInfo) {
        var _a, _b, _c, _d;
        const cluster = clusterInfo.cluster;
        const props = this.options;
        // Create S3 bucket if no existing bucket, create s3 bucket and corresponding KMS key
        const s3Bucket = this.getOrCreateS3Bucket(clusterInfo, "backup-bucket", props.values.configuration.backupStorageLocation.bucket);
        // Create Namespace if namespace is not explicied defined.
        const veleroNamespace = this.createNamespaceIfNeeded(clusterInfo, "velero", props.namespace, props.createNamespace);
        // Setup IAM Role for Service Accounts (IRSA) for the Velero Service Account    
        const veleroServiceAccount = this.createServiceAccountWithIamRoles(clusterInfo, "velero-account", veleroNamespace.name, s3Bucket);
        // if veleroName space does not exist and needs creation, add the dependency
        if (veleroNamespace.manifest) {
            veleroServiceAccount.node.addDependency(veleroNamespace.manifest);
        }
        // Setup the values for the helm chart
        const valueVariable = {
            values: {
                configuration: {
                    backupStorageLocation: {
                        prefix: (_a = props.values.configuration.backupStorageLocation.prefix) !== null && _a !== void 0 ? _a : "velero/" + cluster.clusterName,
                        bucket: s3Bucket.bucketName,
                        config: {
                            region: (_b = props.values.configuration.backupStorageLocation.config.region) !== null && _b !== void 0 ? _b : cluster.stack.region,
                        }
                    },
                    volumeSnapshotLocation: {
                        config: {
                            region: (_c = props.values.configuration.backupStorageLocation.config.region) !== null && _c !== void 0 ? _c : cluster.stack.region
                        }
                    }
                },
                // IAM role for Service Account
                serviceAccount: {
                    server: {
                        create: false,
                        name: veleroServiceAccount.serviceAccountName,
                    }
                }
            }
        };
        const values = (_d = (0, ts_deepmerge_1.default)(props.values, valueVariable.values)) !== null && _d !== void 0 ? _d : {};
        const chartNode = this.addHelmChart(clusterInfo, values);
        chartNode.node.addDependency(veleroServiceAccount);
        return Promise.resolve(chartNode);
    }
    /**
     * Return S3 Bucket
     * @param clusterInfo
     * @param id S3-Bucket-Postfix
     * @param existingBucketName exiting provided S3 BucketName if it exists
     * @returns the existing provided S3 bucket  or the newly created S3 bucket as s3.IBucket
     */
    getOrCreateS3Bucket(clusterInfo, id, existingBucketName) {
        if (!existingBucketName) {
            const bucket = new s3.Bucket(clusterInfo.cluster, "velero-${id}", {
                encryption: s3.BucketEncryption.KMS_MANAGED,
                blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
                publicReadAccess: false,
                enforceSSL: true // Encryption in Transit
            });
            return s3.Bucket.fromBucketName(clusterInfo.cluster, 'getOrCreateS3Bucket', bucket.bucketName);
        }
        else {
            return s3.Bucket.fromBucketName(clusterInfo.cluster, 'getOrCreateS3Bucket', existingBucketName);
        }
    }
    /**
     * Return Velero Namespace where Velero will be installed onto
     * @param clusterInfo
     * @param defaultName the Default Namespace for Velero if nothing specified
     * @param namespace
     * @returns the namespace created or existed.
     */
    createNamespaceIfNeeded(clusterInfo, defaultName, namespace, create) {
        // Create Namespace if namespace is not explicied defined.
        if (namespace) {
            // Create Namespace if the "create" option is true
            if (create) {
                const namespaceManifest = (0, utils_1.createNamespace)(namespace, clusterInfo.cluster);
                return { name: namespace, manifest: namespaceManifest };
            }
            // If the "create" option if false, then namespace will not be created, return namespace.name
            else {
                return { name: namespace };
            }
        }
        else {
            return { name: defaultName }; // initial value of veleroNamespace
        }
    }
    /**
     * Return Velero Namespace where Velero will be installed onto
     * @param clusterInfo
     * @param id
     * @param namespace Velero namespace name
     * @param s3BucketName the S3 BucketName where Velero will stores the backup onto
     * @returns the service Account
     */
    createServiceAccountWithIamRoles(clusterInfo, id, namespace, s3Bucket) {
        // Setup IAM Role for Service Accounts (IRSA) for the Velero Service Account
        const veleroServiceAccount = clusterInfo.cluster.addServiceAccount(id, {
            name: id,
            namespace: namespace
        });
        // IAM policy for Velero
        const veleroPolicyDocument = {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:DescribeVolumes",
                        "ec2:DescribeSnapshots",
                        "ec2:CreateTags",
                        "ec2:CreateVolume",
                        "ec2:CreateSnapshot",
                        "ec2:DeleteSnapshot"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "s3:GetObject",
                        "s3:DeleteObject",
                        "s3:PutObject",
                        "s3:AbortMultipartUpload",
                        "s3:ListMultipartUploadParts",
                        "s3:ListBucket"
                    ],
                    "Resource": [
                        s3Bucket.arnForObjects("*"),
                        s3Bucket.bucketArn
                    ]
                }
            ]
        };
        const veleroCustomPolicyDocument = iam.PolicyDocument.fromJson(veleroPolicyDocument);
        const veleroPolicy = new iam.ManagedPolicy(clusterInfo.cluster, "velero-managed-policy", {
            document: veleroCustomPolicyDocument
        });
        veleroServiceAccount.role.addManagedPolicy(veleroPolicy);
        return veleroServiceAccount;
    }
}
exports.VeleroAddOn = VeleroAddOn;
//# sourceMappingURL=data:application/json;base64,