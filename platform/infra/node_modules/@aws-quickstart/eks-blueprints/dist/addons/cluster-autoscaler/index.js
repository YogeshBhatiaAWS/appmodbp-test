"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterAutoScalerAddOn = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const iam = require("aws-cdk-lib/aws-iam");
const cluster_providers_1 = require("../../cluster-providers");
const utils_1 = require("../../utils");
const helm_addon_1 = require("../helm-addon");
const RELEASE = 'blueprints-addon-cluster-autoscaler';
const NAME = 'cluster-autoscaler';
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    chart: NAME,
    name: NAME,
    namespace: 'kube-system',
    release: RELEASE,
    repository: 'https://kubernetes.github.io/autoscaler',
    version: 'auto'
};
/**
 * Version of the autoscaler, controls the image tag
 */
const versionMap = new Map([
    [aws_eks_1.KubernetesVersion.V1_26, "9.29.0"],
    [aws_eks_1.KubernetesVersion.V1_25, "9.29.0"],
    [aws_eks_1.KubernetesVersion.V1_24, "9.25.0"],
    [aws_eks_1.KubernetesVersion.V1_23, "9.21.0"],
    [aws_eks_1.KubernetesVersion.V1_22, "9.13.1"],
    [aws_eks_1.KubernetesVersion.V1_21, "9.13.1"],
    [aws_eks_1.KubernetesVersion.V1_20, "9.9.2"],
    [aws_eks_1.KubernetesVersion.V1_19, "9.4.0"],
    [aws_eks_1.KubernetesVersion.V1_18, "9.4.0"],
]);
class ClusterAutoScalerAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        if (((_a = this.options.version) === null || _a === void 0 ? void 0 : _a.trim()) === 'auto') {
            this.options.version = versionMap.get(clusterInfo.version);
            if (!this.options.version) {
                this.options.version = versionMap.values().next().value;
                utils_1.logger.warn(`Unable to auto-detect cluster autoscaler version. Applying latest: ${this.options.version}`);
            }
        }
        const cluster = clusterInfo.cluster;
        const nodeGroups = (0, cluster_providers_1.assertEC2NodeGroup)(clusterInfo, "Cluster Autoscaler");
        const values = this.options.values || {};
        const namespace = this.options.namespace;
        // Create IAM Policy
        const autoscalerStmt = new iam.PolicyStatement();
        autoscalerStmt.addResources("*");
        autoscalerStmt.addActions("autoscaling:DescribeAutoScalingGroups", "autoscaling:DescribeAutoScalingInstances", "autoscaling:DescribeLaunchConfigurations", "autoscaling:DescribeTags", "autoscaling:SetDesiredCapacity", "autoscaling:TerminateInstanceInAutoScalingGroup", "ec2:DescribeLaunchTemplateVersions", "ec2:DescribeInstanceTypes", "eks:DescribeNodegroup");
        const autoscalerPolicyDocument = new iam.PolicyDocument({
            statements: [autoscalerStmt]
        });
        // Tag node groups
        const clusterName = new aws_cdk_lib_1.CfnJson(cluster.stack, "clusterName", {
            value: cluster.clusterName,
        });
        for (let ng of nodeGroups) {
            aws_cdk_lib_1.Tags.of(ng).add(`k8s.io/cluster-autoscaler/${clusterName}`, "owned", { applyToLaunchedInstances: true });
            aws_cdk_lib_1.Tags.of(ng).add("k8s.io/cluster-autoscaler/enabled", "true", { applyToLaunchedInstances: true });
        }
        // Create namespace
        if (this.options.createNamespace) {
            (0, utils_1.createNamespace)(namespace, cluster, true);
        }
        // Create IRSA
        const sa = (0, utils_1.createServiceAccount)(cluster, RELEASE, namespace, autoscalerPolicyDocument);
        // Create Helm Chart
        (0, utils_1.setPath)(values, "cloudProvider", "aws");
        (0, utils_1.setPath)(values, "autoDiscovery.clusterName", cluster.clusterName);
        (0, utils_1.setPath)(values, "awsRegion", cluster.stack.region);
        (0, utils_1.setPath)(values, "rbac.serviceAccount.create", false);
        (0, utils_1.setPath)(values, "rbac.serviceAccount.name", RELEASE);
        const clusterAutoscalerChart = this.addHelmChart(clusterInfo, values, false);
        clusterAutoscalerChart.node.addDependency(sa);
        return Promise.resolve(clusterAutoscalerChart);
    }
}
exports.ClusterAutoScalerAddOn = ClusterAutoScalerAddOn;
__decorate([
    (0, utils_1.conflictsWith)('KarpenterAddOn')
], ClusterAutoScalerAddOn.prototype, "deploy", null);
//# sourceMappingURL=data:application/json;base64,