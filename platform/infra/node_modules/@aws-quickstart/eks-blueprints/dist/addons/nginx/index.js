"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NginxAddOn = void 0;
const ts_deepmerge_1 = require("ts-deepmerge");
const __1 = require("..");
const utils_1 = require("../../utils");
const object_utils_1 = require("../../utils/object-utils");
const dot = require("dot-object");
const helm_addon_1 = require("../helm-addon");
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    name: "nginx-ingress",
    chart: "nginx-ingress",
    release: "blueprints-addon-nginx",
    version: "0.18.1",
    repository: "https://helm.nginx.com/stable",
    backendProtocol: 'tcp',
    crossZoneEnabled: true,
    internetFacing: true,
    targetType: 'ip',
    namespace: 'kube-system'
};
class NginxAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a, _b, _c, _d;
        const props = this.options;
        const presetAnnotations = {
            'service.beta.kubernetes.io/aws-load-balancer-backend-protocol': props.backendProtocol,
            'service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled': `${props.crossZoneEnabled}`,
            'service.beta.kubernetes.io/aws-load-balancer-scheme': props.internetFacing ? 'internet-facing' : 'internal',
            'service.beta.kubernetes.io/aws-load-balancer-type': 'external',
            'service.beta.kubernetes.io/aws-load-balancer-nlb-target-type': props.targetType,
            'external-dns.alpha.kubernetes.io/hostname': props.externalDnsHostname,
        };
        const values = {};
        if (props.certificateResourceName) {
            presetAnnotations['service.beta.kubernetes.io/aws-load-balancer-ssl-ports'] = 'https';
            const certificate = clusterInfo.getResource(props.certificateResourceName);
            presetAnnotations['service.beta.kubernetes.io/aws-load-balancer-ssl-cert'] = certificate === null || certificate === void 0 ? void 0 : certificate.certificateArn;
            (0, object_utils_1.setPath)(values, "controller.service.httpPort.enable", false);
            const httpPort = dot.pick("controller.service.httpsPort.targetPort", (_a = props.values) !== null && _a !== void 0 ? _a : {});
            if (httpPort === undefined) {
                (0, object_utils_1.setPath)(values, "controller.service.httpsPort.targetPort", 80);
            }
        }
        const serviceAnnotations = { ...(_c = (_b = values.controller) === null || _b === void 0 ? void 0 : _b.service) === null || _c === void 0 ? void 0 : _c.annotations, ...presetAnnotations };
        (0, object_utils_1.setPath)(values, 'controller.service.annotations', serviceAnnotations);
        const merged = (0, ts_deepmerge_1.default)(values, (_d = this.props.values) !== null && _d !== void 0 ? _d : {});
        const nginxHelmChart = this.addHelmChart(clusterInfo, merged);
        return Promise.resolve(nginxHelmChart);
    }
}
exports.NginxAddOn = NginxAddOn;
__decorate([
    (0, utils_1.dependable)(__1.AwsLoadBalancerControllerAddOn.name)
], NginxAddOn.prototype, "deploy", null);
//# sourceMappingURL=data:application/json;base64,