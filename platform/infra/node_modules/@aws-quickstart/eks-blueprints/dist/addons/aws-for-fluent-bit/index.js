"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsForFluentBitAddOn = void 0;
const helm_addon_1 = require("../helm-addon");
const namespace_utils_1 = require("../../utils/namespace-utils");
/**
 * Default props for the add-on.
 */
const defaultProps = {
    name: 'fluent-bit',
    chart: 'aws-for-fluent-bit',
    release: "blueprints-addon-aws-for-fluent-bit",
    version: '0.1.28',
    repository: 'https://aws.github.io/eks-charts',
    namespace: 'kube-system',
    createNamespace: false,
    values: {}
};
/**
 * AwsForFluentBitAddOn deploys FluentBit into an EKS cluster using the `aws-for-fluent-bit` Helm chart.
 * https://github.com/aws/eks-charts/tree/master/stable/aws-for-fluent-bit
 *
 * For information on how to configure the `aws-for-fluent-bit` Helm chart to forward logs and metrics to AWS services like CloudWatch or Kinesis, please view the values.yaml spec provided by the chart.
 * https://github.com/aws/eks-charts/blob/master/stable/aws-for-fluent-bit/values.yaml
 */
class AwsForFluentBitAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        const cluster = clusterInfo.cluster;
        const namespace = this.options.namespace;
        // Create the FluentBut service account.
        const serviceAccountName = 'aws-for-fluent-bit-sa';
        const sa = cluster.addServiceAccount(serviceAccountName, {
            name: serviceAccountName,
            namespace: namespace
        });
        // Create namespace
        if (this.options.createNamespace) {
            const ns = (0, namespace_utils_1.createNamespace)(namespace, cluster, true);
            sa.node.addDependency(ns);
        }
        // Apply additional IAM policies to the service account.
        const policies = this.options.iamPolicies || [];
        policies.forEach((policy) => sa.addToPrincipalPolicy(policy));
        // Configure values.
        const values = {
            serviceAccount: {
                name: serviceAccountName,
                create: false
            },
            ...this.options.values
        };
        const helmChart = this.addHelmChart(clusterInfo, values);
        helmChart.node.addDependency(sa);
        return Promise.resolve(helmChart);
    }
}
exports.AwsForFluentBitAddOn = AwsForFluentBitAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2F3cy1mb3ItZmx1ZW50LWJpdC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSw4Q0FBOEQ7QUFFOUQsaUVBQThEO0FBZ0I5RDs7R0FFRztBQUNILE1BQU0sWUFBWSxHQUE4QjtJQUM1QyxJQUFJLEVBQUUsWUFBWTtJQUNsQixLQUFLLEVBQUUsb0JBQW9CO0lBQzNCLE9BQU8sRUFBRSxxQ0FBcUM7SUFDOUMsT0FBTyxFQUFFLFFBQVE7SUFDakIsVUFBVSxFQUFFLGtDQUFrQztJQUM5QyxTQUFTLEVBQUUsYUFBYTtJQUN4QixlQUFlLEVBQUUsS0FBSztJQUN0QixNQUFNLEVBQUUsRUFBRTtDQUNiLENBQUM7QUFFRjs7Ozs7O0dBTUc7QUFDSCxNQUFhLG9CQUFxQixTQUFRLHNCQUFTO0lBSS9DLFlBQVksS0FBaUM7UUFDekMsS0FBSyxDQUFDLEVBQUUsR0FBRyxZQUFtQixFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUF3QjtRQUMzQixNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO1FBQ3BDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBVSxDQUFDO1FBRTFDLHdDQUF3QztRQUN4QyxNQUFNLGtCQUFrQixHQUFHLHVCQUF1QixDQUFDO1FBQ25ELE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsRUFBRTtZQUNyRCxJQUFJLEVBQUUsa0JBQWtCO1lBQ3hCLFNBQVMsRUFBRSxTQUFTO1NBQ3ZCLENBQUMsQ0FBQztRQUVILG1CQUFtQjtRQUNuQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFO1lBQzlCLE1BQU0sRUFBRSxHQUFHLElBQUEsaUNBQWUsRUFBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3JELEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzdCO1FBRUQsd0RBQXdEO1FBQ3hELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztRQUNoRCxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBdUIsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFL0Usb0JBQW9CO1FBQ3BCLE1BQU0sTUFBTSxHQUFHO1lBQ1gsY0FBYyxFQUFFO2dCQUNaLElBQUksRUFBRSxrQkFBa0I7Z0JBQ3hCLE1BQU0sRUFBRSxLQUFLO2FBQ2hCO1lBQ0QsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU07U0FDekIsQ0FBQztRQUVGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pELFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN0QyxDQUFDO0NBQ0o7QUEzQ0Qsb0RBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9saWN5U3RhdGVtZW50IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuXG5pbXBvcnQgeyBIZWxtQWRkT24sIEhlbG1BZGRPblVzZXJQcm9wcyB9IGZyb20gXCIuLi9oZWxtLWFkZG9uXCI7XG5pbXBvcnQgeyBDbHVzdGVySW5mbyB9IGZyb20gXCIuLi8uLi9zcGkvdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZU5hbWVzcGFjZSB9IGZyb20gXCIuLi8uLi91dGlscy9uYW1lc3BhY2UtdXRpbHNcIjtcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBGbHVlbnRCaXQgYWRkLW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEF3c0ZvckZsdWVudEJpdEFkZE9uUHJvcHMgZXh0ZW5kcyBIZWxtQWRkT25Vc2VyUHJvcHMge1xuICAgIC8qKlxuICAgICAqIElhbSBwb2xpY2llcyBmb3IgdGhlIGFkZC1vbi5cbiAgICAgKi9cbiAgICBpYW1Qb2xpY2llcz86IFBvbGljeVN0YXRlbWVudFtdLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIE5hbWVzcGFjZSB3aXRoIHRoZSBwcm92aWRlZCBvbmUgKHdpbGwgbm90IGlmIG5hbWVzcGFjZSBpcyBrdWJlLXN5c3RlbSlcbiAgICAgKi9cbiAgICBjcmVhdGVOYW1lc3BhY2U/OiBib29sZWFuXG59XG4vKipcbiAqIERlZmF1bHQgcHJvcHMgZm9yIHRoZSBhZGQtb24uXG4gKi9cbmNvbnN0IGRlZmF1bHRQcm9wczogQXdzRm9yRmx1ZW50Qml0QWRkT25Qcm9wcyA9IHtcbiAgICBuYW1lOiAnZmx1ZW50LWJpdCcsXG4gICAgY2hhcnQ6ICdhd3MtZm9yLWZsdWVudC1iaXQnLFxuICAgIHJlbGVhc2U6IFwiYmx1ZXByaW50cy1hZGRvbi1hd3MtZm9yLWZsdWVudC1iaXRcIixcbiAgICB2ZXJzaW9uOiAnMC4xLjI4JyxcbiAgICByZXBvc2l0b3J5OiAnaHR0cHM6Ly9hd3MuZ2l0aHViLmlvL2Vrcy1jaGFydHMnLFxuICAgIG5hbWVzcGFjZTogJ2t1YmUtc3lzdGVtJyxcbiAgICBjcmVhdGVOYW1lc3BhY2U6IGZhbHNlLFxuICAgIHZhbHVlczoge31cbn07XG5cbi8qKlxuICogQXdzRm9yRmx1ZW50Qml0QWRkT24gZGVwbG95cyBGbHVlbnRCaXQgaW50byBhbiBFS1MgY2x1c3RlciB1c2luZyB0aGUgYGF3cy1mb3ItZmx1ZW50LWJpdGAgSGVsbSBjaGFydC5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MvZWtzLWNoYXJ0cy90cmVlL21hc3Rlci9zdGFibGUvYXdzLWZvci1mbHVlbnQtYml0XG4gKiBcbiAqIEZvciBpbmZvcm1hdGlvbiBvbiBob3cgdG8gY29uZmlndXJlIHRoZSBgYXdzLWZvci1mbHVlbnQtYml0YCBIZWxtIGNoYXJ0IHRvIGZvcndhcmQgbG9ncyBhbmQgbWV0cmljcyB0byBBV1Mgc2VydmljZXMgbGlrZSBDbG91ZFdhdGNoIG9yIEtpbmVzaXMsIHBsZWFzZSB2aWV3IHRoZSB2YWx1ZXMueWFtbCBzcGVjIHByb3ZpZGVkIGJ5IHRoZSBjaGFydC5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MvZWtzLWNoYXJ0cy9ibG9iL21hc3Rlci9zdGFibGUvYXdzLWZvci1mbHVlbnQtYml0L3ZhbHVlcy55YW1sXG4gKi9cbmV4cG9ydCBjbGFzcyBBd3NGb3JGbHVlbnRCaXRBZGRPbiBleHRlbmRzIEhlbG1BZGRPbiB7XG5cbiAgICByZWFkb25seSBvcHRpb25zOiBBd3NGb3JGbHVlbnRCaXRBZGRPblByb3BzO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBBd3NGb3JGbHVlbnRCaXRBZGRPblByb3BzKSB7XG4gICAgICAgIHN1cGVyKHsgLi4uZGVmYXVsdFByb3BzIGFzIGFueSwgLi4ucHJvcHMgfSk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMucHJvcHM7XG4gICAgfVxuXG4gICAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IFByb21pc2U8Q29uc3RydWN0PiB7XG4gICAgICAgIGNvbnN0IGNsdXN0ZXIgPSBjbHVzdGVySW5mby5jbHVzdGVyO1xuICAgICAgICBjb25zdCBuYW1lc3BhY2UgPSB0aGlzLm9wdGlvbnMubmFtZXNwYWNlITtcblxuICAgICAgICAvLyBDcmVhdGUgdGhlIEZsdWVudEJ1dCBzZXJ2aWNlIGFjY291bnQuXG4gICAgICAgIGNvbnN0IHNlcnZpY2VBY2NvdW50TmFtZSA9ICdhd3MtZm9yLWZsdWVudC1iaXQtc2EnO1xuICAgICAgICBjb25zdCBzYSA9IGNsdXN0ZXIuYWRkU2VydmljZUFjY291bnQoc2VydmljZUFjY291bnROYW1lLCB7XG4gICAgICAgICAgICBuYW1lOiBzZXJ2aWNlQWNjb3VudE5hbWUsXG4gICAgICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDcmVhdGUgbmFtZXNwYWNlXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY3JlYXRlTmFtZXNwYWNlKSB7XG4gICAgICAgICAgICBjb25zdCBucyA9IGNyZWF0ZU5hbWVzcGFjZShuYW1lc3BhY2UsIGNsdXN0ZXIsIHRydWUpO1xuICAgICAgICAgICAgc2Eubm9kZS5hZGREZXBlbmRlbmN5KG5zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFwcGx5IGFkZGl0aW9uYWwgSUFNIHBvbGljaWVzIHRvIHRoZSBzZXJ2aWNlIGFjY291bnQuXG4gICAgICAgIGNvbnN0IHBvbGljaWVzID0gdGhpcy5vcHRpb25zLmlhbVBvbGljaWVzIHx8IFtdO1xuICAgICAgICBwb2xpY2llcy5mb3JFYWNoKChwb2xpY3k6IFBvbGljeVN0YXRlbWVudCkgPT4gc2EuYWRkVG9QcmluY2lwYWxQb2xpY3kocG9saWN5KSk7XG5cbiAgICAgICAgLy8gQ29uZmlndXJlIHZhbHVlcy5cbiAgICAgICAgY29uc3QgdmFsdWVzID0ge1xuICAgICAgICAgICAgc2VydmljZUFjY291bnQ6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBzZXJ2aWNlQWNjb3VudE5hbWUsXG4gICAgICAgICAgICAgICAgY3JlYXRlOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucy52YWx1ZXNcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBoZWxtQ2hhcnQgPSB0aGlzLmFkZEhlbG1DaGFydChjbHVzdGVySW5mbywgdmFsdWVzKTtcbiAgICAgICAgaGVsbUNoYXJ0Lm5vZGUuYWRkRGVwZW5kZW5jeShzYSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGVsbUNoYXJ0KTtcbiAgICB9XG59XG4iXX0=