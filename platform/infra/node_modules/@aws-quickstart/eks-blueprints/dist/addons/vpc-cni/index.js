"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcCniAddOn = void 0;
const utils_1 = require("../../utils");
const core_addon_1 = require("../core-addon");
const kubectl_provider_1 = require("../helm-addon/kubectl-provider");
const defaultProps = {
    addOnName: 'vpc-cni',
    version: 'v1.13.4-eksbuild.1',
    saName: 'aws-node',
    namespace: 'kube-system',
    controlPlaneAddOn: false,
    configurationValues: {}
};
/**
 * Implementation of VpcCni EKS add-on with Advanced Configurations.
 */
class VpcCniAddOn extends core_addon_1.CoreAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.vpcCniAddOnProps = { ...defaultProps, ...props };
        this.coreAddOnProps.configurationValues = populateVpcCniConfigurationValues(props);
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        let clusterSecurityGroupId = cluster.clusterSecurityGroupId;
        if (((_a = this.vpcCniAddOnProps.customNetworkingConfig) === null || _a === void 0 ? void 0 : _a.subnets)) {
            for (let subnet of this.vpcCniAddOnProps.customNetworkingConfig.subnets) {
                const doc = (0, utils_1.readYamlDocument)(__dirname + '/eniConfig.ytpl');
                const manifest = doc.split("---").map(e => (0, utils_1.loadYaml)(e));
                const values = {
                    availabilityZone: subnet.availabilityZone,
                    clusterSecurityGroupId: clusterSecurityGroupId,
                    subnetId: subnet.subnetId
                };
                const manifestDeployment = {
                    name: "EniCustomConfig" + subnet,
                    namespace: this.coreAddOnProps.namespace,
                    manifest,
                    values,
                };
                const kubectlProvider = new kubectl_provider_1.KubectlProvider(clusterInfo);
                kubectlProvider.addManifest(manifestDeployment);
            }
        }
        const addOnPromise = super.deploy(clusterInfo);
        return addOnPromise;
    }
    /**
     * Overrides the core method to provide managed policies.
     * @param _clusterInfo
     * @returns
     */
    provideManagedPolicies(_clusterInfo) {
        return this.vpcCniAddOnProps.serviceAccountPolicies;
    }
    /**
     * Overrides the core addon method in order to replace the SA if exists (which is the case for aws-node).
     * @param clusterInfo
     * @param saNamespace
     * @param policies
     * @returns
     */
    createServiceAccount(clusterInfo, saNamespace, policies) {
        const sa = new utils_1.ReplaceServiceAccount(clusterInfo.cluster, `${this.coreAddOnProps.saName}-sa`, {
            cluster: clusterInfo.cluster,
            name: this.coreAddOnProps.saName,
            namespace: saNamespace
        });
        policies.forEach(p => sa.role.addManagedPolicy(p));
        return sa;
    }
}
exports.VpcCniAddOn = VpcCniAddOn;
function populateVpcCniConfigurationValues(props) {
    if (props === null) {
        return {};
    }
    const result = {
        env: {
            AWS_EC2_ENDPOINT: props === null || props === void 0 ? void 0 : props.awsEc2Endpoint,
            ADDITIONAL_ENI_TAGS: props === null || props === void 0 ? void 0 : props.additionalEniTags,
            ANNOTATE_POD_IP: props === null || props === void 0 ? void 0 : props.annotatePodIp,
            AWS_EXTERNAL_SERVICE_CIDR: props === null || props === void 0 ? void 0 : props.awsExternalServiceCidrs,
            AWS_MANAGE_ENIS_NON_SCHEDULABLE: props === null || props === void 0 ? void 0 : props.awsManageEnisNonSchedulable,
            AWS_VPC_CNI_NODE_PORT_SUPPORT: props === null || props === void 0 ? void 0 : props.awsVpcCniNodePortSupport,
            AWS_VPC_ENI_MTU: props === null || props === void 0 ? void 0 : props.awsVpcEniMtu,
            AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG: props === null || props === void 0 ? void 0 : props.awsVpcK8sCniCustomNetworkCfg,
            AWS_VPC_K8S_CNI_EXCLUDE_SNAT_CIDRS: props === null || props === void 0 ? void 0 : props.awsVpcK8sExcludeSnatCidrs,
            ENI_CONFIG_LABEL_DEF: props === null || props === void 0 ? void 0 : props.eniConfigLabelDef,
            ENI_CONFIG_ANNOTATION_DEF: props === null || props === void 0 ? void 0 : props.eniConfigAnnotationDef,
            AWS_VPC_K8S_CNI_EXTERNALSNAT: props === null || props === void 0 ? void 0 : props.awsVpcK8sCniExternalSnat,
            AWS_VPC_K8S_CNI_LOGLEVEL: props === null || props === void 0 ? void 0 : props.awsVpcK8sCniLogLevel,
            AWS_VPC_K8S_CNI_LOG_FILE: props === null || props === void 0 ? void 0 : props.awsVpcK8sCniLogFile,
            AWS_VPC_K8S_CNI_RANDOMIZESNAT: props === null || props === void 0 ? void 0 : props.awsVpcK8sCniRandomizeSnat,
            AWS_VPC_K8S_CNI_VETHPREFIX: props === null || props === void 0 ? void 0 : props.awsVpcK8sCniVethPrefix,
            AWS_VPC_K8S_PLUGIN_LOG_FILE: props === null || props === void 0 ? void 0 : props.awsVpcK8sPluginLogFile,
            AWS_VPC_K8S_PLUGIN_LOG_LEVEL: props === null || props === void 0 ? void 0 : props.awsVpcK8sPluginLogLevel,
            CLUSTER_ENDPOINT: props === null || props === void 0 ? void 0 : props.clusterEndpoint,
            DISABLE_LEAKED_ENI_CLEANUP: props === null || props === void 0 ? void 0 : props.disableLeakedEniCleanup,
            DISABLE_INTROSPECTION: props === null || props === void 0 ? void 0 : props.disableIntrospection,
            DISABLE_METRICS: props === null || props === void 0 ? void 0 : props.disableMetrics,
            DISABLE_NETWORK_RESOURCE_PROVISIONING: props === null || props === void 0 ? void 0 : props.disablenetworkResourceProvisioning,
            DISABLE_TCP_EARLY_DEMUX: props === null || props === void 0 ? void 0 : props.disableTcpEarlyDemux,
            ENABLE_BANDWIDTH_PLUGIN: props === null || props === void 0 ? void 0 : props.enableBandwidthPlugin,
            ENABLE_NFTABLES: props === null || props === void 0 ? void 0 : props.enableNftables,
            ENABLE_POD_ENI: props === null || props === void 0 ? void 0 : props.enablePodEni,
            ENABLE_PREFIX_DELEGATION: props === null || props === void 0 ? void 0 : props.enablePrefixDelegation,
            ENABLE_V6_EGRESS: props === null || props === void 0 ? void 0 : props.enableV6Egress,
            INTROSPECTION_BIND_ADDRESS: props === null || props === void 0 ? void 0 : props.introspectionBindAddress,
            MAX_ENI: props === null || props === void 0 ? void 0 : props.maxEni,
            MINIMUM_IP_TARGET: props === null || props === void 0 ? void 0 : props.minimumIpTarget,
            POD_SECURITY_GROUP_ENFORCING_MODE: props === null || props === void 0 ? void 0 : props.podSecurityGroupEnforcingMode,
            WARM_ENI_TARGET: props === null || props === void 0 ? void 0 : props.warmEniTarget,
            WARM_IP_TARGET: props === null || props === void 0 ? void 0 : props.warmIpTarget,
            WARM_PREFIX_TARGET: props === null || props === void 0 ? void 0 : props.warmPrefixTarget
        }
    };
    // clean up all undefined
    const values = result.env;
    Object.keys(values).forEach(key => values[key] === undefined ? delete values[key] : {});
    Object.keys(values).forEach(key => values[key] = typeof values[key] !== 'string' ? JSON.stringify(values[key]) : values[key]);
    return result;
}
//# sourceMappingURL=data:application/json;base64,