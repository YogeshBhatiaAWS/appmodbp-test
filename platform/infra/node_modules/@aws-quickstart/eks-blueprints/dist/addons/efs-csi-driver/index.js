"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EfsCsiDriverAddOn = void 0;
const helm_addon_1 = require("../helm-addon");
const iam_policy_1 = require("./iam-policy");
const registry_utils_1 = require("../../utils/registry-utils");
const iam = require("aws-cdk-lib/aws-iam");
const utils_1 = require("../../utils");
const EFS_CSI_DRIVER = "aws-efs-csi-driver";
const EFS_CSI_CONTROLLER_SA = "efs-csi-controller-sa";
const EFS_REGISTRY_SUFFIX = "eks/aws-efs-csi-driver";
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    version: '2.4.9',
    namespace: "kube-system",
    repository: "https://kubernetes-sigs.github.io/aws-efs-csi-driver/",
    name: EFS_CSI_DRIVER,
    chart: EFS_CSI_DRIVER,
    replicaCount: 2
};
class EfsCsiDriverAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        // Create service account and policy
        const cluster = clusterInfo.cluster;
        const serviceAccount = cluster.addServiceAccount(EFS_CSI_CONTROLLER_SA, {
            name: EFS_CSI_CONTROLLER_SA,
            namespace: this.options.namespace,
        });
        (0, iam_policy_1.getEfsDriverPolicyStatements)((_a = this.options) === null || _a === void 0 ? void 0 : _a.kmsKeys).forEach((statement) => {
            serviceAccount.addToPrincipalPolicy(iam.PolicyStatement.fromJson(statement));
        });
        // Lookup appropriate image repo
        const repo = registry_utils_1.registries.get(clusterInfo.cluster.stack.region) + EFS_REGISTRY_SUFFIX;
        // setup value for helm chart
        const chartValues = populateValues(this.options, cluster.clusterName, serviceAccount.serviceAccountName, repo);
        // Define chart
        const efsCsiDriverChart = this.addHelmChart(clusterInfo, chartValues);
        efsCsiDriverChart.node.addDependency(serviceAccount);
        // return the Promise Construct for any teams that may depend on this
        return Promise.resolve(efsCsiDriverChart);
    }
}
exports.EfsCsiDriverAddOn = EfsCsiDriverAddOn;
/**
 * populateValues populates the appropriate values used to customize the Helm chart
 * @param helmOptions User provided values to customize the chart
 * @param clusterName Name of the cluster where to deploy the add-on
 * @param serviceAccountName Name of the service account used by the add-on
 * @param repository Repository to pull image for Add_on
 */
function populateValues(helmOptions, clusterName, serviceAccountName, repository) {
    var _a;
    const values = (_a = helmOptions.values) !== null && _a !== void 0 ? _a : {};
    (0, utils_1.setPath)(values, "clusterName", clusterName);
    (0, utils_1.setPath)(values, "controller.serviceAccount.create", false);
    (0, utils_1.setPath)(values, "controller.serviceAccount.name", serviceAccountName);
    (0, utils_1.setPath)(values, "node.serviceAccount.create", false);
    (0, utils_1.setPath)(values, "node.serviceAccount.name", serviceAccountName);
    (0, utils_1.setPath)(values, "replicaCount", helmOptions.replicaCount);
    (0, utils_1.setPath)(values, "image.repository", repository);
    return values;
}
//# sourceMappingURL=data:application/json;base64,