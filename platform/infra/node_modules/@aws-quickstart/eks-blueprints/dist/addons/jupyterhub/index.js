"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JupyterHubAddOn = exports.JupyterHubServiceType = void 0;
const assert = require("assert");
const utils_1 = require("../../utils");
const aws_loadbalancer_controller_1 = require("../aws-loadbalancer-controller");
const helm_addon_1 = require("../helm-addon");
const efs = require("aws-cdk-lib/aws-efs");
const ec2 = require("aws-cdk-lib/aws-ec2");
const semver = require("semver");
const ebs_csi_driver_1 = require("../ebs-csi-driver");
const efs_csi_driver_1 = require("../efs-csi-driver");
/**
 * Configuration options for exposing the JupyterHub proxy
 */
var JupyterHubServiceType;
(function (JupyterHubServiceType) {
    /**
     * Expose the service using AWS Application Load Balancer + Ingress controller
     */
    JupyterHubServiceType[JupyterHubServiceType["ALB"] = 0] = "ALB";
    /**
     * Expose the service using AWS Network Load Balancer + LoadBalancer service
     */
    JupyterHubServiceType[JupyterHubServiceType["NLB"] = 1] = "NLB";
    /**
     * Use ClusterIP service type and allow customers to port-forward for localhost access
     */
    JupyterHubServiceType[JupyterHubServiceType["CLUSTERIP"] = 2] = "CLUSTERIP";
})(JupyterHubServiceType || (exports.JupyterHubServiceType = JupyterHubServiceType = {}));
const JUPYTERHUB = 'jupyterhub';
const RELEASE = 'blueprints-addon-jupyterhub';
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    name: JUPYTERHUB,
    namespace: JUPYTERHUB,
    version: '2.0.0',
    chart: JUPYTERHUB,
    release: RELEASE,
    repository: 'https://hub.jupyter.org/helm-chart/',
    values: {}
};
/**
 * Implementation of the JupyterHub add-on
 */
class JupyterHubAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        let values = (_a = this.options.values) !== null && _a !== void 0 ? _a : {};
        // The addon requires a persistent storage option
        assert(this.options.ebsConfig || this.options.efsConfig, "You need to provide a persistent storage option.");
        // But you can only provide one option for persistent storage
        assert(!(this.options.ebsConfig && this.options.efsConfig), "You cannot provide more than one persistent storage option.");
        // Create Namespace
        const ns = (0, utils_1.createNamespace)(this.options.namespace, cluster, true, true);
        // User Environment setup
        let cmd;
        if (semver.lt(this.options.version, '2.0.0')) {
            cmd = ["start-singleuser.sh"];
        }
        else {
            cmd = ["jupyterhub-singleuser", "--allow-root"];
        }
        const notebook = this.options.notebookStack || 'jupyter/base-notebook';
        (0, utils_1.setPath)(values, "singleuser", {
            "image": {
                "name": `${notebook}`,
                "tag": "latest"
            },
            "extraEnv": { "CHOWN_HOME": "yes" },
            "uid": 0,
            "fsGid": 0,
            "cmd": cmd
        });
        // Persistent Storage Setup for EBS
        if (this.options.ebsConfig) {
            this.addEbsStorage(clusterInfo, values, this.options.ebsConfig);
        }
        // Persistent Storage Setup for EFS
        if (this.options.efsConfig) {
            this.addEfsStorage(clusterInfo, values, this.options.efsConfig);
        }
        // OpenID Connect authentication setup
        if (this.options.oidcConfig) {
            (0, utils_1.setPath)(values, "hub.config", {
                "JupyterHub": { "authenticator_class": "generic-oauth" },
                "GenericOAuthenticator": {
                    "client_id": this.options.oidcConfig.clientId,
                    "client_secret": this.options.oidcConfig.clientSecret,
                    "oauth_callback_url": this.options.oidcConfig.callbackUrl,
                    "authorize_url": this.options.oidcConfig.authUrl,
                    "token_url": this.options.oidcConfig.tokenUrl,
                    "userdata_url": this.options.oidcConfig.userDataUrl,
                    "scope": this.options.oidcConfig.scope,
                    "username_key": this.options.oidcConfig.usernameKey,
                }
            });
        }
        // Proxy information - set either ALB, NLB (default) or ClusterIP service based on 
        // provided configuration
        const serviceType = this.options.serviceType;
        const ingressHosts = this.options.ingressHosts || [];
        const ingressAnnotations = this.options.ingressAnnotations;
        const cert = this.options.certificateResourceName;
        const albAddOnCheck = clusterInfo.getScheduledAddOn(aws_loadbalancer_controller_1.AwsLoadBalancerControllerAddOn.name);
        // Use Ingress and AWS ALB
        if (serviceType == JupyterHubServiceType.ALB) {
            assert(albAddOnCheck, `Missing a dependency: ${aws_loadbalancer_controller_1.AwsLoadBalancerControllerAddOn.name}. Please add it to your list of addons.`);
            const presetAnnotations = {
                'alb.ingress.kubernetes.io/scheme': 'internet-facing',
                'alb.ingress.kubernetes.io/target-type': 'ip',
                'kubernetes.io/ingress.class': 'alb',
            };
            if (cert) {
                presetAnnotations['alb.ingress.kubernetes.io/ssl-redirect'] = '443';
                presetAnnotations['alb.ingress.kubernetes.io/listen-ports'] = '[{"HTTP": 80},{"HTTPS":443}]';
                const certificate = clusterInfo.getResource(cert);
                presetAnnotations['alb.ingress.kubernetes.io/certificate-arn'] = certificate === null || certificate === void 0 ? void 0 : certificate.certificateArn;
            }
            const annotations = { ...ingressAnnotations, ...presetAnnotations };
            (0, utils_1.setPath)(values, "ingress.annotations", annotations);
            (0, utils_1.setPath)(values, "ingress.hosts", ingressHosts);
            (0, utils_1.setPath)(values, "ingress.enabled", true);
            (0, utils_1.setPath)(values, "proxy.service", { "type": "ClusterIP" });
        }
        else {
            assert(!ingressHosts || ingressHosts.length == 0, 'Ingress Hosts CANNOT be assigned when ingress is disabled');
            assert(!ingressAnnotations, 'Ingress annotations CANNOT be assigned when ingress is disabled');
            assert(!cert, 'Cert option is only supported if ingress is enabled.');
            // If we set SVC, set the proxy service type to ClusterIP and allow users to port-forward to localhost
            if (serviceType == JupyterHubServiceType.CLUSTERIP) {
                (0, utils_1.setPath)(values, "proxy.service", { "type": "ClusterIP" });
                // We will use NLB 
            }
            else {
                assert(albAddOnCheck, `Missing a dependency: ${aws_loadbalancer_controller_1.AwsLoadBalancerControllerAddOn.name}. Please add it to your list of addons.`);
                (0, utils_1.setPath)(values, "proxy.service", {
                    "annotations": {
                        "service.beta.kubernetes.io/aws-load-balancer-type": "nlb",
                        "service.beta.kubernetes.io/aws-load-balancer-scheme": "internet-facing",
                        "service.beta.kubernetes.io/aws-load-balancer-nlb-target-type": "ip",
                    }
                });
            }
        }
        // Create Helm Chart
        const jupyterHubChart = this.addHelmChart(clusterInfo, values, false, false);
        // Add dependency
        jupyterHubChart.node.addDependency(ns);
        if (albAddOnCheck) {
            albAddOnCheck.then(construct => jupyterHubChart.node.addDependency(construct));
        }
        return Promise.resolve(jupyterHubChart);
    }
    /**
     * This is a helper function to create EBS persistent storage
     * @param {ClusterInfo} clusterInfo - Cluster Info
     * @param {string} values - Helm Chart Values
     * @param {string} ebsConfig - EBS Configurations supplied by user
     * @returns
     */
    addEbsStorage(clusterInfo, values, ebsConfig) {
        const dep = clusterInfo.getScheduledAddOn(ebs_csi_driver_1.EbsCsiDriverAddOn.name);
        assert(dep, `Missing a dependency: ${ebs_csi_driver_1.EbsCsiDriverAddOn.name}. Please add it to your list of addons.`);
        // Create persistent storage with EBS
        const storageClass = ebsConfig.storageClass;
        const ebsCapacity = ebsConfig.capacity;
        (0, utils_1.setPath)(values, "singleuser.storage", {
            "dynamic": { "storageClass": storageClass },
            "capacity": ebsCapacity
        });
    }
    /**
     * This is a helper function to create EFS persistent storage
     * @param {ClusterInfo} clusterInfo - Cluster Info
     * @param {string} values - Helm Chart Values
     * @param {string} efsConfig - EFS Configurations supplied by user
     * @returns
     */
    addEfsStorage(clusterInfo, values, efsConfig) {
        const dep = clusterInfo.getScheduledAddOn(efs_csi_driver_1.EfsCsiDriverAddOn.name);
        assert(dep, `Missing a dependency: ${efs_csi_driver_1.EfsCsiDriverAddOn.name}. Please add it to your list of addons.`);
        const pvcName = efsConfig.pvcName;
        const removalPolicy = efsConfig.removalPolicy;
        const efsCapacity = efsConfig.capacity;
        this.setupEFS(clusterInfo, this.options.namespace, pvcName, efsCapacity, removalPolicy);
        (0, utils_1.setPath)(values, "singleuser.storage", {
            "type": "static",
            "static": {
                "pvcName": `${pvcName}`,
                "subPath": "home/{username}"
            }
        });
    }
    /**
     * This is a helper function to use EFS as persistent storage
     * including necessary security group with ingress rule,
     * EFS File System, Kubernetes PV and PVC
     * @param {ClusterInfo} clusterInfo - Cluster Info
     * @param {string} namespace - Namespace
     * @param {string} pvcName - Name of the PV and PVC
     * @param {RemovalPolicy}removalPolicy - Removal Policy for EFS File System (RETAIN, DESTROY or SNAPSHOT)
     * @returns
     * */
    setupEFS(clusterInfo, namespace, pvcName, capacity, removalPolicy) {
        const cluster = clusterInfo.cluster;
        const clusterVpcCidr = clusterInfo.cluster.vpc.vpcCidrBlock;
        // Security Group required for access to the File System
        // With the right ingress rule
        const jupyterHubSG = new ec2.SecurityGroup(cluster.stack, 'MyEfsSecurityGroup', {
            vpc: clusterInfo.cluster.vpc,
            securityGroupName: "EksBlueprintsJHubEFSSG",
        });
        jupyterHubSG.addIngressRule(ec2.Peer.ipv4(clusterVpcCidr), new ec2.Port({
            protocol: ec2.Protocol.TCP,
            stringRepresentation: "EFSconnection",
            toPort: 2049,
            fromPort: 2049,
        }));
        // Create the EFS File System
        const jupyterHubFileSystem = new efs.FileSystem(cluster.stack, 'MyEfsFileSystem', {
            vpc: clusterInfo.cluster.vpc,
            securityGroup: jupyterHubSG,
            removalPolicy: removalPolicy,
        });
        const efsId = jupyterHubFileSystem.fileSystemId;
        // Create StorageClass
        const efsSC = cluster.addManifest('efs-storage-class', {
            apiVersion: 'storage.k8s.io/v1',
            kind: 'StorageClass',
            metadata: {
                name: 'efs-sc',
            },
            provisioner: 'efs.csi.aws.com',
        });
        // Setup PersistentVolume and PersistentVolumeClaim
        const efsPV = cluster.addManifest('efs-pv', {
            apiVersion: 'v1',
            kind: 'PersistentVolume',
            metadata: {
                name: `${pvcName}`,
                namespace: namespace
            },
            spec: {
                capacity: { storage: `${capacity}` },
                volumeMode: 'Filesystem',
                accessModes: ['ReadWriteMany'],
                storageClassName: 'efs-sc',
                csi: {
                    driver: 'efs.csi.aws.com',
                    volumeHandle: `${efsId}`,
                }
            },
        });
        efsPV.node.addDependency(efsSC);
        efsPV.node.addDependency(jupyterHubFileSystem);
        const efsPVC = cluster.addManifest('efs-pvc', {
            apiVersion: 'v1',
            kind: 'PersistentVolumeClaim',
            metadata: {
                name: `${pvcName}`,
                namespace: namespace
            },
            spec: {
                storageClassName: 'efs-sc',
                accessModes: ['ReadWriteMany'],
                resources: { requests: { storage: `${capacity}` } },
            },
        });
        efsPVC.node.addDependency(efsPV);
    }
}
exports.JupyterHubAddOn = JupyterHubAddOn;
//# sourceMappingURL=data:application/json;base64,