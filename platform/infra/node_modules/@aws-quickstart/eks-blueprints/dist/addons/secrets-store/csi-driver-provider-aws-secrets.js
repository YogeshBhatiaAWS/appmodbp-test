"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretProviderClass = exports.KubernetesSecretType = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const assert = require("assert");
const __1 = require("../..");
var AwsSecretType;
(function (AwsSecretType) {
    AwsSecretType["SSMPARAMETER"] = "ssmparameter";
    AwsSecretType["SECRETSMANAGER"] = "secretsmanager";
})(AwsSecretType || (AwsSecretType = {}));
var KubernetesSecretType;
(function (KubernetesSecretType) {
    KubernetesSecretType["OPAQUE"] = "Opaque";
    KubernetesSecretType["BASIC_AUTH"] = "kubernetes.io/basic-auth";
    KubernetesSecretType["TOKEN"] = "bootstrap.kubernetes.io/token";
    KubernetesSecretType["DOCKER_CONFIG_JSON"] = "kubernetes.io/dockerconfigjson";
    KubernetesSecretType["DOCKER_CONFIG"] = "kubernetes.io/dockercfg";
    KubernetesSecretType["SSH_AUTH"] = "kubernetes.io/ssh-auth";
    KubernetesSecretType["SERVICE_ACCOUNT_TOKEN"] = "kubernetes.io/service-account-token";
    KubernetesSecretType["TLS"] = "kubernetes.io/tls";
})(KubernetesSecretType || (exports.KubernetesSecretType = KubernetesSecretType = {}));
function createParameterObject(csiSecret, secretName, secretType) {
    const result = {
        objectName: secretName,
        objectType: secretType,
    };
    if (csiSecret.jmesPath) {
        result.jmesPath = csiSecret.jmesPath;
    }
    return result;
}
class SecretProviderClass {
    constructor(clusterInfo, serviceAccount, secretProviderClassName, ...csiSecrets) {
        this.clusterInfo = clusterInfo;
        this.serviceAccount = serviceAccount;
        this.secretProviderClassName = secretProviderClassName;
        this.parameterObjects = [];
        this.kubernetesSecrets = [];
        this.csiSecrets = csiSecrets;
        this.secretProviderClassPromise = this.setupSecrets();
    }
    addDependent(...constructs) {
        this.secretProviderClassPromise.then(secretProviderClass => {
            constructs.forEach(dependent => dependent.node.addDependency(secretProviderClass));
        });
    }
    /**
     * Optionally returns volume mounts for a pod or helm chart that supports volume mounts.
     */
    getVolumeMounts(volumeName, mountPath) {
        return {
            "volumes": [
                {
                    name: volumeName,
                    csi: {
                        driver: "secrets-store.csi.k8s.io",
                        readOnly: true,
                        volumeAttributes: {
                            secretProviderClass: this.secretProviderClassName
                        }
                    }
                }
            ],
            "volumeMounts": [
                {
                    name: volumeName,
                    mountPath: mountPath !== null && mountPath !== void 0 ? mountPath : "/mnt/secret-store"
                }
            ]
        };
    }
    /**
     * Setup CSI secrets
     * @param clusterInfo
     */
    setupSecrets() {
        const secretsDriverPromise = this.clusterInfo.getScheduledAddOn(__1.SecretsStoreAddOn.name);
        assert(secretsDriverPromise != null, 'SecretsStoreAddOn is required to setup secrets but is not provided in the add-ons.');
        this.addPolicyToServiceAccount();
        // Create and apply SecretProviderClass manifest
        return secretsDriverPromise.then(secretsDriver => this.createSecretProviderClass(secretsDriver));
    }
    /**
     * Creates Service Account for CSI Secrets driver and sets up the IAM Policies
     * needed to access the AWS Secrets
     * @param clusterInfo
     * @param serviceAccount
     */
    addPolicyToServiceAccount() {
        this.csiSecrets.forEach((csiSecret) => {
            var _a, _b;
            const data = [];
            let kubernetesSecret;
            let secretName;
            const secret = csiSecret.secretProvider.provide(this.clusterInfo);
            if (Object.hasOwnProperty.call(secret, 'secretArn')) {
                const secretManagerSecret = secret;
                secretName = secretManagerSecret.secretName;
                const parameterObject = createParameterObject(csiSecret, secretName, AwsSecretType.SECRETSMANAGER);
                this.parameterObjects.push(parameterObject);
                secretManagerSecret.grantRead(this.serviceAccount);
            }
            else {
                const ssmSecret = secret;
                secretName = ssmSecret.parameterName;
                const parameterObject = createParameterObject(csiSecret, secretName, AwsSecretType.SSMPARAMETER);
                this.parameterObjects.push(parameterObject);
                ssmSecret.grantRead(this.serviceAccount);
            }
            if (csiSecret.kubernetesSecret) {
                if (csiSecret.kubernetesSecret.data) {
                    csiSecret.kubernetesSecret.data.forEach((item) => {
                        var _a, _b;
                        const dataObject = {
                            objectName: (_a = item.objectName) !== null && _a !== void 0 ? _a : secretName,
                            key: (_b = item.key) !== null && _b !== void 0 ? _b : secretName
                        };
                        data.push(dataObject);
                    });
                }
                else {
                    const dataObject = {
                        objectName: secretName,
                        key: secretName
                    };
                    data.push(dataObject);
                }
                kubernetesSecret = {
                    secretName: csiSecret.kubernetesSecret.secretName,
                    type: (_a = csiSecret.kubernetesSecret.type) !== null && _a !== void 0 ? _a : KubernetesSecretType.OPAQUE,
                    labels: (_b = csiSecret.kubernetesSecret.labels) !== null && _b !== void 0 ? _b : undefined,
                    data,
                };
                this.kubernetesSecrets.push(kubernetesSecret);
            }
        });
    }
    /**
     * Create and apply the SecretProviderClass manifest
     * @param clusterInfo
     * @param serviceAccount
     * @param csiDriver
     */
    createSecretProviderClass(csiDriver) {
        const cluster = this.clusterInfo.cluster;
        const secretProviderClass = this.secretProviderClassName;
        const secretProviderClassManifest = cluster.addManifest(secretProviderClass, {
            apiVersion: 'secrets-store.csi.x-k8s.io/v1alpha1',
            kind: 'SecretProviderClass',
            metadata: {
                name: secretProviderClass,
                namespace: this.serviceAccount.serviceAccountNamespace
            },
            spec: {
                provider: 'aws',
                parameters: {
                    objects: JSON.stringify(this.parameterObjects),
                },
                secretObjects: this.kubernetesSecrets
            }
        });
        secretProviderClassManifest.node.addDependency(this.serviceAccount, csiDriver);
        new aws_cdk_lib_1.CfnOutput(cluster.stack, `${this.serviceAccount.serviceAccountName}-secret-provider-class `, {
            value: secretProviderClass
        });
        return secretProviderClassManifest;
    }
}
exports.SecretProviderClass = SecretProviderClass;
//# sourceMappingURL=data:application/json;base64,