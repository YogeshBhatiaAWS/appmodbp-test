"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerInsightsAddOn = void 0;
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const ts_deepmerge_1 = require("ts-deepmerge");
const helm_addon_1 = require("../helm-addon");
const utils_1 = require("../../utils");
const defaultProps = {
    name: "adot-exporter-for-eks-on-ec2",
    namespace: undefined,
    chart: "adot-exporter-for-eks-on-ec2",
    version: "0.15.0",
    release: "adot-eks-addon",
    repository: "https://aws-observability.github.io/aws-otel-helm-charts"
};
class ContainerInsightsAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
    }
    /**
     * @override
     */
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        const policy = aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('CloudWatchAgentServerPolicy');
        // Create an adot-collector service account.
        const serviceAccountName = "adot-collector-sa";
        let serviceAccountNamespace;
        if (this.props.namespace) {
            serviceAccountNamespace = this.props.namespace;
        }
        else {
            serviceAccountNamespace = "amazon-metrics";
        }
        const ns = (0, utils_1.createNamespace)(serviceAccountNamespace, cluster, true);
        const sa = cluster.addServiceAccount(serviceAccountName, {
            name: serviceAccountName,
            namespace: serviceAccountNamespace,
        });
        // Apply Managed IAM policy to the service account.
        sa.role.addManagedPolicy(policy);
        sa.node.addDependency(ns);
        let values = {
            awsRegion: cluster.stack.region,
            clusterName: cluster.clusterName,
            serviceAccount: {
                create: false,
            },
            adotCollector: {
                daemonSet: {
                    createNamespace: false,
                    service: {
                        metrics: {
                            receivers: ["awscontainerinsightreceiver"],
                            exporters: ["awsemf"],
                        }
                    },
                    serviceAccount: {
                        create: false,
                    },
                    cwexporters: {
                        logStreamName: "EKSNode",
                    }
                }
            }
        };
        values = (0, ts_deepmerge_1.default)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        const chart = this.addHelmChart(clusterInfo, values, true, false);
        chart.node.addDependency(sa);
        return Promise.resolve(chart);
    }
}
exports.ContainerInsightsAddOn = ContainerInsightsAddOn;
__decorate([
    (0, utils_1.conflictsWith)("AdotCollectorAddOn")
], ContainerInsightsAddOn.prototype, "deploy", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2NvbnRhaW5lci1pbnNpZ2h0cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxpREFBb0Q7QUFFcEQsK0NBQWlDO0FBRWpDLDhDQUE4RDtBQUU5RCx1Q0FBNkQ7QUFNN0QsTUFBTSxZQUFZLEdBQUc7SUFDakIsSUFBSSxFQUFFLDhCQUE4QjtJQUNwQyxTQUFTLEVBQUUsU0FBUztJQUNwQixLQUFLLEVBQUUsOEJBQThCO0lBQ3JDLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLE9BQU8sRUFBRSxnQkFBZ0I7SUFDekIsVUFBVSxFQUFFLDBEQUEwRDtDQUN6RSxDQUFDO0FBRUYsTUFBYSxzQkFBdUIsU0FBUSxzQkFBUztJQUVqRCxZQUFZLEtBQWtDO1FBQzFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsWUFBWSxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7O09BRUc7SUFFSCxNQUFNLENBQUMsV0FBd0I7O1FBQzNCLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUM7UUFDcEMsTUFBTSxNQUFNLEdBQUcsdUJBQWEsQ0FBQyx3QkFBd0IsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBRXJGLDRDQUE0QztRQUM1QyxNQUFNLGtCQUFrQixHQUFHLG1CQUFtQixDQUFDO1FBQy9DLElBQUksdUJBQXVCLENBQUM7UUFFNUIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUN0Qix1QkFBdUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztTQUNsRDthQUNJO1lBQ0QsdUJBQXVCLEdBQUcsZ0JBQWdCLENBQUM7U0FDOUM7UUFFRCxNQUFNLEVBQUUsR0FBRyxJQUFBLHVCQUFlLEVBQUMsdUJBQXVCLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25FLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsRUFBRTtZQUNyRCxJQUFJLEVBQUUsa0JBQWtCO1lBQ3hCLFNBQVMsRUFBRSx1QkFBdUI7U0FDckMsQ0FBQyxDQUFDO1FBRUgsbURBQW1EO1FBQ25ELEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFMUIsSUFBSSxNQUFNLEdBQWlCO1lBQ3ZCLFNBQVMsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU07WUFDL0IsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO1lBQ2hDLGNBQWMsRUFBRTtnQkFDWixNQUFNLEVBQUUsS0FBSzthQUNoQjtZQUNELGFBQWEsRUFBRTtnQkFDWCxTQUFTLEVBQUU7b0JBQ1AsZUFBZSxFQUFFLEtBQUs7b0JBQ3RCLE9BQU8sRUFBRTt3QkFDTCxPQUFPLEVBQUU7NEJBQ0wsU0FBUyxFQUFFLENBQUMsNkJBQTZCLENBQUM7NEJBQzFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQzt5QkFDeEI7cUJBQ0o7b0JBQ0QsY0FBYyxFQUFFO3dCQUNaLE1BQU0sRUFBRSxLQUFLO3FCQUNoQjtvQkFDRCxXQUFXLEVBQUU7d0JBQ1QsYUFBYSxFQUFFLFNBQVM7cUJBQzNCO2lCQUNKO2FBQ0o7U0FDSixDQUFDO1FBRUYsTUFBTSxHQUFHLElBQUEsc0JBQUssRUFBQyxNQUFNLEVBQUUsTUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sbUNBQUksRUFBRSxDQUFDLENBQUM7UUFFaEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsRSxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM3QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUNKO0FBbEVELHdEQWtFQztBQXhERztJQURDLElBQUEscUJBQWEsRUFBQyxvQkFBb0IsQ0FBQztvREF3RG5DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFuYWdlZFBvbGljeSB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtaWFtXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IG1lcmdlIGZyb20gXCJ0cy1kZWVwbWVyZ2VcIjtcbmltcG9ydCB7IENsdXN0ZXJJbmZvIH0gZnJvbSBcIi4uLy4uL3NwaVwiO1xuaW1wb3J0IHsgSGVsbUFkZE9uLCBIZWxtQWRkT25Vc2VyUHJvcHMgfSBmcm9tIFwiLi4vaGVsbS1hZGRvblwiO1xuaW1wb3J0IHsgVmFsdWVzU2NoZW1hIH0gZnJvbSBcIi4vdmFsdWVzXCI7XG5pbXBvcnQgeyBjb25mbGljdHNXaXRoLCBjcmVhdGVOYW1lc3BhY2UgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDb250YWluZXJJbnNpZ2h0QWRkb25Qcm9wcyBleHRlbmRzIE9taXQ8SGVsbUFkZE9uVXNlclByb3BzLCBcIm5hbWVzcGFjZVwiPiB7XG4gICAgdmFsdWVzPzogVmFsdWVzU2NoZW1hXG59XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgICBuYW1lOiBcImFkb3QtZXhwb3J0ZXItZm9yLWVrcy1vbi1lYzJcIixcbiAgICBuYW1lc3BhY2U6IHVuZGVmaW5lZCwgLy8gdGhlIGNoYXJ0IHdpbGwgY2hva2UgaWYgdGhpcyB2YWx1ZSBpcyBzZXRcbiAgICBjaGFydDogXCJhZG90LWV4cG9ydGVyLWZvci1la3Mtb24tZWMyXCIsXG4gICAgdmVyc2lvbjogXCIwLjE1LjBcIixcbiAgICByZWxlYXNlOiBcImFkb3QtZWtzLWFkZG9uXCIsXG4gICAgcmVwb3NpdG9yeTogXCJodHRwczovL2F3cy1vYnNlcnZhYmlsaXR5LmdpdGh1Yi5pby9hd3Mtb3RlbC1oZWxtLWNoYXJ0c1wiXG59O1xuXG5leHBvcnQgY2xhc3MgQ29udGFpbmVySW5zaWdodHNBZGRPbiBleHRlbmRzIEhlbG1BZGRPbiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcz86IENvbnRhaW5lckluc2lnaHRBZGRvblByb3BzKSB7XG4gICAgICAgIHN1cGVyKHsgLi4uZGVmYXVsdFByb3BzLCAuLi5wcm9wcyB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBAY29uZmxpY3RzV2l0aChcIkFkb3RDb2xsZWN0b3JBZGRPblwiKVxuICAgIGRlcGxveShjbHVzdGVySW5mbzogQ2x1c3RlckluZm8pOiBQcm9taXNlPENvbnN0cnVjdD4ge1xuICAgICAgICBjb25zdCBjbHVzdGVyID0gY2x1c3RlckluZm8uY2x1c3RlcjsgICAgICAgIFxuICAgICAgICBjb25zdCBwb2xpY3kgPSBNYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZSgnQ2xvdWRXYXRjaEFnZW50U2VydmVyUG9saWN5Jyk7XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhdGUgYW4gYWRvdC1jb2xsZWN0b3Igc2VydmljZSBhY2NvdW50LlxuICAgICAgICBjb25zdCBzZXJ2aWNlQWNjb3VudE5hbWUgPSBcImFkb3QtY29sbGVjdG9yLXNhXCI7XG4gICAgICAgIGxldCBzZXJ2aWNlQWNjb3VudE5hbWVzcGFjZTtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5uYW1lc3BhY2UpIHtcbiAgICAgICAgICAgIHNlcnZpY2VBY2NvdW50TmFtZXNwYWNlID0gdGhpcy5wcm9wcy5uYW1lc3BhY2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXJ2aWNlQWNjb3VudE5hbWVzcGFjZSA9IFwiYW1hem9uLW1ldHJpY3NcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5zID0gY3JlYXRlTmFtZXNwYWNlKHNlcnZpY2VBY2NvdW50TmFtZXNwYWNlLCBjbHVzdGVyLCB0cnVlKTtcbiAgICAgICAgY29uc3Qgc2EgPSBjbHVzdGVyLmFkZFNlcnZpY2VBY2NvdW50KHNlcnZpY2VBY2NvdW50TmFtZSwge1xuICAgICAgICAgICAgbmFtZTogc2VydmljZUFjY291bnROYW1lLFxuICAgICAgICAgICAgbmFtZXNwYWNlOiBzZXJ2aWNlQWNjb3VudE5hbWVzcGFjZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQXBwbHkgTWFuYWdlZCBJQU0gcG9saWN5IHRvIHRoZSBzZXJ2aWNlIGFjY291bnQuXG4gICAgICAgIHNhLnJvbGUuYWRkTWFuYWdlZFBvbGljeShwb2xpY3kpO1xuICAgICAgICBzYS5ub2RlLmFkZERlcGVuZGVuY3kobnMpO1xuXG4gICAgICAgIGxldCB2YWx1ZXM6IFZhbHVlc1NjaGVtYSA9IHtcbiAgICAgICAgICAgIGF3c1JlZ2lvbjogY2x1c3Rlci5zdGFjay5yZWdpb24sXG4gICAgICAgICAgICBjbHVzdGVyTmFtZTogY2x1c3Rlci5jbHVzdGVyTmFtZSxcbiAgICAgICAgICAgIHNlcnZpY2VBY2NvdW50OiB7XG4gICAgICAgICAgICAgICAgY3JlYXRlOiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhZG90Q29sbGVjdG9yOiB7XG4gICAgICAgICAgICAgICAgZGFlbW9uU2V0OiB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZU5hbWVzcGFjZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldHJpY3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlcnM6IFtcImF3c2NvbnRhaW5lcmluc2lnaHRyZWNlaXZlclwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRlcnM6IFtcImF3c2VtZlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZUFjY291bnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGN3ZXhwb3J0ZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dTdHJlYW1OYW1lOiBcIkVLU05vZGVcIixcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YWx1ZXMgPSBtZXJnZSh2YWx1ZXMsIHRoaXMucHJvcHMudmFsdWVzID8/IHt9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5hZGRIZWxtQ2hhcnQoY2x1c3RlckluZm8sIHZhbHVlcywgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICBjaGFydC5ub2RlLmFkZERlcGVuZGVuY3koc2EpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYXJ0KTtcbiAgICB9XG59Il19