"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IstioBaseAddOn = void 0;
const helm_addon_1 = require("../helm-addon");
const namespace_utils_1 = require("../../utils/namespace-utils");
const ts_deepmerge_1 = require("ts-deepmerge");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    name: "istio-base",
    release: "istio-base",
    namespace: "istio-system",
    chart: "base",
    version: "1.18.2",
    repository: "https://istio-release.storage.googleapis.com/charts"
};
class IstioBaseAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        // Istio Namespace
        const namespace = (0, namespace_utils_1.createNamespace)('istio-system', cluster);
        let values = {
            global: {
                istiod: {
                    enableAnalysis: this.options.enableAnalysis
                },
                configValidation: this.options.configValidation,
                externalIstiod: this.options.externalIstiod,
                base: {
                    enableIstioConfigCRDs: this.options.enableIstioConfigCRDs
                }
            }
        };
        values = (0, ts_deepmerge_1.default)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        const chart = this.addHelmChart(clusterInfo, values, undefined, true, aws_cdk_lib_1.Duration.seconds(60));
        chart.node.addDependency(namespace);
        return Promise.resolve(chart);
    }
}
exports.IstioBaseAddOn = IstioBaseAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2lzdGlvLWJhc2UvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThEO0FBRzlELGlFQUE4RDtBQUM5RCwrQ0FBaUM7QUFDakMsNkNBQXVDO0FBNEN2Qzs7R0FFRztBQUNILE1BQU0sWUFBWSxHQUFHO0lBQ2pCLElBQUksRUFBRSxZQUFZO0lBQ2xCLE9BQU8sRUFBRSxZQUFZO0lBQ3JCLFNBQVMsRUFBRSxjQUFjO0lBQ3pCLEtBQUssRUFBRSxNQUFNO0lBQ2IsT0FBTyxFQUFFLFFBQVE7SUFDakIsVUFBVSxFQUFFLHFEQUFxRDtDQUNwRSxDQUFDO0FBRUYsTUFBYSxjQUFlLFNBQVEsc0JBQVM7SUFJekMsWUFBWSxLQUEyQjtRQUNuQyxLQUFLLENBQUMsRUFBRSxHQUFHLFlBQVksRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFFRCxNQUFNLENBQUMsV0FBd0I7O1FBRTNCLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUM7UUFFcEMsa0JBQWtCO1FBQ2xCLE1BQU0sU0FBUyxHQUFHLElBQUEsaUNBQWUsRUFBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFM0QsSUFBSSxNQUFNLEdBQVc7WUFDakIsTUFBTSxFQUFFO2dCQUNKLE1BQU0sRUFBRTtvQkFDSixjQUFjLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjO2lCQUM5QztnQkFDRCxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQjtnQkFDL0MsY0FBYyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYztnQkFDM0MsSUFBSSxFQUFFO29CQUNGLHFCQUFxQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCO2lCQUM1RDthQUNKO1NBQ0osQ0FBQztRQUVGLE1BQU0sR0FBRyxJQUFBLHNCQUFLLEVBQUMsTUFBTSxFQUFFLE1BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLHNCQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUYsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFcEMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDSjtBQW5DRCx3Q0FtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIZWxtQWRkT24sIEhlbG1BZGRPblVzZXJQcm9wcyB9IGZyb20gXCIuLi9oZWxtLWFkZG9uXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgQ2x1c3RlckluZm8sIFZhbHVlcyB9IGZyb20gXCIuLi8uLi9zcGlcIjtcbmltcG9ydCB7IGNyZWF0ZU5hbWVzcGFjZSB9IGZyb20gXCIuLi8uLi91dGlscy9uYW1lc3BhY2UtdXRpbHNcIjtcbmltcG9ydCBtZXJnZSBmcm9tIFwidHMtZGVlcG1lcmdlXCI7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGFkZC1vbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJc3Rpb0Jhc2VBZGRPblByb3BzIGV4dGVuZHMgSGVsbUFkZE9uVXNlclByb3BzIHtcbiAgICAvKipcbiAgICAqIEVuYWJsZSBpc3Rpb2N0bCBhbmFseXNpcyB3aGljaCBwcm92aWRlcyByaWNoIGFuYWx5c2lzIG9mIElzdGlvIGNvbmZpZ3VyYXRpb24gc3RhdGUgaW4gb3JkZXIgdG8gaWRlbnRpdHkgaW52YWxpZCBvciBzdWJvcHRpbWFsIGNvbmZpZ3VyYXRpb25zLlxuICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAqL1xuICAgIGVuYWJsZUFuYWx5c2lzPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICogIEVuYWJsZSB0aGUgaXN0aW8gYmFzZSBjb25maWcgdmFsaWRhdGlvbi5cbiAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAqL1xuICAgIGNvbmZpZ1ZhbGlkYXRpb24/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgKiAgSWYgdGhpcyBpcyBzZXQgdG8gdHJ1ZSwgb25lIElzdGlvZCB3aWxsIGNvbnRyb2wgcmVtb3RlIGNsdXN0ZXJzIGluY2x1ZGluZyBDQS5cbiAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgKi9cbiAgICBleHRlcm5hbElzdGlvZD86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAqIFRoZSBhZGRyZXNzIG9yIGhvc3RuYW1lIG9mIHRoZSByZW1vdGUgcGlsb3RcbiAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAqL1xuICAgIHJlbW90ZVBpbG90QWRkcmVzcz86IHN0cmluZztcblxuICAgIC8qKlxuICAgICogVmFsaWRhdGlvbiB3ZWJob29rIGNvbmZpZ3VyYXRpb24gdXJsXG4gICAgKiBGb3IgZXhhbXBsZTogaHR0cHM6Ly8kcmVtb3RlUGlsb3RBZGRyZXNzOjE1MDE3L3ZhbGlkYXRlXG4gICAgKiBAZGVmYXVsdCBudWxsXG4gICAgKi9cbiAgICB2YWxpZGF0aW9uVVJMPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgKiBGb3IgaXN0aW9jdGwgdXNhZ2UgdG8gZGlzYWJsZSBpc3RpbyBjb25maWcgY3JkcyBpbiBiYXNlLlxuICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICovXG4gICAgZW5hYmxlSXN0aW9Db25maWdDUkRzPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBEZWZhdWx0cyBvcHRpb25zIGZvciB0aGUgYWRkLW9uXG4gKi9cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgICBuYW1lOiBcImlzdGlvLWJhc2VcIixcbiAgICByZWxlYXNlOiBcImlzdGlvLWJhc2VcIixcbiAgICBuYW1lc3BhY2U6IFwiaXN0aW8tc3lzdGVtXCIsXG4gICAgY2hhcnQ6IFwiYmFzZVwiLFxuICAgIHZlcnNpb246IFwiMS4xOC4yXCIsXG4gICAgcmVwb3NpdG9yeTogXCJodHRwczovL2lzdGlvLXJlbGVhc2Uuc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9jaGFydHNcIlxufTtcblxuZXhwb3J0IGNsYXNzIElzdGlvQmFzZUFkZE9uIGV4dGVuZHMgSGVsbUFkZE9uIHtcblxuICAgIHJlYWRvbmx5IG9wdGlvbnM6IElzdGlvQmFzZUFkZE9uUHJvcHM7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcz86IElzdGlvQmFzZUFkZE9uUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoeyAuLi5kZWZhdWx0UHJvcHMsIC4uLnByb3BzIH0pO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnByb3BzO1xuICAgIH1cblxuICAgIGRlcGxveShjbHVzdGVySW5mbzogQ2x1c3RlckluZm8pOiBQcm9taXNlPENvbnN0cnVjdD4ge1xuXG4gICAgICAgIGNvbnN0IGNsdXN0ZXIgPSBjbHVzdGVySW5mby5jbHVzdGVyO1xuXG4gICAgICAgIC8vIElzdGlvIE5hbWVzcGFjZVxuICAgICAgICBjb25zdCBuYW1lc3BhY2UgPSBjcmVhdGVOYW1lc3BhY2UoJ2lzdGlvLXN5c3RlbScsIGNsdXN0ZXIpO1xuXG4gICAgICAgIGxldCB2YWx1ZXM6IFZhbHVlcyA9IHtcbiAgICAgICAgICAgIGdsb2JhbDoge1xuICAgICAgICAgICAgICAgIGlzdGlvZDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVBbmFseXNpczogdGhpcy5vcHRpb25zLmVuYWJsZUFuYWx5c2lzXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb25maWdWYWxpZGF0aW9uOiB0aGlzLm9wdGlvbnMuY29uZmlnVmFsaWRhdGlvbixcbiAgICAgICAgICAgICAgICBleHRlcm5hbElzdGlvZDogdGhpcy5vcHRpb25zLmV4dGVybmFsSXN0aW9kLFxuICAgICAgICAgICAgICAgIGJhc2U6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlSXN0aW9Db25maWdDUkRzOiB0aGlzLm9wdGlvbnMuZW5hYmxlSXN0aW9Db25maWdDUkRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhbHVlcyA9IG1lcmdlKHZhbHVlcywgdGhpcy5wcm9wcy52YWx1ZXMgPz8ge30pO1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuYWRkSGVsbUNoYXJ0KGNsdXN0ZXJJbmZvLCB2YWx1ZXMsIHVuZGVmaW5lZCwgdHJ1ZSwgRHVyYXRpb24uc2Vjb25kcyg2MCkpO1xuICAgICAgICBjaGFydC5ub2RlLmFkZERlcGVuZGVuY3kobmFtZXNwYWNlKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYXJ0KTtcbiAgICB9XG59XG4iXX0=