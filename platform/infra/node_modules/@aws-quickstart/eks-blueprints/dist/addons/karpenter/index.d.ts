import { Construct } from "constructs";
import { ClusterInfo, Values, Taint } from '../../spi';
import { HelmAddOn, HelmAddOnUserProps } from '../helm-addon';
/**
 * Configuration options for the add-on
 */
interface KarpenterAddOnProps extends HelmAddOnUserProps {
    /**
     * Taints for the provisioned nodes - Taints may prevent pods from scheduling if they are not tolerated by the pod.
     */
    taints?: Taint[];
    /**
     * Provisioned nodes will have these taints, but pods do not need to tolerate these taints to be provisioned by this\
     * provisioner. These taints are expected to be temporary and some other entity (e.g. a DaemonSet) is responsible for
     * removing the taint after it has finished initializing the node.
     */
    startupTaints?: Taint[];
    /**
     * Labels applied to all nodes
     */
    labels?: Values;
    /**
     * Annotations applied to all nodes
     */
    annotations?: Values;
    /**
     * Requirement properties for a Provisioner (Optional) - If not provided, the add-on will
     * deploy a Provisioner with default values.
     */
    requirements?: {
        key: string;
        op: 'In' | 'NotIn';
        vals: string[];
    }[];
    /**
     * Tags needed for subnets - Subnet tags and security group tags are required for the provisioner to be created
     */
    subnetTags?: Values;
    /**
     * Tags needed for security groups - Subnet tags and security group tags are required for the provisioner to be created
     */
    securityGroupTags?: Values;
    /**
     * AMI Family: If provided, Karpenter will automatically query the appropriate EKS optimized AMI via AWS Systems Manager
     */
    amiFamily?: "AL2" | "Bottlerocket" | "Ubuntu";
    /**
     * AMI Selector
     */
    amiSelector?: Values;
    /**
     * Enables consolidation which attempts to reduce cluster cost by both removing un-needed nodes and down-sizing those that can't be removed.
     * Mutually exclusive with the ttlSecondsAfterEmpty parameter.
     * Only applicable for v0.15.0 or later.
     */
    consolidation?: {
        enabled: boolean;
    };
    /**
     * If omitted, the feature is disabled and nodes will never expire.
     * If set to less time than it requires for a node to become ready,
     * the node may expire before any pods successfully start.
     */
    ttlSecondsUntilExpired?: number;
    /**
     * How many seconds Karpenter will wailt until it deletes empty/unnecessary instances (in seconds).
     * Mutually exclusive with the consolidation parameter.
     */
    ttlSecondsAfterEmpty?: number;
    /**
     * Priority given to the provisioner when the scheduler considers which provisioner
     * to select. Higher weights indicate higher priority when comparing provisioners.
     */
    weight?: number;
    /**
     * Flag for enabling Karpenter's native interruption handling
     * Only applicable for v0.19.0 and later
     */
    interruptionHandling?: boolean;
    /**
     * Limits define a set of bounds for provisioning capacity.
     * Resource limits constrain the total size of the cluster.
     * Limits prevent Karpenter from creating new instances once the limit is exceeded.
     */
    limits?: {
        resources?: {
            cpu?: number;
            memory?: string;
            /**
             * Extended resources are fully-qualified resource names outside the kubernetes.io domain.
             * They allow cluster operators to advertise and users to consume the non-Kubernetes-built-in
             * resources such as hardware devices GPUs, RDMAs, SR-IOVs...
             * e.g nvidia.com/gpu, amd.com/gpu, etc...
             */
            [k: string]: unknown;
        };
    };
    /**
     * Tags adds tags to all resources created, including EC2 Instances, EBS volumes and Launch Templates.
     * Karpenter allows overrides of the default "Name" tag but does not allow overrides to restricted domains
     * (such as "karpenter.sh", "karpenter.k8s.aws", and "kubernetes.io/cluster").
     * This ensures that Karpenter is able to correctly auto-discover machines that it owns.
     */
    tags?: Values;
}
/**
 * Implementation of the Karpenter add-on
 */
export declare class KarpenterAddOn extends HelmAddOn {
    readonly options: KarpenterAddOnProps;
    constructor(props?: KarpenterAddOnProps);
    deploy(clusterInfo: ClusterInfo): Promise<Construct>;
    /**
     * Helper function to convert a key-pair values (with an operator)
     * of spec configurations to appropriate json format for addManifest function
     * @param reqs
     * @returns newReqs
     * */
    protected convert(reqs: {
        key: string;
        op: string;
        vals: string[];
    }[]): any[];
    /**
     * Helper function to ensure right features are added as part of the configuration
     * for the right version of the add-on
     * @param version version of the add-on
     * @param weight weight setting
     * @param consol consolidation setting
     * @param repo repository url of the helm chart
     * @param ttlSecondsAfterEmpty ttlSecondsAfterEmpty setting
     * @returns consolidation
     */
    private versionFeatureChecksForError;
    /**
     * Helper function to set up the Karpenter Node Role and Instance Profile
     * Outputs to CloudFormation and map the role to the aws-auth ConfigMap
     * @param cluster EKS Cluster
     * @param stackName Name of the stack
     * @param region Region of the stack
     * @returns [karpenterNodeRole, karpenterInstanceProfile]
     */
    private setUpNodeRole;
}
export {};
