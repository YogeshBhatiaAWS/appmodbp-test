"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KarpenterAddOn = void 0;
const iam = require("aws-cdk-lib/aws-iam");
const ts_deepmerge_1 = require("ts-deepmerge");
const utils_1 = require("../../utils");
const helm_addon_1 = require("../helm-addon");
const iam_1 = require("./iam");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const md5 = require("ts-md5");
const semver = require("semver");
const assert = require("assert");
const sqs = require("aws-cdk-lib/aws-sqs");
const aws_events_1 = require("aws-cdk-lib/aws-events");
const aws_events_targets_1 = require("aws-cdk-lib/aws-events-targets");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const KARPENTER = 'karpenter';
const RELEASE = 'blueprints-addon-karpenter';
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    name: KARPENTER,
    namespace: KARPENTER,
    version: 'v0.29.2',
    chart: KARPENTER,
    release: KARPENTER,
    repository: 'oci://public.ecr.aws/karpenter/karpenter',
};
/**
 * Implementation of the Karpenter add-on
 */
class KarpenterAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a, _b, _c;
        assert(clusterInfo.cluster instanceof aws_eks_1.Cluster, "KarpenterAddOn cannot be used with imported clusters as it requires changes to the cluster authentication.");
        const cluster = clusterInfo.cluster;
        const endpoint = cluster.clusterEndpoint;
        const name = cluster.clusterName;
        const stackName = cluster.stack.stackName;
        const region = cluster.stack.region;
        let values = (_a = this.options.values) !== null && _a !== void 0 ? _a : {};
        const version = this.options.version;
        const requirements = this.options.requirements || [];
        const subnetTags = this.options.subnetTags || {};
        const sgTags = this.options.securityGroupTags || {};
        const taints = this.options.taints || [];
        const startupTaints = this.options.startupTaints || [];
        const labels = this.options.labels || {};
        const annotations = this.options.annotations || {};
        const amiFamily = this.options.amiFamily;
        const amiSelector = this.options.amiSelector;
        const ttlSecondsAfterEmpty = this.options.ttlSecondsAfterEmpty || null;
        const ttlSecondsUntilExpired = this.options.ttlSecondsUntilExpired || null;
        const weight = this.options.weight || null;
        const consol = this.options.consolidation || null;
        const repo = this.options.repository;
        const interruption = this.options.interruptionHandling || false;
        const limits = this.options.limits || null;
        const tags = this.options.tags || null;
        // Various checks for version errors
        const consolidation = this.versionFeatureChecksForError(clusterInfo, version, weight, consol, repo, ttlSecondsAfterEmpty, interruption);
        // Set up the node role and instance profile
        const [karpenterNodeRole, karpenterInstanceProfile] = this.setUpNodeRole(cluster, stackName, region);
        // Create the controller policy
        const karpenterPolicyDocument = iam.PolicyDocument.fromJson(iam_1.KarpenterControllerPolicy);
        karpenterPolicyDocument.addStatements(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                "iam:PassRole",
            ],
            resources: [`${karpenterNodeRole.roleArn}`]
        }));
        // Support for Native spot interruption only available on v0.19.0 or later
        if (semver.gte(version, 'v0.19.0') && interruption) {
            // Create Interruption Queue
            const queue = new sqs.Queue(cluster.stack, 'karpenter-queue', {
                queueName: stackName,
                retentionPeriod: aws_cdk_lib_1.Duration.seconds(300),
            });
            queue.addToResourcePolicy(new iam.PolicyStatement({
                sid: 'EC2InterruptionPolicy',
                effect: iam.Effect.ALLOW,
                principals: [
                    new iam.ServicePrincipal('sqs.amazonaws.com'),
                    new iam.ServicePrincipal('events.amazonaws.com'),
                ],
                actions: [
                    "sqs:SendMessage"
                ],
                resources: [`${queue.queueArn}`]
            }));
            // Add Interruption Rules
            new aws_events_1.Rule(cluster.stack, 'schedule-change-rule', {
                eventPattern: {
                    source: ["aws.health"],
                    detailType: ['AWS Health Event']
                },
            }).addTarget(new aws_events_targets_1.SqsQueue(queue));
            new aws_events_1.Rule(cluster.stack, 'spot-interruption-rule', {
                eventPattern: {
                    source: ["aws.ec2"],
                    detailType: ['EC2 Spot Instance Interruption Warning']
                },
            }).addTarget(new aws_events_targets_1.SqsQueue(queue));
            new aws_events_1.Rule(cluster.stack, 'rebalance-rule', {
                eventPattern: {
                    source: ["aws.ec2"],
                    detailType: ['EC2 Instance Rebalance Recommendation']
                },
            }).addTarget(new aws_events_targets_1.SqsQueue(queue));
            new aws_events_1.Rule(cluster.stack, 'inst-state-change-rule', {
                eventPattern: {
                    source: ["aws.ec2"],
                    detailType: ['C2 Instance State-change Notification']
                },
            }).addTarget(new aws_events_targets_1.SqsQueue(queue));
            // Add policy to the node role to allow access to the Interruption Queue
            const interruptionQueueStatement = new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                actions: [
                    "sqs:DeleteMessage",
                    "sqs:GetQueueUrl",
                    "sqs:GetQueueAttributes",
                    "sqs:ReceiveMessage"
                ],
                resources: [`${queue.queueArn}`]
            });
            karpenterPolicyDocument.addStatements(interruptionQueueStatement);
        }
        // Create Namespace
        const ns = (0, utils_1.createNamespace)(KARPENTER, cluster, true, true);
        const sa = (0, utils_1.createServiceAccount)(cluster, RELEASE, KARPENTER, karpenterPolicyDocument);
        sa.node.addDependency(ns);
        // Add helm chart
        if (semver.gte(this.options.version, '0.19.0')) {
            const awsSettings = {
                clusterEndpoint: endpoint,
                clusterName: name,
                defaultInstanceProfile: karpenterInstanceProfile.instanceProfileName,
                interruptionQueueName: interruption ? stackName : "",
            };
            (0, utils_1.setPath)(values, "settings.aws", (0, ts_deepmerge_1.default)(awsSettings, (_c = (_b = values === null || values === void 0 ? void 0 : values.settings) === null || _b === void 0 ? void 0 : _b.aws) !== null && _c !== void 0 ? _c : {}));
        }
        else {
            (0, utils_1.setPath)(values, "clusterEndpoint", endpoint);
            (0, utils_1.setPath)(values, "clusterName", name);
            (0, utils_1.setPath)(values, "aws.defaultInstanceProfile", karpenterInstanceProfile.instanceProfileName);
        }
        const saValues = {
            serviceAccount: {
                create: false,
                name: RELEASE,
                annotations: {
                    "eks.amazonaws.com/role-arn": sa.role.roleArn,
                }
            }
        };
        values = (0, ts_deepmerge_1.default)(values, saValues);
        const karpenterChart = this.addHelmChart(clusterInfo, values, false, true);
        karpenterChart.node.addDependency(ns);
        // (Optional) default provisioner
        if ((Object.keys(subnetTags).length > 0) && (Object.keys(sgTags).length > 0)) {
            const provisioner = cluster.addManifest('default-provisioner', {
                apiVersion: 'karpenter.sh/v1alpha5',
                kind: 'Provisioner',
                metadata: { name: 'default' },
                spec: {
                    providerRef: {
                        name: "default"
                    },
                    taints: taints,
                    startupTaints: startupTaints,
                    labels: labels,
                    annotations: annotations,
                    requirements: this.convert(requirements),
                    limits: limits,
                    consolidation: consolidation,
                    ttlSecondsUntilExpired: ttlSecondsUntilExpired,
                    ttlSecondsAfterEmpty: ttlSecondsAfterEmpty,
                    weight: weight,
                },
            });
            provisioner.node.addDependency(karpenterChart);
            const nodeTemplate = cluster.addManifest('default-node-template', {
                apiVersion: "karpenter.k8s.aws/v1alpha1",
                kind: "AWSNodeTemplate",
                metadata: {
                    name: "default"
                },
                spec: {
                    amiFamily: amiFamily,
                    amiSelector: amiSelector,
                    subnetSelector: subnetTags,
                    securityGroupSelector: sgTags,
                    tags: tags,
                },
            });
            nodeTemplate.node.addDependency(provisioner);
        }
        return Promise.resolve(karpenterChart);
    }
    /**
     * Helper function to convert a key-pair values (with an operator)
     * of spec configurations to appropriate json format for addManifest function
     * @param reqs
     * @returns newReqs
     * */
    convert(reqs) {
        const newReqs = [];
        for (let req of reqs) {
            const key = req['key'];
            const op = req['op'];
            const val = req['vals'];
            const requirement = {
                "key": key,
                "operator": op,
                "values": val
            };
            newReqs.push(requirement);
        }
        return newReqs;
    }
    /**
     * Helper function to ensure right features are added as part of the configuration
     * for the right version of the add-on
     * @param version version of the add-on
     * @param weight weight setting
     * @param consol consolidation setting
     * @param repo repository url of the helm chart
     * @param ttlSecondsAfterEmpty ttlSecondsAfterEmpty setting
     * @returns consolidation
     */
    versionFeatureChecksForError(clusterInfo, version, weight, consol, repo, ttlSecondsAfterEmpty, interruption) {
        // Consolidation only available with v0.15.0 and later
        let consolidation;
        if (semver.lt(version, '0.15.0')) {
            assert(!consol, 'The prop consolidation is only supported on versions v0.15.0 and later.');
        }
        else {
            consolidation = consol || { enabled: false };
            // You cannot enable consolidation and ttlSecondsAfterEmpty values
            assert(!(consolidation.enabled && ttlSecondsAfterEmpty), 'Consolidation and ttlSecondsAfterEmpty must be mutually exclusive.');
        }
        // Weight only available with v0.16.0 and later
        if (semver.lt(version, '0.16.0')) {
            assert(!weight, 'The prop weight is only supported on versions v0.16.0 and later.');
        }
        // Registry changes with v0.17.0 and later
        if (semver.gte(version, '0.17.0')) {
            assert(repo === 'oci://public.ecr.aws/karpenter/karpenter', 'Please provide the OCI repository.');
        }
        else {
            assert(repo === 'https://charts.karpenter.sh', 'Please provide the older Karpenter repository url.');
        }
        // Interruption handling only available with v0.19.0 and later
        // Conversely, we should block Node Termination Handler usage once Karpenter is leveraged
        if (semver.lt(version, '0.19.0')) {
            assert(!interruption, 'Interruption handling is only supported on versions v0.19.0 and later.');
        }
        else {
            assert(!clusterInfo.getProvisionedAddOn('AwsNodeTerminationHandlerAddOn'), 'Karpenter supports native interruption handling, so Node Termination Handler will not be necessary.');
        }
        return consolidation;
    }
    /**
     * Helper function to set up the Karpenter Node Role and Instance Profile
     * Outputs to CloudFormation and map the role to the aws-auth ConfigMap
     * @param cluster EKS Cluster
     * @param stackName Name of the stack
     * @param region Region of the stack
     * @returns [karpenterNodeRole, karpenterInstanceProfile]
     */
    setUpNodeRole(cluster, stackName, region) {
        // Set up Node Role
        const karpenterNodeRole = new iam.Role(cluster, 'karpenter-node-role', {
            assumedBy: new iam.ServicePrincipal(`ec2.${cluster.stack.urlSuffix}`),
            managedPolicies: [
                iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEKSWorkerNodePolicy"),
                iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEKS_CNI_Policy"),
                iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEC2ContainerRegistryReadOnly"),
                iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonSSMManagedInstanceCore"),
            ],
            //roleName: `KarpenterNodeRole-${name}` // let role name to be generated as unique
        });
        // Set up Instance Profile
        const instanceProfileName = md5.Md5.hashStr(stackName + region);
        const karpenterInstanceProfile = new iam.CfnInstanceProfile(cluster, 'karpenter-instance-profile', {
            roles: [karpenterNodeRole.roleName],
            instanceProfileName: `KarpenterNodeInstanceProfile-${instanceProfileName}`,
            path: '/'
        });
        const clusterId = aws_cdk_lib_1.Names.uniqueId(cluster);
        //Cfn output for Node Role in case of needing to add additional policies
        new aws_cdk_lib_1.CfnOutput(cluster.stack, 'Karpenter Instance Node Role', {
            value: karpenterNodeRole.roleName,
            description: "Karpenter add-on Node Role name",
            exportName: clusterId + "KarpenterNodeRoleName",
        });
        //Cfn output for Instance Profile for creating additional provisioners
        new aws_cdk_lib_1.CfnOutput(cluster.stack, 'Karpenter Instance Profile name', {
            value: karpenterInstanceProfile ? karpenterInstanceProfile.instanceProfileName : "none",
            description: "Karpenter add-on Instance Profile name",
            exportName: clusterId + "KarpenterInstanceProfileName",
        });
        // Map Node Role to aws-auth
        cluster.awsAuth.addRoleMapping(karpenterNodeRole, {
            groups: ['system:bootstrapper', 'system:nodes'],
            username: 'system:node:{{EC2PrivateDNSName}}'
        });
        return [karpenterNodeRole, karpenterInstanceProfile];
    }
}
exports.KarpenterAddOn = KarpenterAddOn;
__decorate([
    (0, utils_1.conflictsWith)('ClusterAutoScalerAddOn')
], KarpenterAddOn.prototype, "deploy", null);
//# sourceMappingURL=data:application/json;base64,