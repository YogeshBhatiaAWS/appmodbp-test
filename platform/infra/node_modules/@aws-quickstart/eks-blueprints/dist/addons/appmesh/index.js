"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppMeshAddOn = void 0;
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const ts_deepmerge_1 = require("ts-deepmerge");
const cluster_providers_1 = require("../../cluster-providers");
const namespace_utils_1 = require("../../utils/namespace-utils");
const helm_addon_1 = require("../helm-addon");
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    enableTracing: false,
    tracingProvider: "x-ray",
    name: "appmesh-controller",
    namespace: "appmesh-system",
    chart: "appmesh-controller",
    version: "1.12.2",
    release: "appmesh-release",
    repository: "https://aws.github.io/eks-charts"
};
class AppMeshAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        // App Mesh service account.
        const opts = { name: 'appmesh-controller', namespace: "appmesh-system" };
        const sa = cluster.addServiceAccount('appmesh-controller', opts);
        // Cloud Map Full Access policy.
        const cloudMapPolicy = aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName("AWSCloudMapFullAccess");
        sa.role.addManagedPolicy(cloudMapPolicy);
        // App Mesh Full Access policy.
        const appMeshPolicy = aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName("AWSAppMeshFullAccess");
        sa.role.addManagedPolicy(appMeshPolicy);
        if (this.options.enableTracing && this.options.tracingProvider === "x-ray") {
            const xrayPolicy = aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName("AWSXRayDaemonWriteAccess");
            const nodeGroups = (0, cluster_providers_1.assertEC2NodeGroup)(clusterInfo, "App Mesh X-Ray integration");
            nodeGroups.forEach(ng => ng.role.addManagedPolicy(xrayPolicy));
        }
        // App Mesh Namespace
        const namespace = (0, namespace_utils_1.createNamespace)('appmesh-system', cluster);
        sa.node.addDependency(namespace);
        let values = {
            region: cluster.stack.region,
            serviceAccount: {
                create: false,
                name: 'appmesh-controller'
            },
            tracing: {
                enabled: this.options.enableTracing,
                provider: this.options.tracingProvider,
                address: this.options.tracingAddress,
                port: this.options.tracingPort
            }
        };
        values = (0, ts_deepmerge_1.default)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        const chart = this.addHelmChart(clusterInfo, values);
        chart.node.addDependency(sa);
        return Promise.resolve(chart);
    }
}
exports.AppMeshAddOn = AppMeshAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2FwcG1lc2gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaURBQW9EO0FBRXBELCtDQUFpQztBQUNqQywrREFBNkQ7QUFFN0QsaUVBQThEO0FBQzlELDhDQUE4RDtBQStCOUQ7O0dBRUc7QUFDSCxNQUFNLFlBQVksR0FBRztJQUNqQixhQUFhLEVBQUUsS0FBSztJQUNwQixlQUFlLEVBQUUsT0FBTztJQUN4QixJQUFJLEVBQUUsb0JBQW9CO0lBQzFCLFNBQVMsRUFBRSxnQkFBZ0I7SUFDM0IsS0FBSyxFQUFFLG9CQUFvQjtJQUMzQixPQUFPLEVBQUUsUUFBUTtJQUNqQixPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFVBQVUsRUFBRSxrQ0FBa0M7Q0FDakQsQ0FBQztBQUVGLE1BQWEsWUFBYSxTQUFRLHNCQUFTO0lBSXZDLFlBQVksS0FBeUI7UUFDakMsS0FBSyxDQUFDLEVBQUUsR0FBRyxZQUFZLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBRVEsTUFBTSxDQUFDLFdBQXdCOztRQUVwQyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO1FBRXBDLDRCQUE0QjtRQUM1QixNQUFNLElBQUksR0FBRyxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztRQUN6RSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFakUsZ0NBQWdDO1FBQ2hDLE1BQU0sY0FBYyxHQUFHLHVCQUFhLENBQUMsd0JBQXdCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUN2RixFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXpDLCtCQUErQjtRQUMvQixNQUFNLGFBQWEsR0FBRyx1QkFBYSxDQUFDLHdCQUF3QixDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDckYsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV4QyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxLQUFLLE9BQU8sRUFBRTtZQUN4RSxNQUFNLFVBQVUsR0FBRyx1QkFBYSxDQUFDLHdCQUF3QixDQUFDLDBCQUEwQixDQUFDLENBQUM7WUFDdEYsTUFBTSxVQUFVLEdBQUcsSUFBQSxzQ0FBa0IsRUFBQyxXQUFXLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztZQUNqRixVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1NBQ2xFO1FBRUQscUJBQXFCO1FBQ3JCLE1BQU0sU0FBUyxHQUFHLElBQUEsaUNBQWUsRUFBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM3RCxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVqQyxJQUFJLE1BQU0sR0FBVztZQUNqQixNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNO1lBQzVCLGNBQWMsRUFBRTtnQkFDWixNQUFNLEVBQUUsS0FBSztnQkFDYixJQUFJLEVBQUUsb0JBQW9CO2FBQzdCO1lBQ0QsT0FBTyxFQUFFO2dCQUNMLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7Z0JBQ25DLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWU7Z0JBQ3RDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWM7Z0JBQ3BDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7YUFDakM7U0FDSixDQUFDO1FBRUYsTUFBTSxHQUFHLElBQUEsc0JBQUssRUFBQyxNQUFNLEVBQUUsTUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sbUNBQUksRUFBRSxDQUFDLENBQUM7UUFFaEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDckQsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0IsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDSjtBQXZERCxvQ0F1REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYW5hZ2VkUG9saWN5IH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1pYW1cIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgbWVyZ2UgZnJvbSBcInRzLWRlZXBtZXJnZVwiO1xuaW1wb3J0IHsgYXNzZXJ0RUMyTm9kZUdyb3VwIH0gZnJvbSBcIi4uLy4uL2NsdXN0ZXItcHJvdmlkZXJzXCI7XG5pbXBvcnQgeyBDbHVzdGVySW5mbywgVmFsdWVzIH0gZnJvbSBcIi4uLy4uL3NwaVwiO1xuaW1wb3J0IHsgY3JlYXRlTmFtZXNwYWNlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL25hbWVzcGFjZS11dGlsc1wiO1xuaW1wb3J0IHsgSGVsbUFkZE9uLCBIZWxtQWRkT25Vc2VyUHJvcHMgfSBmcm9tIFwiLi4vaGVsbS1hZGRvblwiO1xuXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgYWRkLW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwcE1lc2hBZGRPblByb3BzIGV4dGVuZHMgSGVsbUFkZE9uVXNlclByb3BzIHtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gdHJ1ZSwgd2lsbCBlbmFibGUgdHJhY2luZyB0aHJvdWdoIEFwcCBNZXNoIHNpZGVjYXJzLCBzdWNoIGFzIFgtUmF5IGRpc3RyaWJ1dGVkIHRyYWNpbmcuXG4gICAgICogTm90ZTogc3VwcG9ydCBmb3IgWC1SYXkgdHJhY2luZyBkb2VzIG5vdCBkZXBlbmQgb24gdGhlIFhSYXkgRGFlbW9uIEFkZE9uIGluc3RhbGxlZC5cbiAgICAgKi9cbiAgICBlbmFibGVUcmFjaW5nPzogYm9vbGVhbixcblxuICAgIC8qKlxuICAgICAqIFRyYWNpbmcgcHJvdmlkZXIuIFN1cHBvcnRlZCB2YWx1ZXMgYXJlIHgtcmF5LCBqYWVnZXIsIGRhdGFkb2dcbiAgICAgKi9cbiAgICB0cmFjaW5nUHJvdmlkZXI/OiBcIngtcmF5XCIgfCBcImphZWdlclwiIHwgXCJkYXRhZG9nXCJcblxuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIERhdGFkb2cgb3IgSmFlZ2VyIHRyYWNpbmcuIEV4YW1wbGUgdmFsdWVzOiBkYXRhZG9nLmFwcG1lc2gtc3lzdGVtLiBcbiAgICAgKiBSZWZlciB0byBodHRwczovL2F3cy5naXRodWIuaW8vYXdzLWFwcC1tZXNoLWNvbnRyb2xsZXItZm9yLWs4cy9ndWlkZS90cmFjaW5nLyBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKiBJZ25vcmVkIGZvciBYLVJheS5cbiAgICAgKi9cbiAgICB0cmFjaW5nQWRkcmVzcz86IHN0cmluZyxcblxuICAgIC8qKlxuICAgICAqIEphZWdlciBvciBEYXRhZG9nIGFnZW50IHBvcnQgKGlnbm9yZWQgZm9yIFgtUmF5KVxuICAgICAqL1xuICAgIHRyYWNpbmdQb3J0Pzogc3RyaW5nXG59XG5cbi8qKlxuICogRGVmYXVsdHMgb3B0aW9ucyBmb3IgdGhlIGFkZC1vblxuICovXG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gICAgZW5hYmxlVHJhY2luZzogZmFsc2UsXG4gICAgdHJhY2luZ1Byb3ZpZGVyOiBcIngtcmF5XCIsXG4gICAgbmFtZTogXCJhcHBtZXNoLWNvbnRyb2xsZXJcIixcbiAgICBuYW1lc3BhY2U6IFwiYXBwbWVzaC1zeXN0ZW1cIixcbiAgICBjaGFydDogXCJhcHBtZXNoLWNvbnRyb2xsZXJcIixcbiAgICB2ZXJzaW9uOiBcIjEuMTIuMlwiLFxuICAgIHJlbGVhc2U6IFwiYXBwbWVzaC1yZWxlYXNlXCIsXG4gICAgcmVwb3NpdG9yeTogXCJodHRwczovL2F3cy5naXRodWIuaW8vZWtzLWNoYXJ0c1wiXG59O1xuXG5leHBvcnQgY2xhc3MgQXBwTWVzaEFkZE9uIGV4dGVuZHMgSGVsbUFkZE9uIHtcblxuICAgIHJlYWRvbmx5IG9wdGlvbnM6IEFwcE1lc2hBZGRPblByb3BzO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBBcHBNZXNoQWRkT25Qcm9wcykge1xuICAgICAgICBzdXBlcih7IC4uLmRlZmF1bHRQcm9wcywgLi4ucHJvcHMgfSk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMucHJvcHM7XG4gICAgfVxuXG4gICAgb3ZlcnJpZGUgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IFByb21pc2U8Q29uc3RydWN0PiB7XG5cbiAgICAgICAgY29uc3QgY2x1c3RlciA9IGNsdXN0ZXJJbmZvLmNsdXN0ZXI7XG5cbiAgICAgICAgLy8gQXBwIE1lc2ggc2VydmljZSBhY2NvdW50LlxuICAgICAgICBjb25zdCBvcHRzID0geyBuYW1lOiAnYXBwbWVzaC1jb250cm9sbGVyJywgbmFtZXNwYWNlOiBcImFwcG1lc2gtc3lzdGVtXCIgfTtcbiAgICAgICAgY29uc3Qgc2EgPSBjbHVzdGVyLmFkZFNlcnZpY2VBY2NvdW50KCdhcHBtZXNoLWNvbnRyb2xsZXInLCBvcHRzKTtcblxuICAgICAgICAvLyBDbG91ZCBNYXAgRnVsbCBBY2Nlc3MgcG9saWN5LlxuICAgICAgICBjb25zdCBjbG91ZE1hcFBvbGljeSA9IE1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKFwiQVdTQ2xvdWRNYXBGdWxsQWNjZXNzXCIpO1xuICAgICAgICBzYS5yb2xlLmFkZE1hbmFnZWRQb2xpY3koY2xvdWRNYXBQb2xpY3kpO1xuXG4gICAgICAgIC8vIEFwcCBNZXNoIEZ1bGwgQWNjZXNzIHBvbGljeS5cbiAgICAgICAgY29uc3QgYXBwTWVzaFBvbGljeSA9IE1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKFwiQVdTQXBwTWVzaEZ1bGxBY2Nlc3NcIik7XG4gICAgICAgIHNhLnJvbGUuYWRkTWFuYWdlZFBvbGljeShhcHBNZXNoUG9saWN5KTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmVuYWJsZVRyYWNpbmcgJiYgdGhpcy5vcHRpb25zLnRyYWNpbmdQcm92aWRlciA9PT0gXCJ4LXJheVwiKSB7XG4gICAgICAgICAgICBjb25zdCB4cmF5UG9saWN5ID0gTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoXCJBV1NYUmF5RGFlbW9uV3JpdGVBY2Nlc3NcIik7XG4gICAgICAgICAgICBjb25zdCBub2RlR3JvdXBzID0gYXNzZXJ0RUMyTm9kZUdyb3VwKGNsdXN0ZXJJbmZvLCBcIkFwcCBNZXNoIFgtUmF5IGludGVncmF0aW9uXCIpO1xuICAgICAgICAgICAgbm9kZUdyb3Vwcy5mb3JFYWNoKG5nID0+IG5nLnJvbGUuYWRkTWFuYWdlZFBvbGljeSh4cmF5UG9saWN5KSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBcHAgTWVzaCBOYW1lc3BhY2VcbiAgICAgICAgY29uc3QgbmFtZXNwYWNlID0gY3JlYXRlTmFtZXNwYWNlKCdhcHBtZXNoLXN5c3RlbScsIGNsdXN0ZXIpO1xuICAgICAgICBzYS5ub2RlLmFkZERlcGVuZGVuY3kobmFtZXNwYWNlKTtcblxuICAgICAgICBsZXQgdmFsdWVzOiBWYWx1ZXMgPSB7XG4gICAgICAgICAgICByZWdpb246IGNsdXN0ZXIuc3RhY2sucmVnaW9uLFxuICAgICAgICAgICAgc2VydmljZUFjY291bnQ6IHtcbiAgICAgICAgICAgICAgICBjcmVhdGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdhcHBtZXNoLWNvbnRyb2xsZXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJhY2luZzoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRoaXMub3B0aW9ucy5lbmFibGVUcmFjaW5nLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyOiB0aGlzLm9wdGlvbnMudHJhY2luZ1Byb3ZpZGVyLFxuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMub3B0aW9ucy50cmFjaW5nQWRkcmVzcyxcbiAgICAgICAgICAgICAgICBwb3J0OiB0aGlzLm9wdGlvbnMudHJhY2luZ1BvcnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YWx1ZXMgPSBtZXJnZSh2YWx1ZXMsIHRoaXMucHJvcHMudmFsdWVzID8/IHt9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5hZGRIZWxtQ2hhcnQoY2x1c3RlckluZm8sIHZhbHVlcyk7XG4gICAgICAgIGNoYXJ0Lm5vZGUuYWRkRGVwZW5kZW5jeShzYSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2hhcnQpO1xuICAgIH1cbn0iXX0=