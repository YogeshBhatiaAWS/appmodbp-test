"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GpuOperatorAddon = void 0;
const ts_deepmerge_1 = require("ts-deepmerge");
const utils_1 = require("../../utils");
const helm_addon_1 = require("../helm-addon");
/**
 * Default props to be used when creating the Helm chart
 */
const defaultProps = {
    name: "gpu-operator-addon",
    namespace: "gpu-operator",
    chart: "gpu-operator",
    version: "v23.6.0",
    release: "nvidia-gpu-operator",
    repository: "https://helm.ngc.nvidia.com/nvidia",
    createNamespace: true,
    values: {}
};
/**
 * Main class to instantiate the Helm chart for NVIDIA GPU operator
 * GPU operator manages the software and drivers needed for GPU accelerated workloads
 * It validates all requisite software is installed before scheduling GPU workload
 * Using MIG (Multi Instance GPUs) allows you to virtually split your GPU into multiple units
 */
class GpuOperatorAddon extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a, _b;
        const cluster = clusterInfo.cluster;
        let values = (_a = this.options.values) !== null && _a !== void 0 ? _a : {};
        values = (0, ts_deepmerge_1.default)(values, (_b = this.props.values) !== null && _b !== void 0 ? _b : {});
        const chart = this.addHelmChart(clusterInfo, values);
        if (this.options.createNamespace == true) {
            // Let CDK Create the Namespace
            const namespace = (0, utils_1.createNamespace)(this.options.namespace, cluster);
            chart.node.addDependency(namespace);
        }
        return Promise.resolve(chart);
    }
}
exports.GpuOperatorAddon = GpuOperatorAddon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2dwdS1vcGVyYXRvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQ0FBaUM7QUFFakMsdUNBQThDO0FBQzlDLDhDQUE4RTtBQWM5RTs7R0FFRztBQUNILE1BQU0sWUFBWSxHQUEyQztJQUN6RCxJQUFJLEVBQUUsb0JBQW9CO0lBQzFCLFNBQVMsRUFBRSxjQUFjO0lBQ3pCLEtBQUssRUFBRSxjQUFjO0lBQ3JCLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLE9BQU8sRUFBRSxxQkFBcUI7SUFDOUIsVUFBVSxFQUFHLG9DQUFvQztJQUNqRCxlQUFlLEVBQUUsSUFBSTtJQUNyQixNQUFNLEVBQUUsRUFBRTtDQUNiLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNILE1BQWEsZ0JBQWlCLFNBQVEsc0JBQVM7SUFJN0MsWUFBWSxLQUE2QjtRQUN2QyxLQUFLLENBQUMsRUFBQyxHQUFHLFlBQVksRUFBRSxHQUFHLEtBQUssRUFBQyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBOEIsQ0FBQztJQUNyRCxDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQXdCOztRQUM3QixNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO1FBQ3BDLElBQUksTUFBTSxHQUFXLE1BQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLG1DQUFJLEVBQUUsQ0FBQztRQUMvQyxNQUFNLEdBQUcsSUFBQSxzQkFBSyxFQUFDLE1BQU0sRUFBRSxNQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxtQ0FBSSxFQUFFLENBQUMsQ0FBQztRQUNoRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVyRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxJQUFJLElBQUksRUFBQztZQUN2QywrQkFBK0I7WUFDL0IsTUFBTSxTQUFTLEdBQUcsSUFBQSx1QkFBZSxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBVSxFQUFHLE9BQU8sQ0FBQyxDQUFDO1lBQ3JFLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Q0FDRjtBQXRCRCw0Q0FzQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCBtZXJnZSBmcm9tIFwidHMtZGVlcG1lcmdlXCI7XG5pbXBvcnQgeyBDbHVzdGVySW5mbywgVmFsdWVzIH0gZnJvbSBcIi4uLy4uL3NwaVwiO1xuaW1wb3J0IHsgY3JlYXRlTmFtZXNwYWNlIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQgeyBIZWxtQWRkT24sIEhlbG1BZGRPblByb3BzLCBIZWxtQWRkT25Vc2VyUHJvcHMgfSBmcm9tIFwiLi4vaGVsbS1hZGRvblwiO1xuaW1wb3J0IHsgVmFsdWVzU2NoZW1hIH0gZnJvbSAnLi92YWx1ZXMnO1xuLyoqXG4gKiBVc2VyIHByb3ZpZGVkIG9wdGlvbnMgZm9yIHRoZSBIZWxtIENoYXJ0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR3B1T3BlcmF0b3JBZGRvblByb3BzIGV4dGVuZHMgSGVsbUFkZE9uVXNlclByb3BzIHtcbiAgLyoqXG4gICAqIFRvIENyZWF0ZSBOYW1lc3BhY2UgdXNpbmcgQ0RLXG4gICAqLyAgICBcbiAgY3JlYXRlTmFtZXNwYWNlPzogYm9vbGVhbjtcblxuICB2YWx1ZXM/OiBWYWx1ZXNTY2hlbWE7XG59XG5cbi8qKlxuICogRGVmYXVsdCBwcm9wcyB0byBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgdGhlIEhlbG0gY2hhcnRcbiAqL1xuY29uc3QgZGVmYXVsdFByb3BzOiBIZWxtQWRkT25Qcm9wcyAmIEdwdU9wZXJhdG9yQWRkb25Qcm9wcyA9IHtcbiAgICBuYW1lOiBcImdwdS1vcGVyYXRvci1hZGRvblwiLFxuICAgIG5hbWVzcGFjZTogXCJncHUtb3BlcmF0b3JcIixcbiAgICBjaGFydDogXCJncHUtb3BlcmF0b3JcIixcbiAgICB2ZXJzaW9uOiBcInYyMy42LjBcIixcbiAgICByZWxlYXNlOiBcIm52aWRpYS1ncHUtb3BlcmF0b3JcIixcbiAgICByZXBvc2l0b3J5OiAgXCJodHRwczovL2hlbG0ubmdjLm52aWRpYS5jb20vbnZpZGlhXCIsXG4gICAgY3JlYXRlTmFtZXNwYWNlOiB0cnVlLFxuICAgIHZhbHVlczoge31cbn07XG5cbi8qKlxuICogTWFpbiBjbGFzcyB0byBpbnN0YW50aWF0ZSB0aGUgSGVsbSBjaGFydCBmb3IgTlZJRElBIEdQVSBvcGVyYXRvclxuICogR1BVIG9wZXJhdG9yIG1hbmFnZXMgdGhlIHNvZnR3YXJlIGFuZCBkcml2ZXJzIG5lZWRlZCBmb3IgR1BVIGFjY2VsZXJhdGVkIHdvcmtsb2Fkc1xuICogSXQgdmFsaWRhdGVzIGFsbCByZXF1aXNpdGUgc29mdHdhcmUgaXMgaW5zdGFsbGVkIGJlZm9yZSBzY2hlZHVsaW5nIEdQVSB3b3JrbG9hZFxuICogVXNpbmcgTUlHIChNdWx0aSBJbnN0YW5jZSBHUFVzKSBhbGxvd3MgeW91IHRvIHZpcnR1YWxseSBzcGxpdCB5b3VyIEdQVSBpbnRvIG11bHRpcGxlIHVuaXRzXG4gKi9cbmV4cG9ydCBjbGFzcyBHcHVPcGVyYXRvckFkZG9uIGV4dGVuZHMgSGVsbUFkZE9uIHtcblxuICByZWFkb25seSBvcHRpb25zOiBHcHVPcGVyYXRvckFkZG9uUHJvcHM7XG5cbiAgY29uc3RydWN0b3IocHJvcHM/OiBHcHVPcGVyYXRvckFkZG9uUHJvcHMpIHtcbiAgICBzdXBlcih7Li4uZGVmYXVsdFByb3BzLCAuLi5wcm9wc30pO1xuICAgIHRoaXMub3B0aW9ucyA9IHRoaXMucHJvcHMgYXMgR3B1T3BlcmF0b3JBZGRvblByb3BzO1xuICB9XG5cbiAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IFByb21pc2U8Q29uc3RydWN0PiB7XG4gICAgY29uc3QgY2x1c3RlciA9IGNsdXN0ZXJJbmZvLmNsdXN0ZXI7XG4gICAgbGV0IHZhbHVlczogVmFsdWVzID0gdGhpcy5vcHRpb25zLnZhbHVlcyA/PyB7fTtcbiAgICB2YWx1ZXMgPSBtZXJnZSh2YWx1ZXMsIHRoaXMucHJvcHMudmFsdWVzID8/IHt9KTtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuYWRkSGVsbUNoYXJ0KGNsdXN0ZXJJbmZvLCB2YWx1ZXMpO1xuXG4gICAgaWYoIHRoaXMub3B0aW9ucy5jcmVhdGVOYW1lc3BhY2UgPT0gdHJ1ZSl7XG4gICAgICAvLyBMZXQgQ0RLIENyZWF0ZSB0aGUgTmFtZXNwYWNlXG4gICAgICBjb25zdCBuYW1lc3BhY2UgPSBjcmVhdGVOYW1lc3BhY2UodGhpcy5vcHRpb25zLm5hbWVzcGFjZSEgLCBjbHVzdGVyKTtcbiAgICAgIGNoYXJ0Lm5vZGUuYWRkRGVwZW5kZW5jeShuYW1lc3BhY2UpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYXJ0KTtcbiAgfVxufSJdfQ==