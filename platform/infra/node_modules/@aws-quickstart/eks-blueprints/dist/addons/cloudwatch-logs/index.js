"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudWatchLogsAddon = void 0;
const iam = require("aws-cdk-lib/aws-iam");
const ts_deepmerge_1 = require("ts-deepmerge");
const utils_1 = require("../../utils");
const helm_addon_1 = require("../helm-addon");
const namespace_utils_1 = require("../../utils/namespace-utils");
const iam_policy_1 = require("./iam-policy");
/**
 * Default props for the add-on.
 */
const defaultProps = {
    name: 'aws-for-fluent-bit',
    chart: 'aws-for-fluent-bit',
    release: "blueprints-addon-aws-fluent-bit-for-cw",
    version: '0.1.28',
    repository: 'https://aws.github.io/eks-charts',
    namespace: 'aws-for-fluent-bit',
    createNamespace: true,
    serviceAccountName: 'aws-fluent-bit-for-cw-sa',
    logGroupPrefix: '/aws/eks/blueprints-construct-dev',
    logRetentionDays: 90,
    values: {}
};
/**
 * CloudWatchLogsAddon deploys FluentBit into an EKS cluster using the `aws-for-fluent-bit` Helm chart.
 * https://github.com/aws/eks-charts/tree/master/stable/aws-for-fluent-bit
 *
 */
class CloudWatchLogsAddon extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = { ...defaultProps, ...this.props };
    }
    deploy(clusterInfo) {
        var _a;
        let values = populateValues(clusterInfo, this.options);
        values = (0, ts_deepmerge_1.default)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        const cluster = clusterInfo.cluster;
        const namespace = this.options.namespace;
        // Create the FluentBut service account.
        const serviceAccountName = this.options.serviceAccountName;
        const sa = cluster.addServiceAccount(serviceAccountName, {
            name: serviceAccountName,
            namespace: namespace
        });
        // Create namespace
        if (this.options.createNamespace) {
            const ns = (0, namespace_utils_1.createNamespace)(namespace, cluster, true);
            sa.node.addDependency(ns);
        }
        // Apply additional IAM policies to the service account.
        (0, iam_policy_1.getCloudWatchLogsPolicyDocument)().forEach((statement) => {
            sa.addToPrincipalPolicy(iam.PolicyStatement.fromJson(statement));
        });
        const helmChart = this.addHelmChart(clusterInfo, values);
        helmChart.node.addDependency(sa);
        return Promise.resolve(helmChart);
    }
}
exports.CloudWatchLogsAddon = CloudWatchLogsAddon;
__decorate([
    (0, utils_1.conflictsWith)('AwsForFluentBitAddOn')
], CloudWatchLogsAddon.prototype, "deploy", null);
/**
 * populateValues populates the appropriate values used to customize the Helm chart
 * @param helmOptions User provided values to customize the chart
 */
function populateValues(clusterInfo, helmOptions) {
    var _a;
    const values = (_a = helmOptions.values) !== null && _a !== void 0 ? _a : {};
    (0, utils_1.setPath)(values, "serviceAccount.name", helmOptions.serviceAccountName);
    (0, utils_1.setPath)(values, "serviceAccount.create", false);
    (0, utils_1.setPath)(values, "cloudWatch.enabled", false);
    (0, utils_1.setPath)(values, "cloudWatchLogs.enabled", true);
    (0, utils_1.setPath)(values, "cloudWatchLogs.region", clusterInfo.cluster.stack.region);
    (0, utils_1.setPath)(values, "cloudWatchLogs.logGroupName", `${helmOptions.logGroupPrefix}/workloads`);
    (0, utils_1.setPath)(values, "cloudWatchLogs.logGroupTemplate", `${helmOptions.logGroupPrefix}/$kubernetes['namespace_name']`);
    (0, utils_1.setPath)(values, "cloudWatchLogs.logStreamTemplate", "$kubernetes['container_name'].$kubernetes['pod_name']");
    (0, utils_1.setPath)(values, "cloudWatchLogs.log_key", "log");
    (0, utils_1.setPath)(values, "cloudWatchLogs.log_retention_days", helmOptions.logRetentionDays);
    return values;
}
//# sourceMappingURL=data:application/json;base64,