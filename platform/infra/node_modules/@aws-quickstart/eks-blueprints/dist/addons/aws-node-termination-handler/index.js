"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsNodeTerminationHandlerAddOn = exports.Mode = void 0;
const aws_autoscaling_1 = require("aws-cdk-lib/aws-autoscaling");
const aws_autoscaling_hooktargets_1 = require("aws-cdk-lib/aws-autoscaling-hooktargets");
const aws_events_1 = require("aws-cdk-lib/aws-events");
const aws_events_targets_1 = require("aws-cdk-lib/aws-events-targets");
const iam = require("aws-cdk-lib/aws-iam");
const aws_sqs_1 = require("aws-cdk-lib/aws-sqs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const assert = require("assert");
const utils_1 = require("../../utils");
const helm_addon_1 = require("../helm-addon");
/**
 * Supported Modes
 */
var Mode;
(function (Mode) {
    /**
     * IMDS Mode
     */
    Mode[Mode["IMDS"] = 0] = "IMDS";
    /**
     * Queue Mode
     */
    Mode[Mode["QUEUE"] = 1] = "QUEUE";
})(Mode || (exports.Mode = Mode = {}));
/**
 * Default options for the add-on
 */
const defaultProps = {
    chart: 'aws-node-termination-handler',
    repository: 'https://aws.github.io/eks-charts',
    version: '0.21.0',
    release: 'blueprints-addon-aws-node-termination-handler',
    name: 'aws-node-termination-handler',
    namespace: 'kube-system',
    mode: Mode.IMDS
};
class AwsNodeTerminationHandlerAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    /**
     * Implementation of the deploy interface
     * @param clusterInfo
     */
    deploy(clusterInfo) {
        const cluster = clusterInfo.cluster;
        const asgCapacity = clusterInfo.autoscalingGroups || [];
        const karpenter = clusterInfo.getScheduledAddOn('KarpenterAddOn');
        if (!karpenter) {
            // No support for Fargate and Managed Node Groups, lets catch that
            assert(asgCapacity && asgCapacity.length > 0, 'AWS Node Termination Handler is only supported for self-managed nodes');
        }
        // Create an SQS Queue
        let helmValues;
        // Create Service Account
        const serviceAccount = cluster.addServiceAccount('aws-nth-sa', {
            name: 'aws-node-termination-handler-sa',
            namespace: this.options.namespace,
        });
        // Get the appropriate Helm Values depending upon the Mode selected
        if (this.options.mode === Mode.IMDS) {
            helmValues = this.configureImdsMode(serviceAccount, karpenter);
        }
        else {
            helmValues = this.configureQueueMode(cluster, serviceAccount, asgCapacity, karpenter);
        }
        // Deploy the helm chart
        const awsNodeTerminationHandlerChart = this.addHelmChart(clusterInfo, helmValues);
        awsNodeTerminationHandlerChart.node.addDependency(serviceAccount);
    }
    /**
     * Configures IMDS Mode
     * @param serviceAccount
     * @returns Helm values
     */
    configureImdsMode(serviceAccount, karpenter) {
        return {
            enableSpotInterruptionDraining: true,
            enableRebalanceMonitoring: true,
            enableRebalanceDraining: karpenter ? true : false,
            enableScheduledEventDraining: true,
            nodeSelector: karpenter ? { 'karpenter.sh/capacity-type': 'spot' } : {},
            serviceAccount: {
                create: false,
                name: serviceAccount.serviceAccountName,
            }
        };
    }
    /**
     * Configures Queue Mode
     * @param cluster
     * @param serviceAccount
     * @param asgCapacity
     * @returns Helm values
     */
    configureQueueMode(cluster, serviceAccount, asgCapacity, karpenter) {
        const queue = new aws_sqs_1.Queue(cluster.stack, "aws-nth-queue", {
            retentionPeriod: aws_cdk_lib_1.Duration.minutes(5)
        });
        queue.addToResourcePolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            principals: [
                new iam.ServicePrincipal('events.amazonaws.com'),
                new iam.ServicePrincipal('sqs.amazonaws.com'),
            ],
            actions: ['sqs:SendMessage'],
            resources: [queue.queueArn]
        }));
        const resources = [];
        // This does not apply if you leverage Karpenter (which uses NTH for Spot/Fargate)
        if (!karpenter) {
            for (let i = 0; i < asgCapacity.length; i++) {
                const nodeGroup = asgCapacity[i];
                // Setup a Termination Lifecycle Hook on an ASG
                new aws_autoscaling_1.LifecycleHook(cluster.stack, `aws-${nodeGroup.autoScalingGroupName}-nth-lifecycle-hook`, {
                    lifecycleTransition: aws_autoscaling_1.LifecycleTransition.INSTANCE_TERMINATING,
                    heartbeatTimeout: aws_cdk_lib_1.Duration.minutes(5),
                    notificationTarget: new aws_autoscaling_hooktargets_1.QueueHook(queue),
                    autoScalingGroup: nodeGroup
                });
                // Tag the ASG
                const tags = [{
                        Key: 'aws-node-termination-handler/managed',
                        Value: 'true'
                    }];
                (0, utils_1.tagAsg)(cluster.stack, nodeGroup.autoScalingGroupName, tags);
                resources.push(nodeGroup.autoScalingGroupArn);
            }
        }
        // Create Amazon EventBridge Rules
        this.createEvents(cluster.stack, queue, karpenter);
        // Service Account Policy
        serviceAccount.addToPrincipalPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                'autoscaling:CompleteLifecycleAction',
                'autoscaling:DescribeAutoScalingInstances',
                'autoscaling:DescribeTags'
            ],
            resources: karpenter ? ['*'] : resources
        }));
        serviceAccount.addToPrincipalPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['ec2:DescribeInstances'],
            resources: ['*']
        }));
        queue.grantConsumeMessages(serviceAccount);
        return {
            enableSqsTerminationDraining: true,
            queueURL: queue.queueUrl,
            awsRegion: karpenter ? cluster.stack.region : '',
            serviceAccount: {
                create: false,
                name: serviceAccount.serviceAccountName,
            },
            checkASGTagBeforeDraining: karpenter ? false : true,
            enableSpotInterruptionDraining: karpenter ? true : false,
        };
    }
    /**
     * Create EventBridge rules with target as SQS queue
     * @param scope
     * @param queue
     */
    createEvents(scope, queue, karpenter) {
        const target = new aws_events_targets_1.SqsQueue(queue);
        const eventPatterns = [
            {
                source: ['aws.ec2'],
                detailType: ['EC2 Spot Instance Interruption Warning']
            },
            {
                source: ['aws.ec2'],
                detailType: ['EC2 Instance Rebalance Recommendation']
            },
            {
                source: ['aws.ec2'],
                detailType: ['EC2 Instance State-change Notification']
            },
            {
                source: ['aws.health'],
                detailType: ['AWS Health Event'],
            }
        ];
        if (!karpenter) {
            eventPatterns.push({
                source: ['aws.autoscaling'],
                detailType: ['EC2 Instance-terminate Lifecycle Action']
            });
        }
        eventPatterns.forEach((event, index) => {
            const rule = new aws_events_1.Rule(scope, `rule-${index}`, { eventPattern: event });
            rule.addTarget(target);
        });
    }
}
exports.AwsNodeTerminationHandlerAddOn = AwsNodeTerminationHandlerAddOn;
//# sourceMappingURL=data:application/json;base64,