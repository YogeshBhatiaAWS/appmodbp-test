"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KubeviousAddOn = void 0;
const helm_addon_1 = require("../helm-addon");
const utils_1 = require("../../utils");
/**
 * Default props to be used when creating the Helm chart
 */
const defaultProps = {
    name: "kubevious",
    namespace: "kubevious",
    chart: "kubevious",
    version: "1.2.1",
    release: "kubevious",
    repository: "https://helm.kubevious.io",
    values: {},
    ingressEnabled: false,
    kubeviousServiceType: "ClusterIP",
};
/**
 * Main class to instantiate the Helm chart
 */
class KubeviousAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        let values = populateValues(this.options);
        const chart = this.addHelmChart(clusterInfo, values);
        return Promise.resolve(chart);
    }
}
exports.KubeviousAddOn = KubeviousAddOn;
/**
 * populateValues populates the appropriate values used to customize the Helm chart
 * @param helmOptions User provided values to customize the chart
 */
function populateValues(helmOptions) {
    var _a;
    const values = (_a = helmOptions.values) !== null && _a !== void 0 ? _a : {};
    (0, utils_1.setPath)(values, "ingress.enabled", helmOptions.ingressEnabled);
    (0, utils_1.setPath)(values, "kubevious.service.type", helmOptions.kubeviousServiceType);
    // Generate a random password for MySQL DB root user
    (0, utils_1.setPath)(values, "mysql.generate_passwords", true);
    return values;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2t1YmV2aW91cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw4Q0FBOEU7QUFFOUUsdUNBQXNDO0FBcUJ0Qzs7R0FFRztBQUNILE1BQU0sWUFBWSxHQUF5QztJQUN2RCxJQUFJLEVBQUUsV0FBVztJQUNqQixTQUFTLEVBQUUsV0FBVztJQUN0QixLQUFLLEVBQUUsV0FBVztJQUNsQixPQUFPLEVBQUUsT0FBTztJQUNoQixPQUFPLEVBQUUsV0FBVztJQUNwQixVQUFVLEVBQUcsMkJBQTJCO0lBQ3hDLE1BQU0sRUFBRSxFQUFFO0lBRVYsY0FBYyxFQUFFLEtBQUs7SUFDckIsb0JBQW9CLEVBQUUsV0FBVztDQUNwQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFhLGNBQWUsU0FBUSxzQkFBUztJQUl6QyxZQUFZLEtBQTJCO1FBQ25DLEtBQUssQ0FBQyxFQUFDLEdBQUcsWUFBWSxFQUFFLEdBQUcsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUE0QixDQUFDO0lBQ3JELENBQUM7SUFFRCxNQUFNLENBQUMsV0FBd0I7UUFDM0IsSUFBSSxNQUFNLEdBQVcsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVyRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUNKO0FBZkQsd0NBZUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFTLGNBQWMsQ0FBQyxXQUFnQzs7SUFDcEQsTUFBTSxNQUFNLEdBQUcsTUFBQSxXQUFXLENBQUMsTUFBTSxtQ0FBSSxFQUFFLENBQUM7SUFFeEMsSUFBQSxlQUFPLEVBQUMsTUFBTSxFQUFFLGlCQUFpQixFQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoRSxJQUFBLGVBQU8sRUFBQyxNQUFNLEVBQUUsd0JBQXdCLEVBQUcsV0FBVyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDN0Usb0RBQW9EO0lBQ3BELElBQUEsZUFBTyxFQUFDLE1BQU0sRUFBRSwwQkFBMEIsRUFBRyxJQUFJLENBQUMsQ0FBQztJQUVuRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IEhlbG1BZGRPbiwgSGVsbUFkZE9uVXNlclByb3BzLCBIZWxtQWRkT25Qcm9wcyB9IGZyb20gXCIuLi9oZWxtLWFkZG9uXCI7XG5pbXBvcnQgeyBDbHVzdGVySW5mbywgVmFsdWVzIH0gZnJvbSBcIi4uLy4uL3NwaVwiO1xuaW1wb3J0IHsgc2V0UGF0aCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5cbi8qKlxuICogVXNlciBwcm92aWRlZCBvcHRpb25zIGZvciB0aGUgSGVsbSBDaGFydFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEt1YmV2aW91c0FkZE9uUHJvcHMgZXh0ZW5kcyBIZWxtQWRkT25Vc2VyUHJvcHMge1xuICAgIC8qKlxuICAgICAqIFZlcnNpb24gb2YgdGhlIGhlbG0gY2hhcnQgdG8gZGVwbG95XG4gICAgICovXG4gICAgdmVyc2lvbj86IHN0cmluZyxcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gaW5ncmVzcyBmb3IgYWNjZXNzIHRvIEt1YmV2aW91c1xuICAgICAqL1xuICAgIGluZ3Jlc3NFbmFibGVkPzogYm9vbGVhbixcbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIHNlcnZpY2UgdG8gZXhwb3NlIEt1YmV2aW91cyBVSVxuICAgICAqL1xuICAgIGt1YmV2aW91c1NlcnZpY2VUeXBlPzogc3RyaW5nLFxufVxuXG4vKipcbiAqIERlZmF1bHQgcHJvcHMgdG8gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIHRoZSBIZWxtIGNoYXJ0XG4gKi9cbmNvbnN0IGRlZmF1bHRQcm9wczogSGVsbUFkZE9uUHJvcHMgJiBLdWJldmlvdXNBZGRPblByb3BzID0ge1xuICAgIG5hbWU6IFwia3ViZXZpb3VzXCIsXG4gICAgbmFtZXNwYWNlOiBcImt1YmV2aW91c1wiLFxuICAgIGNoYXJ0OiBcImt1YmV2aW91c1wiLFxuICAgIHZlcnNpb246IFwiMS4yLjFcIixcbiAgICByZWxlYXNlOiBcImt1YmV2aW91c1wiLFxuICAgIHJlcG9zaXRvcnk6ICBcImh0dHBzOi8vaGVsbS5rdWJldmlvdXMuaW9cIixcbiAgICB2YWx1ZXM6IHt9LFxuXG4gICAgaW5ncmVzc0VuYWJsZWQ6IGZhbHNlLFxuICAgIGt1YmV2aW91c1NlcnZpY2VUeXBlOiBcIkNsdXN0ZXJJUFwiLFxufTtcblxuLyoqXG4gKiBNYWluIGNsYXNzIHRvIGluc3RhbnRpYXRlIHRoZSBIZWxtIGNoYXJ0XG4gKi9cbmV4cG9ydCBjbGFzcyBLdWJldmlvdXNBZGRPbiBleHRlbmRzIEhlbG1BZGRPbiB7XG5cbiAgICByZWFkb25seSBvcHRpb25zOiBLdWJldmlvdXNBZGRPblByb3BzO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBLdWJldmlvdXNBZGRPblByb3BzKSB7XG4gICAgICAgIHN1cGVyKHsuLi5kZWZhdWx0UHJvcHMsIC4uLnByb3BzfSk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMucHJvcHMgYXMgS3ViZXZpb3VzQWRkT25Qcm9wcztcbiAgICB9XG5cbiAgICBkZXBsb3koY2x1c3RlckluZm86IENsdXN0ZXJJbmZvKTogUHJvbWlzZTxDb25zdHJ1Y3Q+IHtcbiAgICAgICAgbGV0IHZhbHVlczogVmFsdWVzID0gcG9wdWxhdGVWYWx1ZXModGhpcy5vcHRpb25zKTtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmFkZEhlbG1DaGFydChjbHVzdGVySW5mbywgdmFsdWVzKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYXJ0KTtcbiAgICB9XG59XG5cbi8qKlxuICogcG9wdWxhdGVWYWx1ZXMgcG9wdWxhdGVzIHRoZSBhcHByb3ByaWF0ZSB2YWx1ZXMgdXNlZCB0byBjdXN0b21pemUgdGhlIEhlbG0gY2hhcnRcbiAqIEBwYXJhbSBoZWxtT3B0aW9ucyBVc2VyIHByb3ZpZGVkIHZhbHVlcyB0byBjdXN0b21pemUgdGhlIGNoYXJ0XG4gKi9cbmZ1bmN0aW9uIHBvcHVsYXRlVmFsdWVzKGhlbG1PcHRpb25zOiBLdWJldmlvdXNBZGRPblByb3BzKTogVmFsdWVzIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBoZWxtT3B0aW9ucy52YWx1ZXMgPz8ge307XG5cbiAgICBzZXRQYXRoKHZhbHVlcywgXCJpbmdyZXNzLmVuYWJsZWRcIiwgIGhlbG1PcHRpb25zLmluZ3Jlc3NFbmFibGVkKTtcbiAgICBzZXRQYXRoKHZhbHVlcywgXCJrdWJldmlvdXMuc2VydmljZS50eXBlXCIsICBoZWxtT3B0aW9ucy5rdWJldmlvdXNTZXJ2aWNlVHlwZSk7XG4gICAgLy8gR2VuZXJhdGUgYSByYW5kb20gcGFzc3dvcmQgZm9yIE15U1FMIERCIHJvb3QgdXNlclxuICAgIHNldFBhdGgodmFsdWVzLCBcIm15c3FsLmdlbmVyYXRlX3Bhc3N3b3Jkc1wiLCAgdHJ1ZSk7XG5cbiAgICByZXR1cm4gdmFsdWVzO1xufVxuIl19