"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalDnsAddOn = void 0;
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const helm_addon_1 = require("../helm-addon");
const ts_deepmerge_1 = require("ts-deepmerge");
const defaultProps = {
    name: 'external-dns',
    chart: 'external-dns',
    namespace: 'external-dns',
    repository: 'https://kubernetes-sigs.github.io/external-dns/',
    release: 'blueprints-addon-external-dns',
    version: '1.13.0',
    values: {},
};
/**
 * Implementation of the External DNS service: https://github.com/kubernetes-sigs/external-dns/.
 * It is required to integrate with Route53 for external DNS resolution.
 */
class ExternalDnsAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a, _b;
        const region = clusterInfo.cluster.stack.region;
        const cluster = clusterInfo.cluster;
        const namespace = (_a = this.options.namespace) !== null && _a !== void 0 ? _a : this.options.name;
        const namespaceManifest = new aws_eks_1.KubernetesManifest(cluster.stack, `${this.props.name}-ns`, {
            cluster,
            manifest: [{
                    apiVersion: 'v1',
                    kind: 'Namespace',
                    metadata: { name: namespace },
                }],
            overwrite: true
        });
        const sa = cluster.addServiceAccount(this.props.name, { name: `${this.props.name}-sa`, namespace });
        const hostedZones = this.options.hostedZoneResources.map(e => clusterInfo.getRequiredResource(e));
        sa.addToPrincipalPolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: ['route53:ChangeResourceRecordSets', 'route53:ListResourceRecordSets'],
            resources: hostedZones.map(hostedZone => hostedZone.hostedZoneArn),
        }));
        sa.addToPrincipalPolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: ['route53:ListHostedZones'],
            resources: ['*'],
        }));
        sa.node.addDependency(namespaceManifest);
        // Create a --zone-id-filter arg for each hosted zone
        const zoneIdFilterArgs = hostedZones.map((hostedZone) => `--zone-id-filter=${hostedZone.hostedZoneId}`);
        let values = {
            provider: "aws",
            extraArgs: zoneIdFilterArgs,
            aws: {
                region,
            },
            serviceAccount: {
                create: false,
                name: sa.serviceAccountName,
            },
        };
        values = (0, ts_deepmerge_1.default)(values, (_b = this.props.values) !== null && _b !== void 0 ? _b : {});
        const chart = this.addHelmChart(clusterInfo, values);
        chart.node.addDependency(namespaceManifest);
        // return the Promise Construct for any teams that may depend on this
        return Promise.resolve(chart);
    }
}
exports.ExternalDnsAddOn = ExternalDnsAddOn;
//# sourceMappingURL=data:application/json;base64,