"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XrayAddOn = void 0;
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const cluster_providers_1 = require("../../cluster-providers");
const utils_1 = require("../../utils");
/**
 * Implementation of AWS X-Ray add-on for EKS Blueprints. Installs xray daemonset and exposes
 * an internal ClusterIP service for tracing on port 2000 (UDP).
 */
class XrayAddOn {
    deploy(clusterInfo) {
        const cluster = clusterInfo.cluster;
        const nodeGroups = (0, cluster_providers_1.assertEC2NodeGroup)(clusterInfo, XrayAddOn.name);
        nodeGroups.forEach(nodeGroup => {
            nodeGroup.role.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('AWSXRayDaemonWriteAccess'));
        });
        // Apply manifest
        const doc = (0, utils_1.readYamlDocument)(__dirname + '/xray-ds.yaml');
        const manifest = doc.split("---").map(e => (0, utils_1.loadYaml)(e));
        new aws_eks_1.KubernetesManifest(cluster.stack, "xray-daemon", {
            cluster,
            manifest,
            overwrite: true
        });
    }
}
exports.XrayAddOn = XrayAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL3hyYXkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaURBQXlEO0FBQ3pELGlEQUFvRDtBQUNwRCwrREFBNkQ7QUFFN0QsdUNBQXlEO0FBRXpEOzs7R0FHRztBQUNILE1BQWEsU0FBUztJQUVsQixNQUFNLENBQUMsV0FBd0I7UUFDM0IsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQztRQUNwQyxNQUFNLFVBQVUsR0FBRyxJQUFBLHNDQUFrQixFQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbkUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUMzQixTQUFTLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHVCQUFhLENBQUMsd0JBQXdCLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDO1FBQ3hHLENBQUMsQ0FBQyxDQUFDO1FBRUgsaUJBQWlCO1FBQ2pCLE1BQU0sR0FBRyxHQUFHLElBQUEsd0JBQWdCLEVBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQyxDQUFDO1FBQzFELE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBQSxnQkFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEQsSUFBSSw0QkFBa0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRTtZQUNqRCxPQUFPO1lBQ1AsUUFBUTtZQUNSLFNBQVMsRUFBRSxJQUFJO1NBQ2xCLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQW5CRCw4QkFtQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLdWJlcm5ldGVzTWFuaWZlc3QgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWVrc1wiO1xuaW1wb3J0IHsgTWFuYWdlZFBvbGljeSB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtaWFtXCI7XG5pbXBvcnQgeyBhc3NlcnRFQzJOb2RlR3JvdXAgfSBmcm9tIFwiLi4vLi4vY2x1c3Rlci1wcm92aWRlcnNcIjtcbmltcG9ydCB7IENsdXN0ZXJBZGRPbiwgQ2x1c3RlckluZm8gfSBmcm9tIFwiLi4vLi4vc3BpXCI7XG5pbXBvcnQgeyBsb2FkWWFtbCwgcmVhZFlhbWxEb2N1bWVudCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIEFXUyBYLVJheSBhZGQtb24gZm9yIEVLUyBCbHVlcHJpbnRzLiBJbnN0YWxscyB4cmF5IGRhZW1vbnNldCBhbmQgZXhwb3NlcyBcbiAqIGFuIGludGVybmFsIENsdXN0ZXJJUCBzZXJ2aWNlIGZvciB0cmFjaW5nIG9uIHBvcnQgMjAwMCAoVURQKS5cbiAqL1xuZXhwb3J0IGNsYXNzIFhyYXlBZGRPbiBpbXBsZW1lbnRzIENsdXN0ZXJBZGRPbiB7XG5cbiAgICBkZXBsb3koY2x1c3RlckluZm86IENsdXN0ZXJJbmZvKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNsdXN0ZXIgPSBjbHVzdGVySW5mby5jbHVzdGVyO1xuICAgICAgICBjb25zdCBub2RlR3JvdXBzID0gYXNzZXJ0RUMyTm9kZUdyb3VwKGNsdXN0ZXJJbmZvLCBYcmF5QWRkT24ubmFtZSk7XG5cbiAgICAgICAgbm9kZUdyb3Vwcy5mb3JFYWNoKG5vZGVHcm91cCA9PiB7XG4gICAgICAgICAgICBub2RlR3JvdXAucm9sZS5hZGRNYW5hZ2VkUG9saWN5KE1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKCdBV1NYUmF5RGFlbW9uV3JpdGVBY2Nlc3MnKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEFwcGx5IG1hbmlmZXN0XG4gICAgICAgIGNvbnN0IGRvYyA9IHJlYWRZYW1sRG9jdW1lbnQoX19kaXJuYW1lICsgJy94cmF5LWRzLnlhbWwnKTtcbiAgICAgICAgY29uc3QgbWFuaWZlc3QgPSBkb2Muc3BsaXQoXCItLS1cIikubWFwKGUgPT4gbG9hZFlhbWwoZSkpO1xuICAgICAgICBuZXcgS3ViZXJuZXRlc01hbmlmZXN0KGNsdXN0ZXIuc3RhY2ssIFwieHJheS1kYWVtb25cIiwge1xuICAgICAgICAgICAgY2x1c3RlcixcbiAgICAgICAgICAgIG1hbmlmZXN0LFxuICAgICAgICAgICAgb3ZlcndyaXRlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbn0iXX0=