"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FluxKustomization = void 0;
const utils_1 = require("../../utils");
/**
 * Flux Kustomization API defines a pipeline for fetching, decrypting, building, validating and applying Kustomize overlays or plain Kubernetes manifests.
 */
class FluxKustomization {
    constructor() { }
    generate(name, repoName, namespace, fluxSyncInterval, fluxPrune, fluxTimeout, values, fluxKustomizationPath, fluxTargetNamespace) {
        const kustomizationManifest = {
            apiVersion: "kustomize.toolkit.fluxcd.io/v1beta2",
            kind: "Kustomization",
            metadata: {
                name,
                namespace
            },
            spec: {
                interval: fluxSyncInterval,
                sourceRef: {
                    kind: "GitRepository",
                    name: repoName
                },
                path: fluxKustomizationPath,
                prune: fluxPrune,
                timeout: fluxTimeout
            }
        };
        if (values) {
            (0, utils_1.setPath)(kustomizationManifest, "spec.postBuild.substitute", values);
        }
        if (fluxTargetNamespace) {
            (0, utils_1.setPath)(kustomizationManifest, "spec.targetNamespace", fluxTargetNamespace);
        }
        return kustomizationManifest;
    }
}
exports.FluxKustomization = FluxKustomization;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia3VzdG9taXphdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGRvbnMvZmx1eGNkL2t1c3RvbWl6YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQXNDO0FBR3RDOztHQUVHO0FBQ0gsTUFBYSxpQkFBaUI7SUFFMUIsZ0JBQWUsQ0FBQztJQUVULFFBQVEsQ0FBQyxJQUFZLEVBQUUsUUFBZ0IsRUFBRSxTQUFpQixFQUFFLGdCQUF3QixFQUFFLFNBQWtCLEVBQUUsV0FBbUIsRUFBRSxNQUFrQixFQUFFLHFCQUE2QixFQUFFLG1CQUE0QjtRQUVqTixNQUFNLHFCQUFxQixHQUFHO1lBQzFCLFVBQVUsRUFBRSxxQ0FBcUM7WUFDakQsSUFBSSxFQUFFLGVBQWU7WUFDckIsUUFBUSxFQUFFO2dCQUNOLElBQUk7Z0JBQ0osU0FBUzthQUNaO1lBQ0QsSUFBSSxFQUFFO2dCQUNGLFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLFNBQVMsRUFBRTtvQkFDUCxJQUFJLEVBQUUsZUFBZTtvQkFDckIsSUFBSSxFQUFFLFFBQVE7aUJBQ2pCO2dCQUNELElBQUksRUFBRSxxQkFBcUI7Z0JBQzNCLEtBQUssRUFBRSxTQUFTO2dCQUNoQixPQUFPLEVBQUUsV0FBVzthQUN2QjtTQUNKLENBQUM7UUFDRixJQUFJLE1BQU0sRUFBRTtZQUNSLElBQUEsZUFBTyxFQUFDLHFCQUFxQixFQUFFLDJCQUEyQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZFO1FBQ0QsSUFBSSxtQkFBbUIsRUFBRTtZQUNyQixJQUFBLGVBQU8sRUFBQyxxQkFBcUIsRUFBRSxzQkFBc0IsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1NBQy9FO1FBQ0QsT0FBTyxxQkFBcUIsQ0FBQztJQUNqQyxDQUFDO0NBQ0o7QUFoQ0QsOENBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2V0UGF0aCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0ICogYXMgc3BpIGZyb20gXCIuLi8uLi9zcGlcIjtcblxuLyoqXG4gKiBGbHV4IEt1c3RvbWl6YXRpb24gQVBJIGRlZmluZXMgYSBwaXBlbGluZSBmb3IgZmV0Y2hpbmcsIGRlY3J5cHRpbmcsIGJ1aWxkaW5nLCB2YWxpZGF0aW5nIGFuZCBhcHBseWluZyBLdXN0b21pemUgb3ZlcmxheXMgb3IgcGxhaW4gS3ViZXJuZXRlcyBtYW5pZmVzdHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBGbHV4S3VzdG9taXphdGlvbiB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICBwdWJsaWMgZ2VuZXJhdGUobmFtZTogc3RyaW5nLCByZXBvTmFtZTogc3RyaW5nLCBuYW1lc3BhY2U6IHN0cmluZywgZmx1eFN5bmNJbnRlcnZhbDogc3RyaW5nLCBmbHV4UHJ1bmU6IGJvb2xlYW4sIGZsdXhUaW1lb3V0OiBzdHJpbmcsIHZhbHVlczogc3BpLlZhbHVlcywgZmx1eEt1c3RvbWl6YXRpb25QYXRoOiBzdHJpbmcsIGZsdXhUYXJnZXROYW1lc3BhY2U/OiBzdHJpbmcpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGt1c3RvbWl6YXRpb25NYW5pZmVzdCA9IHtcbiAgICAgICAgICAgIGFwaVZlcnNpb246IFwia3VzdG9taXplLnRvb2xraXQuZmx1eGNkLmlvL3YxYmV0YTJcIixcbiAgICAgICAgICAgIGtpbmQ6IFwiS3VzdG9taXphdGlvblwiLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIG5hbWVzcGFjZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNwZWM6IHtcbiAgICAgICAgICAgICAgICBpbnRlcnZhbDogZmx1eFN5bmNJbnRlcnZhbCxcbiAgICAgICAgICAgICAgICBzb3VyY2VSZWY6IHtcbiAgICAgICAgICAgICAgICAgICAga2luZDogXCJHaXRSZXBvc2l0b3J5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlcG9OYW1lXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYXRoOiBmbHV4S3VzdG9taXphdGlvblBhdGgsXG4gICAgICAgICAgICAgICAgcHJ1bmU6IGZsdXhQcnVuZSxcbiAgICAgICAgICAgICAgICB0aW1lb3V0OiBmbHV4VGltZW91dFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgICAgICBzZXRQYXRoKGt1c3RvbWl6YXRpb25NYW5pZmVzdCwgXCJzcGVjLnBvc3RCdWlsZC5zdWJzdGl0dXRlXCIsIHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZsdXhUYXJnZXROYW1lc3BhY2UpIHtcbiAgICAgICAgICAgIHNldFBhdGgoa3VzdG9taXphdGlvbk1hbmlmZXN0LCBcInNwZWMudGFyZ2V0TmFtZXNwYWNlXCIsIGZsdXhUYXJnZXROYW1lc3BhY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrdXN0b21pemF0aW9uTWFuaWZlc3Q7XG4gICAgfVxufVxuIl19