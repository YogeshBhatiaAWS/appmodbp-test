"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmrEksAddOn = void 0;
const assert = require("assert");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
class EmrEksAddOn {
    deploy(clusterInfo) {
        assert(clusterInfo.cluster instanceof aws_eks_1.Cluster, "EmrEksAddOn cannot be used with imported clusters as it requires changes to the cluster authentication.");
        const cluster = clusterInfo.cluster;
        /*
        * Create the service role used by EMR on EKS
        */
        const emrOnEksSlr = new aws_iam_1.CfnServiceLinkedRole(cluster.stack, 'EmrServiceRole', {
            awsServiceName: 'emr-containers.amazonaws.com',
        });
        //Init the service role as IRole because `addRoleMapping` method does not
        //support the CfnServiceLinkedRole type
        const emrEksServiceRole = aws_iam_1.Role.fromRoleArn(cluster.stack, 'ServiceRoleForAmazonEMRContainers', `arn:aws:iam::${aws_cdk_lib_1.Stack.of(cluster.stack).account}:role/AWSServiceRoleForAmazonEMRContainers`);
        //Add the service role to the AwsAuth
        cluster.awsAuth.addRoleMapping(emrEksServiceRole, {
            username: 'emr-containers',
            groups: ['']
        });
        return Promise.resolve(emrOnEksSlr);
    }
}
exports.EmrEksAddOn = EmrEksAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2Vtci1vbi1la3MvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQWtDO0FBRWxDLDZDQUFvQztBQUNwQyxpREFBOEM7QUFDOUMsaURBQXdFO0FBR3hFLE1BQWEsV0FBVztJQUN0QixNQUFNLENBQUMsV0FBd0I7UUFDN0IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLFlBQVksaUJBQU8sRUFBRSx5R0FBeUcsQ0FBQyxDQUFDO1FBQzFKLE1BQU0sT0FBTyxHQUFZLFdBQVcsQ0FBQyxPQUFPLENBQUM7UUFFN0M7O1VBRUU7UUFDRixNQUFNLFdBQVcsR0FBRyxJQUFJLDhCQUFvQixDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7WUFDNUUsY0FBYyxFQUFFLDhCQUE4QjtTQUMvQyxDQUFDLENBQUM7UUFHSCx5RUFBeUU7UUFDekUsdUNBQXVDO1FBQ3ZDLE1BQU0saUJBQWlCLEdBQVUsY0FBSSxDQUFDLFdBQVcsQ0FDL0MsT0FBTyxDQUFDLEtBQUssRUFDYixtQ0FBbUMsRUFDbkMsZ0JBQWdCLG1CQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUN4Qyw0Q0FBNEMsQ0FDN0MsQ0FBQztRQUVGLHFDQUFxQztRQUNyQyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FDNUIsaUJBQWlCLEVBQ2pCO1lBQ0UsUUFBUSxFQUFFLGdCQUFnQjtZQUMxQixNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDYixDQUNGLENBQUM7UUFFRixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUNGO0FBakNELGtDQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpO1xuaW1wb3J0IHsgQ2x1c3RlckFkZE9uLCBDbHVzdGVySW5mbyB9IGZyb20gXCIuLi8uLi9zcGlcIjtcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgeyBDbHVzdGVyIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1la3NcIjtcbmltcG9ydCB7IENmblNlcnZpY2VMaW5rZWRSb2xlLCBJUm9sZSwgUm9sZSB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtaWFtXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuXG5leHBvcnQgY2xhc3MgRW1yRWtzQWRkT24gaW1wbGVtZW50cyBDbHVzdGVyQWRkT24ge1xuICBkZXBsb3koY2x1c3RlckluZm86IENsdXN0ZXJJbmZvKTogUHJvbWlzZTxDb25zdHJ1Y3Q+IHtcbiAgICBhc3NlcnQoY2x1c3RlckluZm8uY2x1c3RlciBpbnN0YW5jZW9mIENsdXN0ZXIsIFwiRW1yRWtzQWRkT24gY2Fubm90IGJlIHVzZWQgd2l0aCBpbXBvcnRlZCBjbHVzdGVycyBhcyBpdCByZXF1aXJlcyBjaGFuZ2VzIHRvIHRoZSBjbHVzdGVyIGF1dGhlbnRpY2F0aW9uLlwiKTtcbiAgICBjb25zdCBjbHVzdGVyOiBDbHVzdGVyID0gY2x1c3RlckluZm8uY2x1c3RlcjtcblxuICAgIC8qXG4gICAgKiBDcmVhdGUgdGhlIHNlcnZpY2Ugcm9sZSB1c2VkIGJ5IEVNUiBvbiBFS1MgXG4gICAgKi9cbiAgICBjb25zdCBlbXJPbkVrc1NsciA9IG5ldyBDZm5TZXJ2aWNlTGlua2VkUm9sZShjbHVzdGVyLnN0YWNrLCAnRW1yU2VydmljZVJvbGUnLCB7XG4gICAgICBhd3NTZXJ2aWNlTmFtZTogJ2Vtci1jb250YWluZXJzLmFtYXpvbmF3cy5jb20nLFxuICAgIH0pO1xuXG5cbiAgICAvL0luaXQgdGhlIHNlcnZpY2Ugcm9sZSBhcyBJUm9sZSBiZWNhdXNlIGBhZGRSb2xlTWFwcGluZ2AgbWV0aG9kIGRvZXMgbm90XG4gICAgLy9zdXBwb3J0IHRoZSBDZm5TZXJ2aWNlTGlua2VkUm9sZSB0eXBlXG4gICAgY29uc3QgZW1yRWtzU2VydmljZVJvbGU6IElSb2xlID0gUm9sZS5mcm9tUm9sZUFybihcbiAgICAgIGNsdXN0ZXIuc3RhY2ssXG4gICAgICAnU2VydmljZVJvbGVGb3JBbWF6b25FTVJDb250YWluZXJzJyxcbiAgICAgIGBhcm46YXdzOmlhbTo6JHtTdGFjay5vZihjbHVzdGVyLnN0YWNrKS5hY2NvdW50XG4gICAgICB9OnJvbGUvQVdTU2VydmljZVJvbGVGb3JBbWF6b25FTVJDb250YWluZXJzYCxcbiAgICApO1xuICAgIFxuICAgIC8vQWRkIHRoZSBzZXJ2aWNlIHJvbGUgdG8gdGhlIEF3c0F1dGhcbiAgICBjbHVzdGVyLmF3c0F1dGguYWRkUm9sZU1hcHBpbmcoXG4gICAgICBlbXJFa3NTZXJ2aWNlUm9sZSxcbiAgICAgIHtcbiAgICAgICAgdXNlcm5hbWU6ICdlbXItY29udGFpbmVycycsXG4gICAgICAgIGdyb3VwczogWycnXVxuICAgICAgfVxuICAgICk7XG4gIFxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZW1yT25Fa3NTbHIpO1xuICB9XG59Il19