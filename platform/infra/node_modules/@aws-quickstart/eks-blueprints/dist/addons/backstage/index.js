"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackstageAddOn = void 0;
const helm_addon_1 = require("../helm-addon");
const utils_1 = require("../../utils");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const HTTPS = "https://";
/**
 * Default props to be used when creating the Helm chart
 */
const defaultProps = {
    name: "blueprints-backstage-addon",
    namespace: "backstage",
    chart: "backstage",
    version: "0.17.0",
    release: "backstage",
    repository: "https://backstage.github.io/charts",
    imageTag: "latest",
    values: {}
};
/**
 * Main class to instantiate the Helm chart
 */
class BackstageAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        let values = this.populateValues(clusterInfo, this.options);
        const chart = this.addHelmChart(clusterInfo, values);
        new aws_cdk_lib_1.CfnOutput(clusterInfo.cluster.stack, 'Backstage base URL', {
            value: HTTPS + this.options.subdomain,
            description: "Backstage base URL",
            exportName: "BackstageBaseUrl",
        });
        return Promise.resolve(chart);
    }
    /**
    * populateValues populates the appropriate values used to customize the Helm chart
    * @param helmOptions User provided values to customize the chart
    */
    populateValues(clusterInfo, helmOptions) {
        var _a, _b;
        const values = (_a = helmOptions.values) !== null && _a !== void 0 ? _a : {};
        const annotations = {
            "alb.ingress.kubernetes.io/scheme": "internet-facing",
            "alb.ingress.kubernetes.io/target-type": "ip",
            "alb.ingress.kubernetes.io/certificate-arn": (_b = clusterInfo.getResource(helmOptions.certificateResourceName)) === null || _b === void 0 ? void 0 : _b.certificateArn
        };
        const databaseInstance = clusterInfo.getRequiredResource(helmOptions.databaseResourceName);
        if (databaseInstance === undefined) {
            throw new Error("Database instance not found");
        }
        const databaseChartValues = {
            "client": "pg",
            "connection": {
                "host": databaseInstance.dbInstanceEndpointAddress,
                "port": databaseInstance.dbInstanceEndpointPort,
                "user": "${POSTGRES_USER}",
                "password": "${POSTGRES_PASSWORD}"
            }
        };
        (0, utils_1.setPath)(values, "ingress.enabled", true);
        (0, utils_1.setPath)(values, "ingress.className", "alb");
        (0, utils_1.setPath)(values, "ingress.host", helmOptions.subdomain);
        (0, utils_1.setPath)(values, "ingress.annotations", annotations);
        (0, utils_1.setPath)(values, "backstage.image.registry", helmOptions.imageRegistry);
        (0, utils_1.setPath)(values, "backstage.image.repository", helmOptions.imageRepository);
        (0, utils_1.setPath)(values, "backstage.image.tag", helmOptions.imageTag);
        (0, utils_1.setPath)(values, "backstage.appConfig.app.baseUrl", HTTPS + helmOptions.subdomain);
        (0, utils_1.setPath)(values, "backstage.appConfig.backend.baseUrl", HTTPS + helmOptions.subdomain);
        (0, utils_1.setPath)(values, "backstage.appConfig.backend.database", databaseChartValues);
        (0, utils_1.setPath)(values, "backstage.extraEnvVarsSecrets", [helmOptions.databaseSecretTargetName]);
        (0, utils_1.setPath)(values, "backstage.command", ["node", "packages/backend", "--config", "app-config.yaml"]);
        return values;
    }
}
exports.BackstageAddOn = BackstageAddOn;
__decorate([
    (0, utils_1.dependable)('AwsLoadBalancerControllerAddOn'),
    (0, utils_1.dependable)('ExternalsSecretsAddOn')
], BackstageAddOn.prototype, "deploy", null);
//# sourceMappingURL=data:application/json;base64,