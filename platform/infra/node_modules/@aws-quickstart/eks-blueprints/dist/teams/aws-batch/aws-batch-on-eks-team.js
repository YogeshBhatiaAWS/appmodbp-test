"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchEksTeam = void 0;
const cluster_providers_1 = require("../../cluster-providers");
const team_1 = require("../team");
const kubectl_provider_1 = require("../../addons/helm-addon/kubectl-provider");
const yaml_utils_1 = require("../../utils/yaml-utils");
const batch = require("aws-cdk-lib/aws-batch");
const iam = require("aws-cdk-lib/aws-iam");
const assert = require("assert");
const NAMESPACE = 'aws-batch';
const defaultProps = {
    name: NAMESPACE,
    namespace: NAMESPACE,
};
/*
 *This class define the Team that can be used with AWS Batch on EKS
 */
class BatchEksTeam extends team_1.ApplicationTeam {
    /**
     * @public
     * @param {BatchEksTeamProps} props the Batch team definition {@link BatchEksTeamProps}
     */
    constructor(props) {
        const teamProps = { ...defaultProps, ...props };
        super(teamProps);
        this.batchTeamProps = teamProps;
    }
    setup(clusterInfo) {
        const computeResources = this.batchTeamProps.computeResources;
        const priority = computeResources.priority;
        assert(computeResources.minvCpus < computeResources.maxvCpus, 'Max vCPU must be greater than Min vCPU');
        assert((priority >= 0) && (priority % 1 == 0), 'Priority must be a whole number.');
        const awsBatchAddOn = clusterInfo.getProvisionedAddOn('AwsBatchAddOn');
        if (awsBatchAddOn === undefined) {
            throw new Error("AwsBatchAddOn must be deployed before creating AWS Batch on EKS team.");
        }
        // Set AWS Batch namespace and necessary RBACs
        const statement = this.setBatchEksResources(clusterInfo, this.batchTeamProps.namespace);
        // Create compute environment
        const computeEnv = this.setComputeEnvironment(clusterInfo, this.batchTeamProps.namespace, computeResources);
        computeEnv.node.addDependency(awsBatchAddOn);
        computeEnv.node.addDependency(statement);
        // Create a job queue
        const jobQueue = new batch.CfnJobQueue(clusterInfo.cluster.stack, 'batch-eks-job-queue', {
            jobQueueName: this.batchTeamProps.jobQueueName,
            priority: priority,
            computeEnvironmentOrder: [
                {
                    order: 1,
                    computeEnvironment: computeEnv.attrComputeEnvironmentArn
                }
            ]
        });
        jobQueue.node.addDependency(computeEnv);
    }
    /**
     * method to to apply k8s RBAC to the service account used by Batch service role
     * @param ClusterInfo EKS cluster where to apply the RBAC
     * @param namespace Namespace where the RBAC are applied
     * @param createNamespace flag to create namespace if not already created
     * @returns
     */
    setBatchEksResources(clusterInfo, namespace) {
        let doc = (0, yaml_utils_1.readYamlDocument)(`${__dirname}/aws-batch-rbac-config.ytpl`);
        //Get the RBAC definition and replace with the namespace provided by the user
        const manifest = doc.split("---").map(e => (0, yaml_utils_1.loadYaml)(e));
        const values = {
            namespace: namespace
        };
        const manifestDeployment = {
            name: 'aws-batch-rbacs',
            namespace: namespace,
            manifest,
            values
        };
        const kubectlProvider = new kubectl_provider_1.KubectlProvider(clusterInfo);
        const statement = kubectlProvider.addManifest(manifestDeployment);
        return statement;
    }
    setComputeEnvironment(clusterInfo, namespace, computeResources) {
        const nodeGroups = (0, cluster_providers_1.assertEC2NodeGroup)(clusterInfo, "Batch Compute Environment");
        const ngRoleNames = nodeGroups.map((ng) => { return ng.role.roleName; });
        const cluster = clusterInfo.cluster;
        const ngRole = ngRoleNames[0];
        // Need to create instance profile for the nodegroup role
        const instanceProfile = new iam.CfnInstanceProfile(cluster, 'ng-role-instance-profile', {
            instanceProfileName: ngRole,
            roles: [ngRole]
        });
        const batchComputeEnv = new batch.CfnComputeEnvironment(cluster, "batch-eks-compute-environment", {
            type: 'MANAGED',
            computeEnvironmentName: this.batchTeamProps.envName,
            state: 'ENABLED',
            eksConfiguration: {
                eksClusterArn: cluster.clusterArn,
                kubernetesNamespace: namespace,
            },
            computeResources: {
                type: computeResources.envType,
                allocationStrategy: computeResources.allocationStrategy,
                minvCpus: computeResources.minvCpus,
                maxvCpus: computeResources.maxvCpus,
                instanceTypes: computeResources.instanceTypes,
                subnets: cluster.vpc.publicSubnets.map((e) => { return e.subnetId; }),
                securityGroupIds: [cluster.clusterSecurityGroupId],
                instanceRole: ngRole,
            }
        });
        batchComputeEnv.node.addDependency(instanceProfile);
        return batchComputeEnv;
    }
}
exports.BatchEksTeam = BatchEksTeam;
//# sourceMappingURL=data:application/json;base64,