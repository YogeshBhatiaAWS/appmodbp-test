"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmrEksTeam = void 0;
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const nsutils = require("../utils/namespace-utils");
const simplebase = require("simple-base");
const aws_emrcontainers_1 = require("aws-cdk-lib/aws-emrcontainers");
const team_1 = require("./team");
const kubectl_provider_1 = require("../addons/helm-addon/kubectl-provider");
const yaml_utils_1 = require("../utils/yaml-utils");
/*
 *This class define the Team that can be used with EMR on EKS
 *The class will create an EMR on EKS Virtual Cluster to use by the team
 *It can either create a namespace or use an existing one
 *The class will set the necessary k8s RBAC needed by EMR on EKS as defined in the AWS documentation
 * https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/setting-up-cluster-access.html
 * class constructor takes EMR on EKS team definition as a parameter. Pre:requisite: EMR on EKS AddOn is part of the blueprint.
 * The EmrEksTeam will `throw` an error if the EMR on EKS AddOn is not part of the blueprint.
 *
 * The team will create the IAM execution roles based on the IAM policies passed to it.
 *
 * The IAM roles will have the following format: `NAME-AWS-REGION-EKS-CLUSTER-NAME`
 */
class EmrEksTeam extends team_1.ApplicationTeam {
    /**
     * @public
     * @param {EmrEksTeamProps} props the EMR on EKS team definition {@link EmrEksTeamProps}
     */
    constructor(props) {
        super(props);
        this.emrTeam = props;
    }
    setup(clusterInfo) {
        const cluster = clusterInfo.cluster;
        const emrOnEksAddOn = clusterInfo.getProvisionedAddOn('EmrEksAddOn');
        if (emrOnEksAddOn === undefined) {
            throw new Error("EmrEksAddOn must be deployed before creating EMR on EKS team");
        }
        const emrVcPrerequisit = this.setEmrContainersForNamespace(clusterInfo, this.emrTeam.virtualClusterNamespace, this.emrTeam.createNamespace);
        this.emrTeam.executionRoles.forEach(executionRole => {
            const executionRolePolicy = executionRole.excutionRoleIamPolicy ?
                executionRole.excutionRoleIamPolicy :
                new aws_iam_1.ManagedPolicy(cluster.stack, `executionRole-${executionRole.executionRoleName}-Policy`, {
                    statements: executionRole.executionRoleIamPolicyStatement,
                });
            this.createExecutionRole(cluster, executionRolePolicy, this.emrTeam.virtualClusterNamespace, executionRole.executionRoleName);
        });
        const blueprintTag = {
            key: 'created-with',
            value: 'cdk-blueprint',
        };
        let virtualClusterTags = this.emrTeam.virtualClusterTags ? this.emrTeam.virtualClusterTags : [];
        virtualClusterTags.push(blueprintTag);
        const teamVC = new aws_emrcontainers_1.CfnVirtualCluster(cluster.stack, `${this.emrTeam.virtualClusterName}-VirtualCluster`, {
            name: this.emrTeam.virtualClusterName,
            containerProvider: {
                id: cluster.clusterName,
                type: 'EKS',
                info: { eksInfo: { namespace: this.emrTeam.virtualClusterNamespace } },
            },
            tags: virtualClusterTags,
        });
        teamVC.node.addDependency(emrVcPrerequisit);
        teamVC.node.addDependency(emrOnEksAddOn);
        //Force dependency between the EKS cluster and EMR on EKS Virtual cluster
        teamVC.node.addDependency(clusterInfo.cluster);
        new aws_cdk_lib_1.CfnOutput(cluster.stack, `${this.emrTeam.virtualClusterName}-virtual cluster-id`, {
            value: teamVC.attrId
        });
    }
    /**
     * @internal
     * Private method to to apply k8s RBAC to the service account used by EMR on EKS service role
     * For more information on the RBAC read consult the EMR on EKS documentation in this link
     * https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/setting-up-cluster-access.html
     * This method
     * @param ClusterInfo EKS cluster where to apply the RBAC
     * @param namespace Namespace where the RBAC are applied
     * @param createNamespace flag to create namespace if not already created
     * @returns
     */
    setEmrContainersForNamespace(ClusterInfo, namespace, createNamespace) {
        let doc = (0, yaml_utils_1.readYamlDocument)(`${__dirname}/emr-containers-rbac-config.ytpl`);
        //Get the RBAC definition and replace with the namespace provided by the user
        const manifest = doc.split("---").map(e => (0, yaml_utils_1.loadYaml)(e));
        const values = {
            namespace: namespace
        };
        const manifestDeployment = {
            name: 'emr-containers',
            namespace: namespace,
            manifest,
            values
        };
        const kubectlProvider = new kubectl_provider_1.KubectlProvider(ClusterInfo);
        const statement = kubectlProvider.addManifest(manifestDeployment);
        if (createNamespace) {
            const namespaceManifest = nsutils.createNamespace(namespace, ClusterInfo.cluster, true);
            statement.node.addDependency(namespaceManifest);
        }
        return statement;
    }
    /**
     * @internal
     * private method to create the execution role for EMR on EKS scoped to a namespace and a given IAM role
     * @param cluster EKS cluster
     * @param policy IAM policy to use with the role
     * @param namespace Namespace of the EMR Virtual Cluster
     * @param name Name of the IAM role
     * @returns Role
     */
    createExecutionRole(cluster, policy, namespace, name) {
        const stack = cluster.stack;
        const roleName = `${name}-${aws_cdk_lib_1.Aws.REGION.toString()}-${cluster.clusterName}`;
        let irsaConditionkey = new aws_cdk_lib_1.CfnJson(stack, `${name}roleIrsaConditionkey'`, {
            value: {
                [`${cluster.openIdConnectProvider.openIdConnectProviderIssuer}:sub`]: 'system:serviceaccount:' + namespace + ':emr-containers-sa-*-*-' + aws_cdk_lib_1.Aws.ACCOUNT_ID.toString() + '-' + simplebase.base36.encode(roleName),
            },
        });
        // Create an execution role assumable by EKS OIDC provider and scoped to the service account of the virtual cluster
        return new aws_iam_1.Role(stack, `${name}ExecutionRole`, {
            assumedBy: new aws_iam_1.FederatedPrincipal(cluster.openIdConnectProvider.openIdConnectProviderArn, {
                StringLike: irsaConditionkey,
            }, 'sts:AssumeRoleWithWebIdentity'),
            roleName: roleName,
            managedPolicies: [policy],
        });
    }
}
exports.EmrEksTeam = EmrEksTeam;
//# sourceMappingURL=data:application/json;base64,