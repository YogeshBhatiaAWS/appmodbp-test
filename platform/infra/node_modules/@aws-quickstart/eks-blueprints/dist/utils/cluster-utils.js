"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployBeforeCapacity = exports.tagAsg = exports.setupClusterLogging = void 0;
const custom_resources_1 = require("aws-cdk-lib/custom-resources");
const customResource = require("aws-cdk-lib/custom-resources");
// Available Control Plane logging types
const CONTROL_PLANE_LOG_TYPES = ['api', 'audit', 'authenticator', 'controllerManager', 'scheduler'];
// Enables logs for the cluster.
function setupClusterLogging(stack, cluster, enableLogTypes) {
    if (!enableLogTypes.every(val => CONTROL_PLANE_LOG_TYPES.includes(val))) {
        throw new Error('You have included an invalid Control Plane Log Type.');
    }
    let disableLogTypes = CONTROL_PLANE_LOG_TYPES.filter(item => enableLogTypes.indexOf(item) < 0);
    new custom_resources_1.AwsCustomResource(stack, "ClusterLogsEnabler", {
        policy: custom_resources_1.AwsCustomResourcePolicy.fromSdkCalls({
            resources: [`${cluster.clusterArn}/update-config`],
        }),
        onCreate: {
            physicalResourceId: { id: `${cluster.clusterArn}/LogsEnabler` },
            service: "EKS",
            action: "updateClusterConfig",
            region: stack.region,
            parameters: {
                name: cluster.clusterName,
                logging: {
                    clusterLogging: [
                        {
                            enabled: true,
                            types: enableLogTypes,
                        },
                    ],
                },
            },
        },
        onDelete: {
            physicalResourceId: { id: `${cluster.clusterArn}/LogsEnabler` },
            service: "EKS",
            action: "updateClusterConfig",
            region: stack.region,
            parameters: {
                name: cluster.clusterName,
                logging: {
                    clusterLogging: [
                        {
                            enabled: false,
                            types: CONTROL_PLANE_LOG_TYPES,
                        },
                    ],
                },
            },
        },
        onUpdate: {
            physicalResourceId: { id: `${cluster.clusterArn}/LogsEnabler` },
            service: "EKS",
            action: "updateClusterConfig",
            region: stack.region,
            parameters: {
                name: cluster.clusterName,
                logging: {
                    clusterLogging: [
                        {
                            enabled: true,
                            types: enableLogTypes,
                        },
                        {
                            enabled: false,
                            types: disableLogTypes,
                        },
                    ],
                },
            },
        },
    });
}
exports.setupClusterLogging = setupClusterLogging;
/**
 * Creates the node termination tag for the ASG
 * @param scope
 * @param autoScalingGroup
 */
function tagAsg(scope, autoScalingGroup, tags) {
    let tagList = [];
    tags.forEach((tag) => {
        tagList.push({
            Key: tag.Key,
            Value: tag.Value,
            PropagateAtLaunch: true,
            ResourceId: autoScalingGroup,
            ResourceType: 'auto-scaling-group'
        });
    });
    const callProps = {
        service: 'AutoScaling',
        action: 'createOrUpdateTags',
        parameters: {
            Tags: tagList
        },
        physicalResourceId: customResource.PhysicalResourceId.of(`${autoScalingGroup}-asg-tag`)
    };
    new customResource.AwsCustomResource(scope, 'asg-tag', {
        onCreate: callProps,
        onUpdate: callProps,
        policy: customResource.AwsCustomResourcePolicy.fromSdkCalls({
            resources: customResource.AwsCustomResourcePolicy.ANY_RESOURCE
        })
    });
}
exports.tagAsg = tagAsg;
/**
 * Makes the provided construct run before any capacity (worker nodes) is provisioned on the cluster.
 * Useful for control plane add-ons, such as VPC-CNI that must be provisioned before EC2 (or Fargate) capacity is added.
 * @param construct identifies construct (such as core add-on) that should be provisioned before capacity
 * @param clusterInfo cluster provisioning context
 */
function deployBeforeCapacity(construct, clusterInfo) {
    var _a, _b, _c;
    let allCapacity = [];
    allCapacity = allCapacity.concat((_a = clusterInfo.nodeGroups) !== null && _a !== void 0 ? _a : [])
        .concat((_b = clusterInfo.autoscalingGroups) !== null && _b !== void 0 ? _b : [])
        .concat((_c = clusterInfo.fargateProfiles) !== null && _c !== void 0 ? _c : []);
    allCapacity.forEach(v => v.node.addDependency(construct));
}
exports.deployBeforeCapacity = deployBeforeCapacity;
//# sourceMappingURL=data:application/json;base64,