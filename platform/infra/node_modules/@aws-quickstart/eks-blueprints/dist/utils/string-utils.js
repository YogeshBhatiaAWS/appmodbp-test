"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.changeTextBetweenTokens = exports.escapeDots = exports.kebabToCamel = exports.atob = exports.btoa = void 0;
/**
 * Encode utf8 to Base64.
 * @param str
 * @returns
 */
function btoa(str) { return Buffer.from(str).toString('base64'); }
exports.btoa = btoa;
/**
 * Decode from base64 (to utf8).
 * @param b64Encoded
 * @returns
 */
function atob(b64Encoded) { return Buffer.from(b64Encoded, 'base64').toString(); }
exports.atob = atob;
/**
 * Convert kebab case string to camel case
 * @param string
 * @returns
 */
function kebabToCamel(str) { return str.replace(/-./g, x => x[1].toUpperCase()); }
exports.kebabToCamel = kebabToCamel;
/**
 * Escape the dots in the string
 * @param string
 * @returns
 */
function escapeDots(str) { return str.replace(/\./g, '\\.'); }
exports.escapeDots = escapeDots;
/**
 * Removes either text between given tokens or just the tokens themselves.
 * Example use case: YAML manipulation similar to Helm: openToken = "{{ if ... }}", closeToken = "{{ end }}""
 * @param string
 * @returns
 */
function changeTextBetweenTokens(str, openToken, closeToken, keep) {
    let regex;
    let regexString;
    if (keep) {
        regexString = ".*(" + openToken + "|" + closeToken + ").*\r?\n";
        regex = new RegExp(regexString, "g");
    }
    else {
        regexString = openToken + ".*" + closeToken;
        regex = new RegExp(regexString, "sg");
    }
    return str.replace(regex, '');
}
exports.changeTextBetweenTokens = changeTextBetweenTokens;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3V0aWxzL3N0cmluZy11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQTs7OztHQUlHO0FBQ0gsU0FBZ0IsSUFBSSxDQUFDLEdBQVcsSUFBSSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUFqRixvQkFBaUY7QUFHakY7Ozs7R0FJRztBQUNILFNBQWdCLElBQUksQ0FBQyxVQUFrQixJQUFJLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQWpHLG9CQUFpRztBQUVqRzs7OztHQUlHO0FBQ0gsU0FBZ0IsWUFBWSxDQUFDLEdBQVcsSUFBSSxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQWpHLG9DQUFpRztBQUVqRzs7OztHQUlHO0FBQ0gsU0FBZ0IsVUFBVSxDQUFDLEdBQVcsSUFBSSxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUE3RSxnQ0FBNkU7QUFFN0U7Ozs7O0dBS0c7QUFDSCxTQUFnQix1QkFBdUIsQ0FBQyxHQUFXLEVBQUUsU0FBaUIsRUFBRSxVQUFrQixFQUFFLElBQWE7SUFDckcsSUFBSSxLQUFhLENBQUM7SUFDbEIsSUFBSSxXQUFtQixDQUFDO0lBQ3hCLElBQUksSUFBSSxFQUFDO1FBQ0wsV0FBVyxHQUFHLEtBQUssR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDaEUsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUN4QztTQUFNO1FBQ0gsV0FBVyxHQUFHLFNBQVMsR0FBRyxJQUFJLEdBQUcsVUFBVSxDQUFDO1FBQzVDLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDekM7SUFFRCxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFaRCwwREFZQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBFbmNvZGUgdXRmOCB0byBCYXNlNjQuXG4gKiBAcGFyYW0gc3RyIFxuICogQHJldHVybnMgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidG9hKHN0cjogc3RyaW5nKSB7IHJldHVybiBCdWZmZXIuZnJvbShzdHIpLnRvU3RyaW5nKCdiYXNlNjQnKTsgfVxuXG5cbi8qKlxuICogRGVjb2RlIGZyb20gYmFzZTY0ICh0byB1dGY4KS5cbiAqIEBwYXJhbSBiNjRFbmNvZGVkIFxuICogQHJldHVybnMgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhdG9iKGI2NEVuY29kZWQ6IHN0cmluZykgeyByZXR1cm4gQnVmZmVyLmZyb20oYjY0RW5jb2RlZCwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCk7IH1cblxuLyoqXG4gKiBDb252ZXJ0IGtlYmFiIGNhc2Ugc3RyaW5nIHRvIGNhbWVsIGNhc2VcbiAqIEBwYXJhbSBzdHJpbmdcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBrZWJhYlRvQ2FtZWwoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHN0ci5yZXBsYWNlKC8tLi9nLCB4ID0+IHhbMV0udG9VcHBlckNhc2UoKSk7IH1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGRvdHMgaW4gdGhlIHN0cmluZ1xuICogQHBhcmFtIHN0cmluZ1xuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZURvdHMoc3RyOiBzdHJpbmcpIHsgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXC4vZywgJ1xcXFwuJyk7IH1cblxuLyoqXG4gKiBSZW1vdmVzIGVpdGhlciB0ZXh0IGJldHdlZW4gZ2l2ZW4gdG9rZW5zIG9yIGp1c3QgdGhlIHRva2VucyB0aGVtc2VsdmVzLlxuICogRXhhbXBsZSB1c2UgY2FzZTogWUFNTCBtYW5pcHVsYXRpb24gc2ltaWxhciB0byBIZWxtOiBvcGVuVG9rZW4gPSBcInt7IGlmIC4uLiB9fVwiLCBjbG9zZVRva2VuID0gXCJ7eyBlbmQgfX1cIlwiXG4gKiBAcGFyYW0gc3RyaW5nXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlVGV4dEJldHdlZW5Ub2tlbnMoc3RyOiBzdHJpbmcsIG9wZW5Ub2tlbjogc3RyaW5nLCBjbG9zZVRva2VuOiBzdHJpbmcsIGtlZXA6IGJvb2xlYW4pIHtcbiAgICBsZXQgcmVnZXg6IFJlZ0V4cDtcbiAgICBsZXQgcmVnZXhTdHJpbmc6IHN0cmluZztcbiAgICBpZiAoa2VlcCl7XG4gICAgICAgIHJlZ2V4U3RyaW5nID0gXCIuKihcIiArIG9wZW5Ub2tlbiArIFwifFwiICsgY2xvc2VUb2tlbiArIFwiKS4qXFxyP1xcblwiO1xuICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTdHJpbmcsIFwiZ1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZWdleFN0cmluZyA9IG9wZW5Ub2tlbiArIFwiLipcIiArIGNsb3NlVG9rZW47XG4gICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFN0cmluZywgXCJzZ1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyLnJlcGxhY2UocmVnZXgsICcnKTtcbn1cbiJdfQ==