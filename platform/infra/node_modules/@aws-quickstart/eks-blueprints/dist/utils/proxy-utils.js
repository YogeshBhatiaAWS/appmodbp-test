"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveTarget = exports.DummyProxy = exports.sourceFunction = exports.isDynamicProxy = void 0;
const nutil = require("node:util/types");
/**
 * Symbol that uniquely designates that a particular proxy is instance of our DummyProxy
 */
exports.isDynamicProxy = Symbol("isDynamicProxy");
/**
 * Symbol that retrieves the source function from the proxy. This function is expected to create the required target (e.g. resource).
 */
exports.sourceFunction = Symbol("sourceFunction");
/**
 * Simple proxy implementation that will require resolution at runtime (enables lazy loading).
 * Unlike dynamic proxy that can create target on the fly, this proxy
 * just a place-holder that supplies the function that can be used to resolve the target.
 * Since most CDK constructs are not idempotent (meaning you can not call a create function twice, the second will fail)
 * this design choice was the simplest to support declarative resources.
 * Customers can clone the supplied JSON structure with cloneDeep and replace proxies with the actual targets as part of that process.
 */
class DummyProxy {
    constructor(source) {
        this.source = source;
    }
    get(_, key) {
        if (key === exports.isDynamicProxy) {
            return true;
        }
        if (key === exports.sourceFunction) {
            return this.source;
        }
        return new Proxy({}, new DummyProxy((arg) => {
            return this.source(arg)[key];
        }));
    }
}
exports.DummyProxy = DummyProxy;
/**
 * Function resolves the proxy with the target, that enables lazy loading use cases.
 * @param value potential proxy to resolve
 * @param arg represents the argument that should be passed to the resolution function (sourceFunction).
 * @returns
 */
function resolveTarget(value, arg) {
    if (nutil.isProxy(value)) {
        const object = value;
        if (object[exports.isDynamicProxy]) {
            const fn = object[exports.sourceFunction];
            return fn(arg);
        }
    }
    return value;
}
exports.resolveTarget = resolveTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveHktdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvdXRpbHMvcHJveHktdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUNBQXlDO0FBSXpDOztHQUVHO0FBQ1UsUUFBQSxjQUFjLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFFdkQ7O0dBRUc7QUFDVSxRQUFBLGNBQWMsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUV2RDs7Ozs7OztHQU9HO0FBQ0gsTUFBYSxVQUFVO0lBRW5CLFlBQW9CLE1BQW9CO1FBQXBCLFdBQU0sR0FBTixNQUFNLENBQWM7SUFBRyxDQUFDO0lBRXJDLEdBQUcsQ0FBQyxDQUFJLEVBQUUsR0FBZ0I7UUFDN0IsSUFBRyxHQUFHLEtBQUssc0JBQWMsRUFBRTtZQUN2QixPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsSUFBRyxHQUFHLEtBQUssc0JBQWMsRUFBRTtZQUN2QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDdEI7UUFFRCxPQUFPLElBQUksS0FBSyxDQUFDLEVBQVMsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQy9DLE9BQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQztDQUNKO0FBakJELGdDQWlCQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsYUFBYSxDQUFDLEtBQVUsRUFBRSxHQUFRO0lBQzlDLElBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNyQixNQUFNLE1BQU0sR0FBUyxLQUFLLENBQUM7UUFDM0IsSUFBRyxNQUFNLENBQUMsc0JBQWMsQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sRUFBRSxHQUFtQixNQUFNLENBQUMsc0JBQWMsQ0FBQyxDQUFDO1lBQ2xELE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2xCO0tBQ0o7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBVEQsc0NBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBudXRpbCBmcm9tICdub2RlOnV0aWwvdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBPbmVBcmdGbjxUPiA9IChhcmc6IGFueSkgPT4gVDtcblxuLyoqXG4gKiBTeW1ib2wgdGhhdCB1bmlxdWVseSBkZXNpZ25hdGVzIHRoYXQgYSBwYXJ0aWN1bGFyIHByb3h5IGlzIGluc3RhbmNlIG9mIG91ciBEdW1teVByb3h5XG4gKi9cbmV4cG9ydCBjb25zdCBpc0R5bmFtaWNQcm94eSA9IFN5bWJvbChcImlzRHluYW1pY1Byb3h5XCIpO1xuXG4vKipcbiAqIFN5bWJvbCB0aGF0IHJldHJpZXZlcyB0aGUgc291cmNlIGZ1bmN0aW9uIGZyb20gdGhlIHByb3h5LiBUaGlzIGZ1bmN0aW9uIGlzIGV4cGVjdGVkIHRvIGNyZWF0ZSB0aGUgcmVxdWlyZWQgdGFyZ2V0IChlLmcuIHJlc291cmNlKS5cbiAqL1xuZXhwb3J0IGNvbnN0IHNvdXJjZUZ1bmN0aW9uID0gU3ltYm9sKFwic291cmNlRnVuY3Rpb25cIik7XG5cbi8qKlxuICogU2ltcGxlIHByb3h5IGltcGxlbWVudGF0aW9uIHRoYXQgd2lsbCByZXF1aXJlIHJlc29sdXRpb24gYXQgcnVudGltZSAoZW5hYmxlcyBsYXp5IGxvYWRpbmcpLlxuICogVW5saWtlIGR5bmFtaWMgcHJveHkgdGhhdCBjYW4gY3JlYXRlIHRhcmdldCBvbiB0aGUgZmx5LCB0aGlzIHByb3h5XG4gKiBqdXN0IGEgcGxhY2UtaG9sZGVyIHRoYXQgc3VwcGxpZXMgdGhlIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVzb2x2ZSB0aGUgdGFyZ2V0LiBcbiAqIFNpbmNlIG1vc3QgQ0RLIGNvbnN0cnVjdHMgYXJlIG5vdCBpZGVtcG90ZW50IChtZWFuaW5nIHlvdSBjYW4gbm90IGNhbGwgYSBjcmVhdGUgZnVuY3Rpb24gdHdpY2UsIHRoZSBzZWNvbmQgd2lsbCBmYWlsKVxuICogdGhpcyBkZXNpZ24gY2hvaWNlIHdhcyB0aGUgc2ltcGxlc3QgdG8gc3VwcG9ydCBkZWNsYXJhdGl2ZSByZXNvdXJjZXMuIFxuICogQ3VzdG9tZXJzIGNhbiBjbG9uZSB0aGUgc3VwcGxpZWQgSlNPTiBzdHJ1Y3R1cmUgd2l0aCBjbG9uZURlZXAgYW5kIHJlcGxhY2UgcHJveGllcyB3aXRoIHRoZSBhY3R1YWwgdGFyZ2V0cyBhcyBwYXJ0IG9mIHRoYXQgcHJvY2Vzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIER1bW15UHJveHk8VCBleHRlbmRzIG9iamVjdD4gaW1wbGVtZW50cyBQcm94eUhhbmRsZXI8VD4ge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzb3VyY2UgOiBPbmVBcmdGbjxUPikge31cblxuICAgIHB1YmxpYyBnZXQoXzogVCwga2V5OiBQcm9wZXJ0eUtleSk6IGFueSB7XG4gICAgICAgIGlmKGtleSA9PT0gaXNEeW5hbWljUHJveHkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZihrZXkgPT09IHNvdXJjZUZ1bmN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHt9IGFzIGFueSwgbmV3IER1bW15UHJveHkoKGFyZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnNvdXJjZShhcmcpIGFzIGFueSlba2V5XTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBGdW5jdGlvbiByZXNvbHZlcyB0aGUgcHJveHkgd2l0aCB0aGUgdGFyZ2V0LCB0aGF0IGVuYWJsZXMgbGF6eSBsb2FkaW5nIHVzZSBjYXNlcy5cbiAqIEBwYXJhbSB2YWx1ZSBwb3RlbnRpYWwgcHJveHkgdG8gcmVzb2x2ZVxuICogQHBhcmFtIGFyZyByZXByZXNlbnRzIHRoZSBhcmd1bWVudCB0aGF0IHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIHJlc29sdXRpb24gZnVuY3Rpb24gKHNvdXJjZUZ1bmN0aW9uKS5cbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVRhcmdldCh2YWx1ZTogYW55LCBhcmc6IGFueSkge1xuICAgIGlmKG51dGlsLmlzUHJveHkodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IG9iamVjdCA6IGFueSA9IHZhbHVlO1xuICAgICAgICBpZihvYmplY3RbaXNEeW5hbWljUHJveHldKSB7XG4gICAgICAgICAgICBjb25zdCBmbjogT25lQXJnRm48YW55PiAgPSBvYmplY3Rbc291cmNlRnVuY3Rpb25dO1xuICAgICAgICAgICAgcmV0dXJuIGZuKGFyZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG4iXX0=