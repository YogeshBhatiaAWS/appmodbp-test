"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.conflictsWith = exports.dependable = exports.isOrderedAddOn = exports.getAddOnNameOrId = void 0;
const assert = require("assert");
require("reflect-metadata");
/**
 * Returns AddOn Id if defined else returns the class name
 * @param addOn
 * @returns string
 */
function getAddOnNameOrId(addOn) {
    var _a;
    return (_a = addOn.id) !== null && _a !== void 0 ? _a : addOn.constructor.name;
}
exports.getAddOnNameOrId = getAddOnNameOrId;
function isOrderedAddOn(addOn) {
    var _a, _b;
    return (_b = (_a = Reflect.getMetadata("ordered", addOn.constructor)) !== null && _a !== void 0 ? _a : Reflect.getMetadata("ordered", addOn)) !== null && _b !== void 0 ? _b : false;
}
exports.isOrderedAddOn = isOrderedAddOn;
/**
 * Decorator function that accepts a list of AddOns and
 * ensures addons are scheduled to be added as well as
 * add them as dependencies
 * @param addOns
 * @returns
 */
function dependable(...addOns) {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target, key, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            const dependencies = Array();
            const clusterInfo = args[0];
            const stack = clusterInfo.cluster.stack.stackName;
            addOns.forEach((addOn) => {
                const dep = clusterInfo.getScheduledAddOn(addOn);
                assert(dep, `Missing a dependency for ${addOn} for ${stack}`);
                dependencies.push(dep);
            });
            const result = originalMethod.apply(this, args);
            Promise.all(dependencies.values()).then((constructs) => {
                constructs.forEach((construct) => {
                    result.then((resource) => {
                        resource.node.addDependency(construct);
                    });
                });
            }).catch(err => { throw new Error(err); });
            return result;
        };
        return descriptor;
    };
}
exports.dependable = dependable;
/**
 * Decorator function that accepts a list of AddOns and
 * throws error if those addons are scheduled to be added as well
 * As they should not be deployed with
 * @param addOns
 * @returns
 */
function conflictsWith(...addOns) {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target, key, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            // const dependencies: (Promise<Construct> | undefined)[] = [];
            const clusterInfo = args[0];
            const stack = clusterInfo.cluster.stack.stackName;
            addOns.forEach((addOn) => {
                const dep = clusterInfo.getScheduledAddOn(addOn);
                if (dep) {
                    throw new Error(`Deploying ${stack} failed due to conflicting add-on: ${addOn}.`);
                }
            });
            return originalMethod.apply(this, args);
        };
        return descriptor;
    };
}
exports.conflictsWith = conflictsWith;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkb24tdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvdXRpbHMvYWRkb24tdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQWlDO0FBRWpDLDRCQUEwQjtBQUcxQjs7OztHQUlHO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQUMsS0FBbUI7O0lBQ2xELE9BQU8sTUFBQSxLQUFLLENBQUMsRUFBRSxtQ0FBSSxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztBQUM1QyxDQUFDO0FBRkQsNENBRUM7QUFFRCxTQUFnQixjQUFjLENBQUMsS0FBbUI7O0lBQzlDLE9BQU8sTUFBQSxNQUFBLE9BQU8sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsbUNBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLG1DQUFJLEtBQUssQ0FBQztBQUMvRyxDQUFDO0FBRkQsd0NBRUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxTQUFnQixVQUFVLENBQUMsR0FBRyxNQUFnQjtJQUM1Qyx3REFBd0Q7SUFDeEQsT0FBTyxVQUFVLE1BQWMsRUFBRSxHQUFvQixFQUFFLFVBQThCO1FBQ25GLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFFeEMsVUFBVSxDQUFDLEtBQUssR0FBRyxVQUFVLEdBQUcsSUFBVztZQUN6QyxNQUFNLFlBQVksR0FBRyxLQUFLLEVBQXNCLENBQUM7WUFDakQsTUFBTSxXQUFXLEdBQWdCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QyxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7WUFFbEQsTUFBTSxDQUFDLE9BQU8sQ0FBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUN4QixNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2pELE1BQU0sQ0FBQyxHQUFHLEVBQUUsNEJBQTRCLEtBQUssUUFBUSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUM5RCxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUksQ0FBQyxDQUFDO1lBQzFCLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxNQUFNLEdBQXVCLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBRXBFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUU7Z0JBQ3JELFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtvQkFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO3dCQUN2QixRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDekMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFM0MsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQyxDQUFDO1FBRUYsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQS9CRCxnQ0ErQkM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxTQUFnQixhQUFhLENBQUMsR0FBRyxNQUFnQjtJQUMvQyx3REFBd0Q7SUFDeEQsT0FBTyxVQUFVLE1BQWMsRUFBRSxHQUFvQixFQUFFLFVBQThCO1FBQ25GLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFFeEMsVUFBVSxDQUFDLEtBQUssR0FBRyxVQUFVLEdBQUcsSUFBVztZQUN6QywrREFBK0Q7WUFDL0QsTUFBTSxXQUFXLEdBQWdCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QyxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7WUFFbEQsTUFBTSxDQUFDLE9BQU8sQ0FBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUN4QixNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2pELElBQUksR0FBRyxFQUFDO29CQUNOLE1BQU0sSUFBSSxLQUFLLENBQUMsYUFBYSxLQUFLLHNDQUFzQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2lCQUNuRjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsT0FBTyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUM7UUFFRixPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDLENBQUM7QUFDSixDQUFDO0FBdEJELHNDQXNCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IFwicmVmbGVjdC1tZXRhZGF0YVwiO1xuaW1wb3J0IHsgQ2x1c3RlckFkZE9uLCBDbHVzdGVySW5mbyB9IGZyb20gJy4uL3NwaSc7XG5cbi8qKlxuICogUmV0dXJucyBBZGRPbiBJZCBpZiBkZWZpbmVkIGVsc2UgcmV0dXJucyB0aGUgY2xhc3MgbmFtZVxuICogQHBhcmFtIGFkZE9uXG4gKiBAcmV0dXJucyBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFkZE9uTmFtZU9ySWQoYWRkT246IENsdXN0ZXJBZGRPbik6IHN0cmluZyB7XG4gIHJldHVybiBhZGRPbi5pZCA/PyBhZGRPbi5jb25zdHJ1Y3Rvci5uYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPcmRlcmVkQWRkT24oYWRkT246IENsdXN0ZXJBZGRPbikgOiBib29sZWFuIHtcbiAgICByZXR1cm4gUmVmbGVjdC5nZXRNZXRhZGF0YShcIm9yZGVyZWRcIiwgYWRkT24uY29uc3RydWN0b3IpID8/IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJvcmRlcmVkXCIsIGFkZE9uKSA/PyBmYWxzZTtcbn1cblxuLyoqXG4gKiBEZWNvcmF0b3IgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGEgbGlzdCBvZiBBZGRPbnMgYW5kXG4gKiBlbnN1cmVzIGFkZG9ucyBhcmUgc2NoZWR1bGVkIHRvIGJlIGFkZGVkIGFzIHdlbGwgYXNcbiAqIGFkZCB0aGVtIGFzIGRlcGVuZGVuY2llc1xuICogQHBhcmFtIGFkZE9ucyBcbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVwZW5kYWJsZSguLi5hZGRPbnM6IHN0cmluZ1tdKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0OiBPYmplY3QsIGtleTogc3RyaW5nIHwgc3ltYm9sLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XG5cbiAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24oIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBBcnJheTxQcm9taXNlPENvbnN0cnVjdD4+KCk7XG4gICAgICBjb25zdCBjbHVzdGVySW5mbzogQ2x1c3RlckluZm8gPSBhcmdzWzBdO1xuICAgICAgY29uc3Qgc3RhY2sgPSBjbHVzdGVySW5mby5jbHVzdGVyLnN0YWNrLnN0YWNrTmFtZTtcblxuICAgICAgYWRkT25zLmZvckVhY2goIChhZGRPbikgPT4ge1xuICAgICAgICBjb25zdCBkZXAgPSBjbHVzdGVySW5mby5nZXRTY2hlZHVsZWRBZGRPbihhZGRPbik7XG4gICAgICAgIGFzc2VydChkZXAsIGBNaXNzaW5nIGEgZGVwZW5kZW5jeSBmb3IgJHthZGRPbn0gZm9yICR7c3RhY2t9YCk7IFxuICAgICAgICBkZXBlbmRlbmNpZXMucHVzaChkZXAhKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQ6IFByb21pc2U8Q29uc3RydWN0PiA9IG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXG4gICAgICBQcm9taXNlLmFsbChkZXBlbmRlbmNpZXMudmFsdWVzKCkpLnRoZW4oKGNvbnN0cnVjdHMpID0+IHtcbiAgICAgICAgY29uc3RydWN0cy5mb3JFYWNoKChjb25zdHJ1Y3QpID0+IHtcbiAgICAgICAgICAgIHJlc3VsdC50aGVuKChyZXNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgICByZXNvdXJjZS5ub2RlLmFkZERlcGVuZGVuY3koY29uc3RydWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7IHRocm93IG5ldyBFcnJvcihlcnIpOyB9KTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gIH07XG59XG5cbi8qKlxuICogRGVjb3JhdG9yIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhIGxpc3Qgb2YgQWRkT25zIGFuZFxuICogdGhyb3dzIGVycm9yIGlmIHRob3NlIGFkZG9ucyBhcmUgc2NoZWR1bGVkIHRvIGJlIGFkZGVkIGFzIHdlbGxcbiAqIEFzIHRoZXkgc2hvdWxkIG5vdCBiZSBkZXBsb3llZCB3aXRoXG4gKiBAcGFyYW0gYWRkT25zIFxuICogQHJldHVybnMgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25mbGljdHNXaXRoKC4uLmFkZE9uczogc3RyaW5nW10pIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IE9iamVjdCwga2V5OiBzdHJpbmcgfCBzeW1ib2wsIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gZGVzY3JpcHRvci52YWx1ZTtcblxuICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiggLi4uYXJnczogYW55W10pIHtcbiAgICAgIC8vIGNvbnN0IGRlcGVuZGVuY2llczogKFByb21pc2U8Q29uc3RydWN0PiB8IHVuZGVmaW5lZClbXSA9IFtdO1xuICAgICAgY29uc3QgY2x1c3RlckluZm86IENsdXN0ZXJJbmZvID0gYXJnc1swXTtcbiAgICAgIGNvbnN0IHN0YWNrID0gY2x1c3RlckluZm8uY2x1c3Rlci5zdGFjay5zdGFja05hbWU7XG5cbiAgICAgIGFkZE9ucy5mb3JFYWNoKCAoYWRkT24pID0+IHtcbiAgICAgICAgY29uc3QgZGVwID0gY2x1c3RlckluZm8uZ2V0U2NoZWR1bGVkQWRkT24oYWRkT24pO1xuICAgICAgICBpZiAoZGVwKXtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERlcGxveWluZyAke3N0YWNrfSBmYWlsZWQgZHVlIHRvIGNvbmZsaWN0aW5nIGFkZC1vbjogJHthZGRPbn0uYCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gb3JpZ2luYWxNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcblxuICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICB9O1xufVxuIl19